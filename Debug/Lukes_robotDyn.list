
Lukes_robotDyn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080055ac  080055ac  000065ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b0  080056b0  00007348  2**0
                  CONTENTS
  4 .ARM          00000008  080056b0  080056b0  000066b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b8  080056b8  00007348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b8  080056b8  000066b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056bc  080056bc  000066bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  080056c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000348  08005a08  00007348  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08005a08  000076d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b18  00000000  00000000  00007371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a6  00000000  00000000  00019e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000912a  00000000  00000000  0001c42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00025560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000baa  00000000  00000000  00026450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c8a  00000000  00000000  00026ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d0f  00000000  00000000  0003fc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009070d  00000000  00000000  00056993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e70a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033bc  00000000  00000000  000e70e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000ea4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	08005594 	.word	0x08005594

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	08005594 	.word	0x08005594

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c6:	2afd      	cmp	r2, #253	@ 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	@ 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	@ 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <__aeabi_f2uiz>:
 8000fa8:	0042      	lsls	r2, r0, #1
 8000faa:	d20e      	bcs.n	8000fca <__aeabi_f2uiz+0x22>
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fb0:	d30b      	bcc.n	8000fca <__aeabi_f2uiz+0x22>
 8000fb2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d409      	bmi.n	8000fd0 <__aeabi_f2uiz+0x28>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2uiz+0x32>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d102      	bne.n	8000fe0 <__aeabi_f2uiz+0x38>
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000fe8:	b500      	push	{lr}
 8000fea:	b085      	sub	sp, #20
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <I2C_LCD_ExpanderWrite+0x3c>)
 8000fee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <I2C_LCD_ExpanderWrite+0x40>)
 8000ffc:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8001000:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8001004:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8001008:	2364      	movs	r3, #100	@ 0x64
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	f10d 020f 	add.w	r2, sp, #15
 8001012:	4099      	lsls	r1, r3
 8001014:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8001018:	f002 f96a 	bl	80032f0 <HAL_I2C_Master_Transmit>
}
 800101c:	b005      	add	sp, #20
 800101e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001022:	bf00      	nop
 8001024:	20000364 	.word	0x20000364
 8001028:	080055bc 	.word	0x080055bc

0800102c <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4605      	mov	r5, r0
 8001030:	460c      	mov	r4, r1
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8001032:	f041 0104 	orr.w	r1, r1, #4
 8001036:	f7ff ffd7 	bl	8000fe8 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 800103a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800103e:	6999      	ldr	r1, [r3, #24]
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <I2C_LCD_EnPulse+0x68>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <I2C_LCD_EnPulse+0x6c>)
 8001046:	fba3 3202 	umull	r3, r2, r3, r2
 800104a:	0c93      	lsrs	r3, r2, #18
 800104c:	0cd2      	lsrs	r2, r2, #19
 800104e:	ebc2 0243 	rsb	r2, r2, r3, lsl #1
 8001052:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	1acb      	subs	r3, r1, r3
 800105a:	4293      	cmp	r3, r2
 800105c:	d3f9      	bcc.n	8001052 <I2C_LCD_EnPulse+0x26>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800105e:	f004 01fb 	and.w	r1, r4, #251	@ 0xfb
 8001062:	4628      	mov	r0, r5
 8001064:	f7ff ffc0 	bl	8000fe8 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8001068:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800106c:	6999      	ldr	r1, [r3, #24]
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <I2C_LCD_EnPulse+0x68>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <I2C_LCD_EnPulse+0x6c>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	0c9a      	lsrs	r2, r3, #18
 800107a:	2032      	movs	r0, #50	@ 0x32
 800107c:	fb00 f202 	mul.w	r2, r0, r2
 8001080:	eba2 42d3 	sub.w	r2, r2, r3, lsr #19
 8001084:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	1acb      	subs	r3, r1, r3
 800108c:	4293      	cmp	r3, r2
 800108e:	d3f9      	bcc.n	8001084 <I2C_LCD_EnPulse+0x58>
}
 8001090:	bd38      	pop	{r3, r4, r5, pc}
 8001092:	bf00      	nop
 8001094:	200002ec 	.word	0x200002ec
 8001098:	431bde83 	.word	0x431bde83

0800109c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 800109c:	b538      	push	{r3, r4, r5, lr}
 800109e:	4604      	mov	r4, r0
 80010a0:	460d      	mov	r5, r1
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80010a2:	f7ff ffa1 	bl	8000fe8 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 80010a6:	4629      	mov	r1, r5
 80010a8:	4620      	mov	r0, r4
 80010aa:	f7ff ffbf 	bl	800102c <I2C_LCD_EnPulse>
}
 80010ae:	bd38      	pop	{r3, r4, r5, pc}

080010b0 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	4606      	mov	r6, r0
 80010b4:	4615      	mov	r5, r2
    uint8_t HighNib = Val & 0xF0;
 80010b6:	f001 03f0 	and.w	r3, r1, #240	@ 0xf0
    uint8_t LowNib = (Val << 4) & 0xF0;
 80010ba:	010c      	lsls	r4, r1, #4
 80010bc:	b2e4      	uxtb	r4, r4
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 80010be:	ea43 0102 	orr.w	r1, r3, r2
 80010c2:	f7ff ffeb 	bl	800109c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 80010c6:	ea44 0105 	orr.w	r1, r4, r5
 80010ca:	4630      	mov	r0, r6
 80010cc:	f7ff ffe6 	bl	800109c <I2C_LCD_Write4Bits>
}
 80010d0:	bd70      	pop	{r4, r5, r6, pc}

080010d2 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80010d2:	b508      	push	{r3, lr}
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f7ff ffeb 	bl	80010b0 <I2C_LCD_Send>
}
 80010da:	bd08      	pop	{r3, pc}

080010dc <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80010dc:	b508      	push	{r3, lr}
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	f7ff ffe6 	bl	80010b0 <I2C_LCD_Send>
}
 80010e4:	bd08      	pop	{r3, pc}
	...

080010e8 <I2C_LCD_Clear>:
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
}

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 80010e8:	b508      	push	{r3, lr}
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 80010ea:	2101      	movs	r1, #1
 80010ec:	f7ff fff1 	bl	80010d2 <I2C_LCD_Cmd>
    DELAY_MS(2);
 80010f0:	2000      	movs	r0, #0
 80010f2:	e015      	b.n	8001120 <I2C_LCD_Clear+0x38>
 80010f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010f8:	6999      	ldr	r1, [r3, #24]
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <I2C_LCD_Clear+0x40>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <I2C_LCD_Clear+0x44>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	0c9a      	lsrs	r2, r3, #18
 8001106:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 800110a:	fb0c f202 	mul.w	r2, ip, r2
 800110e:	eba2 42d3 	sub.w	r2, r2, r3, lsr #19
 8001112:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	1acb      	subs	r3, r1, r3
 800111a:	4293      	cmp	r3, r2
 800111c:	d3f9      	bcc.n	8001112 <I2C_LCD_Clear+0x2a>
 800111e:	3001      	adds	r0, #1
 8001120:	2801      	cmp	r0, #1
 8001122:	d9e7      	bls.n	80010f4 <I2C_LCD_Clear+0xc>
}
 8001124:	bd08      	pop	{r3, pc}
 8001126:	bf00      	nop
 8001128:	200002ec 	.word	0x200002ec
 800112c:	431bde83 	.word	0x431bde83

08001130 <I2C_LCD_Init>:
{
 8001130:	b510      	push	{r4, lr}
 8001132:	4604      	mov	r4, r0
	while(HAL_GetTick() < 50);
 8001134:	f001 f9c0 	bl	80024b8 <HAL_GetTick>
 8001138:	2831      	cmp	r0, #49	@ 0x31
 800113a:	d9fb      	bls.n	8001134 <I2C_LCD_Init+0x4>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800113c:	2130      	movs	r1, #48	@ 0x30
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff ffc7 	bl	80010d2 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001144:	2000      	movs	r0, #0
 8001146:	e015      	b.n	8001174 <I2C_LCD_Init+0x44>
 8001148:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800114c:	6999      	ldr	r1, [r3, #24]
 800114e:	4b33      	ldr	r3, [pc, #204]	@ (800121c <I2C_LCD_Init+0xec>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a33      	ldr	r2, [pc, #204]	@ (8001220 <I2C_LCD_Init+0xf0>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	0c9a      	lsrs	r2, r3, #18
 800115a:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 800115e:	fb0c f202 	mul.w	r2, ip, r2
 8001162:	eba2 42d3 	sub.w	r2, r2, r3, lsr #19
 8001166:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	1acb      	subs	r3, r1, r3
 800116e:	4293      	cmp	r3, r2
 8001170:	d3f9      	bcc.n	8001166 <I2C_LCD_Init+0x36>
 8001172:	3001      	adds	r0, #1
 8001174:	2804      	cmp	r0, #4
 8001176:	d9e7      	bls.n	8001148 <I2C_LCD_Init+0x18>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001178:	2130      	movs	r1, #48	@ 0x30
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff ffa9 	bl	80010d2 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001180:	2000      	movs	r0, #0
 8001182:	e015      	b.n	80011b0 <I2C_LCD_Init+0x80>
 8001184:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001188:	6999      	ldr	r1, [r3, #24]
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <I2C_LCD_Init+0xec>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <I2C_LCD_Init+0xf0>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9a      	lsrs	r2, r3, #18
 8001196:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 800119a:	fb0c f202 	mul.w	r2, ip, r2
 800119e:	eba2 42d3 	sub.w	r2, r2, r3, lsr #19
 80011a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	1acb      	subs	r3, r1, r3
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d3f9      	bcc.n	80011a2 <I2C_LCD_Init+0x72>
 80011ae:	3001      	adds	r0, #1
 80011b0:	2804      	cmp	r0, #4
 80011b2:	d9e7      	bls.n	8001184 <I2C_LCD_Init+0x54>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80011b4:	2130      	movs	r1, #48	@ 0x30
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff ff8b 	bl	80010d2 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80011bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011c0:	6999      	ldr	r1, [r3, #24]
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <I2C_LCD_Init+0xec>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <I2C_LCD_Init+0xf0>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9a      	lsrs	r2, r3, #18
 80011ce:	2096      	movs	r0, #150	@ 0x96
 80011d0:	fb00 f202 	mul.w	r2, r0, r2
 80011d4:	eba2 42d3 	sub.w	r2, r2, r3, lsr #19
 80011d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	1acb      	subs	r3, r1, r3
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d3f9      	bcc.n	80011d8 <I2C_LCD_Init+0xa8>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80011e4:	2102      	movs	r1, #2
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff ff73 	bl	80010d2 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80011ec:	2128      	movs	r1, #40	@ 0x28
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff ff6f 	bl	80010d2 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80011f4:	210c      	movs	r1, #12
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff ff6b 	bl	80010d2 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80011fc:	2106      	movs	r1, #6
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff ff67 	bl	80010d2 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <I2C_LCD_Init+0xf4>)
 8001206:	2204      	movs	r2, #4
 8001208:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800120c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001210:	2208      	movs	r2, #8
 8001212:	705a      	strb	r2, [r3, #1]
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff ff67 	bl	80010e8 <I2C_LCD_Clear>
}
 800121a:	bd10      	pop	{r4, pc}
 800121c:	200002ec 	.word	0x200002ec
 8001220:	431bde83 	.word	0x431bde83
 8001224:	20000364 	.word	0x20000364

08001228 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8001228:	b530      	push	{r4, r5, lr}
 800122a:	b085      	sub	sp, #20
 800122c:	4604      	mov	r4, r0
 800122e:	468c      	mov	ip, r1
 8001230:	4696      	mov	lr, r2
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <I2C_LCD_SetCursor+0x48>)
 8001234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001236:	ad04      	add	r5, sp, #16
 8001238:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800123c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <I2C_LCD_SetCursor+0x4c>)
 8001242:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001246:	7a9b      	ldrb	r3, [r3, #10]
 8001248:	4573      	cmp	r3, lr
 800124a:	d202      	bcs.n	8001252 <I2C_LCD_SetCursor+0x2a>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 800124c:	3b01      	subs	r3, #1
 800124e:	fa5f fe83 	uxtb.w	lr, r3
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8001252:	ab04      	add	r3, sp, #16
 8001254:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8001258:	f85e 1c10 	ldr.w	r1, [lr, #-16]
 800125c:	4461      	add	r1, ip
 800125e:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8001262:	b2c9      	uxtb	r1, r1
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff ff34 	bl	80010d2 <I2C_LCD_Cmd>
}
 800126a:	b005      	add	sp, #20
 800126c:	bd30      	pop	{r4, r5, pc}
 800126e:	bf00      	nop
 8001270:	080055ac 	.word	0x080055ac
 8001274:	080055bc 	.word	0x080055bc

08001278 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	4605      	mov	r5, r0
 800127c:	460c      	mov	r4, r1
    while (*Str)
 800127e:	e003      	b.n	8001288 <I2C_LCD_WriteString+0x10>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8001280:	3401      	adds	r4, #1
 8001282:	4628      	mov	r0, r5
 8001284:	f7ff ff2a 	bl	80010dc <I2C_LCD_Data>
    while (*Str)
 8001288:	7821      	ldrb	r1, [r4, #0]
 800128a:	2900      	cmp	r1, #0
 800128c:	d1f8      	bne.n	8001280 <I2C_LCD_WriteString+0x8>
    }
}
 800128e:	bd38      	pop	{r3, r4, r5, pc}

08001290 <I2C_LCD_ClearRow>:
{
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CharIndex, RS);
}

void I2C_LCD_ClearRow(uint8_t I2C_LCD_InstanceIndex, uint8_t RowIndex)
{
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	4605      	mov	r5, r0
 8001294:	460e      	mov	r6, r1
	I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, RowIndex);
 8001296:	460a      	mov	r2, r1
 8001298:	2100      	movs	r1, #0
 800129a:	f7ff ffc5 	bl	8001228 <I2C_LCD_SetCursor>
	for (int i = 0; i < 16; i++) {
 800129e:	2400      	movs	r4, #0
 80012a0:	e004      	b.n	80012ac <I2C_LCD_ClearRow+0x1c>
		I2C_LCD_WriteString(I2C_LCD_InstanceIndex, " ");
 80012a2:	4906      	ldr	r1, [pc, #24]	@ (80012bc <I2C_LCD_ClearRow+0x2c>)
 80012a4:	4628      	mov	r0, r5
 80012a6:	f7ff ffe7 	bl	8001278 <I2C_LCD_WriteString>
	for (int i = 0; i < 16; i++) {
 80012aa:	3401      	adds	r4, #1
 80012ac:	2c0f      	cmp	r4, #15
 80012ae:	ddf8      	ble.n	80012a2 <I2C_LCD_ClearRow+0x12>
	}
	I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, RowIndex);
 80012b0:	4632      	mov	r2, r6
 80012b2:	2100      	movs	r1, #0
 80012b4:	4628      	mov	r0, r5
 80012b6:	f7ff ffb7 	bl	8001228 <I2C_LCD_SetCursor>
}
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	08005604 	.word	0x08005604

080012c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012c4:	b089      	sub	sp, #36	@ 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012c6:	2400      	movs	r4, #0
 80012c8:	9404      	str	r4, [sp, #16]
 80012ca:	9405      	str	r4, [sp, #20]
 80012cc:	9406      	str	r4, [sp, #24]
 80012ce:	9407      	str	r4, [sp, #28]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	4b45      	ldr	r3, [pc, #276]	@ (80013e8 <MX_GPIO_Init+0x128>)
 80012d2:	699a      	ldr	r2, [r3, #24]
 80012d4:	f042 0210 	orr.w	r2, r2, #16
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	699a      	ldr	r2, [r3, #24]
 80012dc:	f002 0210 	and.w	r2, r2, #16
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	f042 0220 	orr.w	r2, r2, #32
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	f002 0220 	and.w	r2, r2, #32
 80012f2:	9201      	str	r2, [sp, #4]
 80012f4:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	699a      	ldr	r2, [r3, #24]
 80012f8:	f042 0204 	orr.w	r2, r2, #4
 80012fc:	619a      	str	r2, [r3, #24]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	f002 0204 	and.w	r2, r2, #4
 8001304:	9202      	str	r2, [sp, #8]
 8001306:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	f042 0208 	orr.w	r2, r2, #8
 800130e:	619a      	str	r2, [r3, #24]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	9b03      	ldr	r3, [sp, #12]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800131a:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 80013ec <MX_GPIO_Init+0x12c>
 800131e:	4622      	mov	r2, r4
 8001320:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001324:	4648      	mov	r0, r9
 8001326:	f001 fd56 	bl	8002dd6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800132a:	4e31      	ldr	r6, [pc, #196]	@ (80013f0 <MX_GPIO_Init+0x130>)
 800132c:	4622      	mov	r2, r4
 800132e:	2120      	movs	r1, #32
 8001330:	4630      	mov	r0, r6
 8001332:	f001 fd50 	bl	8002dd6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001336:	4f2f      	ldr	r7, [pc, #188]	@ (80013f4 <MX_GPIO_Init+0x134>)
 8001338:	4622      	mov	r2, r4
 800133a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800133e:	4638      	mov	r0, r7
 8001340:	f001 fd49 	bl	8002dd6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001348:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2501      	movs	r5, #1
 800134c:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	f04f 0802 	mov.w	r8, #2
 8001354:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	a904      	add	r1, sp, #16
 800135a:	4648      	mov	r0, r9
 800135c:	f001 fc26 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001360:	2303      	movs	r3, #3
 8001362:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <MX_GPIO_Init+0x138>)
 8001366:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001368:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	a904      	add	r1, sp, #16
 800136c:	4630      	mov	r0, r6
 800136e:	f001 fc1d 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001372:	2310      	movs	r3, #16
 8001374:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	eb0d 0103 	add.w	r1, sp, r3
 800137e:	4630      	mov	r0, r6
 8001380:	f001 fc14 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001384:	2320      	movs	r3, #32
 8001386:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	a904      	add	r1, sp, #16
 8001392:	4630      	mov	r0, r6
 8001394:	f001 fc0a 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800139c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	a904      	add	r1, sp, #16
 80013a4:	4638      	mov	r0, r7
 80013a6:	f001 fc01 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013ae:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	a904      	add	r1, sp, #16
 80013ba:	4638      	mov	r0, r7
 80013bc:	f001 fbf6 	bl	8002bac <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013c0:	4622      	mov	r2, r4
 80013c2:	4621      	mov	r1, r4
 80013c4:	2006      	movs	r0, #6
 80013c6:	f001 fbbf 	bl	8002b48 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ca:	2006      	movs	r0, #6
 80013cc:	f001 fbcc 	bl	8002b68 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013d0:	4622      	mov	r2, r4
 80013d2:	4621      	mov	r1, r4
 80013d4:	2007      	movs	r0, #7
 80013d6:	f001 fbb7 	bl	8002b48 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013da:	2007      	movs	r0, #7
 80013dc:	f001 fbc4 	bl	8002b68 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013e0:	b009      	add	sp, #36	@ 0x24
 80013e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	10310000 	.word	0x10310000

080013fc <updateLCD>:
void updateLCD(void) {
 80013fc:	b570      	push	{r4, r5, r6, lr}
	MenuItem *pMenuItem = getCurrentMenuItem();
 80013fe:	f000 fe77 	bl	80020f0 <getCurrentMenuItem>
 8001402:	4604      	mov	r4, r0
	size_t lengthName = strlen(pMenuItem->name);
 8001404:	f7fe feae 	bl	8000164 <strlen>
	buffer[0] = '\0';
 8001408:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <updateLCD+0xc4>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
	if (pMenuItem) {
 800140e:	2c00      	cmp	r4, #0
 8001410:	d04b      	beq.n	80014aa <updateLCD+0xae>
 8001412:	4606      	mov	r6, r0
		I2C_LCD_ClearRow(0, 0);
 8001414:	4611      	mov	r1, r2
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff ff3a 	bl	8001290 <I2C_LCD_ClearRow>
		I2C_LCD_WriteString(0, pMenuItem->name);
 800141c:	4621      	mov	r1, r4
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff ff2a 	bl	8001278 <I2C_LCD_WriteString>
		if (strcmp(pMenuItem->action, "time") == 0) {
 8001424:	f104 0519 	add.w	r5, r4, #25
 8001428:	4926      	ldr	r1, [pc, #152]	@ (80014c4 <updateLCD+0xc8>)
 800142a:	4628      	mov	r0, r5
 800142c:	f7fe fe90 	bl	8000150 <strcmp>
 8001430:	b178      	cbz	r0, 8001452 <updateLCD+0x56>
		} else if (strcmp(pMenuItem->action, "temp") == 0) {
 8001432:	4925      	ldr	r1, [pc, #148]	@ (80014c8 <updateLCD+0xcc>)
 8001434:	4628      	mov	r0, r5
 8001436:	f7fe fe8b 	bl	8000150 <strcmp>
 800143a:	b1f8      	cbz	r0, 800147c <updateLCD+0x80>
		} else if (strcmp(pMenuItem->action, "start") == 0) {
 800143c:	4923      	ldr	r1, [pc, #140]	@ (80014cc <updateLCD+0xd0>)
 800143e:	4628      	mov	r0, r5
 8001440:	f7fe fe86 	bl	8000150 <strcmp>
 8001444:	b9b0      	cbnz	r0, 8001474 <updateLCD+0x78>
			programCountdown = 1;
 8001446:	2101      	movs	r1, #1
 8001448:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <updateLCD+0xd4>)
 800144a:	7019      	strb	r1, [r3, #0]
			I2C_LCD_ClearRow(0, 1);
 800144c:	f7ff ff20 	bl	8001290 <I2C_LCD_ClearRow>
 8001450:	e010      	b.n	8001474 <updateLCD+0x78>
			sprintf(buffer, "%d:%02d", pMenuItem->value / 60,
 8001452:	8c23      	ldrh	r3, [r4, #32]
 8001454:	4a1f      	ldr	r2, [pc, #124]	@ (80014d4 <updateLCD+0xd8>)
 8001456:	fba2 1203 	umull	r1, r2, r2, r3
 800145a:	0952      	lsrs	r2, r2, #5
 800145c:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8001460:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 8001464:	b29b      	uxth	r3, r3
 8001466:	491c      	ldr	r1, [pc, #112]	@ (80014d8 <updateLCD+0xdc>)
 8001468:	4815      	ldr	r0, [pc, #84]	@ (80014c0 <updateLCD+0xc4>)
 800146a:	f003 f9f7 	bl	800485c <siprintf>
			setTime = pMenuItem->value;
 800146e:	8c22      	ldrh	r2, [r4, #32]
 8001470:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <updateLCD+0xe0>)
 8001472:	801a      	strh	r2, [r3, #0]
		if (buffer[0] != '\0') {
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <updateLCD+0xc4>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b963      	cbnz	r3, 8001494 <updateLCD+0x98>
}
 800147a:	bd70      	pop	{r4, r5, r6, pc}
			sprintf(buffer, "%d %cC", pMenuItem->value, 0xDF);
 800147c:	23df      	movs	r3, #223	@ 0xdf
 800147e:	8c22      	ldrh	r2, [r4, #32]
 8001480:	4917      	ldr	r1, [pc, #92]	@ (80014e0 <updateLCD+0xe4>)
 8001482:	480f      	ldr	r0, [pc, #60]	@ (80014c0 <updateLCD+0xc4>)
 8001484:	f003 f9ea 	bl	800485c <siprintf>
			setTemp = pMenuItem->value;
 8001488:	8c20      	ldrh	r0, [r4, #32]
 800148a:	f7ff fc99 	bl	8000dc0 <__aeabi_ui2f>
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <updateLCD+0xe8>)
 8001490:	6018      	str	r0, [r3, #0]
 8001492:	e7ef      	b.n	8001474 <updateLCD+0x78>
			I2C_LCD_SetCursor(0, lengthName + 1, 0);
 8001494:	1c71      	adds	r1, r6, #1
 8001496:	2200      	movs	r2, #0
 8001498:	b2c9      	uxtb	r1, r1
 800149a:	4610      	mov	r0, r2
 800149c:	f7ff fec4 	bl	8001228 <I2C_LCD_SetCursor>
			I2C_LCD_WriteString(0, buffer);
 80014a0:	4907      	ldr	r1, [pc, #28]	@ (80014c0 <updateLCD+0xc4>)
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fee8 	bl	8001278 <I2C_LCD_WriteString>
 80014a8:	e7e7      	b.n	800147a <updateLCD+0x7e>
		I2C_LCD_SetCursor(0, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	4611      	mov	r1, r2
 80014ae:	4610      	mov	r0, r2
 80014b0:	f7ff feba 	bl	8001228 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(0, "ERROR");
 80014b4:	490c      	ldr	r1, [pc, #48]	@ (80014e8 <updateLCD+0xec>)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fede 	bl	8001278 <I2C_LCD_WriteString>
}
 80014bc:	e7dd      	b.n	800147a <updateLCD+0x7e>
 80014be:	bf00      	nop
 80014c0:	2000037c 	.word	0x2000037c
 80014c4:	080055c8 	.word	0x080055c8
 80014c8:	080055d8 	.word	0x080055d8
 80014cc:	080055e8 	.word	0x080055e8
 80014d0:	2000038d 	.word	0x2000038d
 80014d4:	88888889 	.word	0x88888889
 80014d8:	080055d0 	.word	0x080055d0
 80014dc:	20000002 	.word	0x20000002
 80014e0:	080055e0 	.word	0x080055e0
 80014e4:	20000004 	.word	0x20000004
 80014e8:	080055f0 	.word	0x080055f0

080014ec <resetMenu>:
void resetMenu(void) {
 80014ec:	b510      	push	{r4, lr}
	programCountdown = 0;
 80014ee:	2400      	movs	r4, #0
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <resetMenu+0x44>)
 80014f2:	701c      	strb	r4, [r3, #0]
	action = 0;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <resetMenu+0x48>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
	setTime = 30;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <resetMenu+0x4c>)
 80014fc:	221e      	movs	r2, #30
 80014fe:	801a      	strh	r2, [r3, #0]
	I2C_LCD_ClearRow(0, 1);
 8001500:	2101      	movs	r1, #1
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fec4 	bl	8001290 <I2C_LCD_ClearRow>
	I2C_LCD_SetCursor(0, 0, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	4621      	mov	r1, r4
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff fe8b 	bl	8001228 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(0, "-- DONE --   ");
 8001512:	490a      	ldr	r1, [pc, #40]	@ (800153c <resetMenu+0x50>)
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff feaf 	bl	8001278 <I2C_LCD_WriteString>
	moveParentChild(-1);
 800151a:	f04f 30ff 	mov.w	r0, #4294967295
 800151e:	f000 fdc9 	bl	80020b4 <moveParentChild>
	moveParentChild(-1);
 8001522:	f04f 30ff 	mov.w	r0, #4294967295
 8001526:	f000 fdc5 	bl	80020b4 <moveParentChild>
	updateLCD();
 800152a:	f7ff ff67 	bl	80013fc <updateLCD>
}
 800152e:	bd10      	pop	{r4, pc}
 8001530:	2000038d 	.word	0x2000038d
 8001534:	20000390 	.word	0x20000390
 8001538:	20000002 	.word	0x20000002
 800153c:	080055f8 	.word	0x080055f8

08001540 <calcThermistorTemp>:
	if (rawAdc == 0)
 8001540:	b908      	cbnz	r0, 8001546 <calcThermistorTemp+0x6>
		return -999;
 8001542:	482d      	ldr	r0, [pc, #180]	@ (80015f8 <calcThermistorTemp+0xb8>)
}
 8001544:	4770      	bx	lr
float calcThermistorTemp(uint16_t rawAdc) {
 8001546:	b538      	push	{r3, r4, r5, lr}
 8001548:	4603      	mov	r3, r0
	float resistance = serialResistance * rawAdc / (adcResolution - rawAdc);
 800154a:	f642 104a 	movw	r0, #10570	@ 0x294a
 800154e:	fb03 f000 	mul.w	r0, r3, r0
 8001552:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001556:	330f      	adds	r3, #15
 8001558:	fb90 f0f3 	sdiv	r0, r0, r3
 800155c:	f7ff fc34 	bl	8000dc8 <__aeabi_i2f>
	float temp = log(resistance);
 8001560:	f7ff f820 	bl	80005a4 <__aeabi_f2d>
 8001564:	f003 fe2a 	bl	80051bc <log>
 8001568:	f7ff fb24 	bl	8000bb4 <__aeabi_d2f>
					+ (0.000234125 + (0.0000000876741 * temp * temp)) * temp);
 800156c:	f7ff f81a 	bl	80005a4 <__aeabi_f2d>
 8001570:	4604      	mov	r4, r0
 8001572:	460d      	mov	r5, r1
 8001574:	a318      	add	r3, pc, #96	@ (adr r3, 80015d8 <calcThermistorTemp+0x98>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f86b 	bl	8000654 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4620      	mov	r0, r4
 8001584:	4629      	mov	r1, r5
 8001586:	f7ff f865 	bl	8000654 <__aeabi_dmul>
 800158a:	a315      	add	r3, pc, #84	@ (adr r3, 80015e0 <calcThermistorTemp+0xa0>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7fe feaa 	bl	80002e8 <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7ff f85a 	bl	8000654 <__aeabi_dmul>
 80015a0:	a311      	add	r3, pc, #68	@ (adr r3, 80015e8 <calcThermistorTemp+0xa8>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7fe fe9f 	bl	80002e8 <__adddf3>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
			/ (0.001129148
 80015ae:	2000      	movs	r0, #0
 80015b0:	4912      	ldr	r1, [pc, #72]	@ (80015fc <calcThermistorTemp+0xbc>)
 80015b2:	f7ff f979 	bl	80008a8 <__aeabi_ddiv>
	temp = 1.0
 80015b6:	f7ff fafd 	bl	8000bb4 <__aeabi_d2f>
	temp = temp - 273.15;
 80015ba:	f7fe fff3 	bl	80005a4 <__aeabi_f2d>
 80015be:	a30c      	add	r3, pc, #48	@ (adr r3, 80015f0 <calcThermistorTemp+0xb0>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7fe fe8e 	bl	80002e4 <__aeabi_dsub>
 80015c8:	f7ff faf4 	bl	8000bb4 <__aeabi_d2f>
	temp = temp - 5; // offset
 80015cc:	490c      	ldr	r1, [pc, #48]	@ (8001600 <calcThermistorTemp+0xc0>)
 80015ce:	f7ff fb45 	bl	8000c5c <__aeabi_fsub>
}
 80015d2:	bd38      	pop	{r3, r4, r5, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	14170d19 	.word	0x14170d19
 80015dc:	3e7788eb 	.word	0x3e7788eb
 80015e0:	6fb4c3c2 	.word	0x6fb4c3c2
 80015e4:	3f2eafee 	.word	0x3f2eafee
 80015e8:	6edeb890 	.word	0x6edeb890
 80015ec:	3f527ffd 	.word	0x3f527ffd
 80015f0:	66666666 	.word	0x66666666
 80015f4:	40711266 	.word	0x40711266
 80015f8:	c479c000 	.word	0xc479c000
 80015fc:	3ff00000 	.word	0x3ff00000
 8001600:	40a00000 	.word	0x40a00000

08001604 <calcRegulatorAction>:
		float measuredValue) {
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	4604      	mov	r4, r0
 8001608:	4608      	mov	r0, r1
	float error = setpoint - measuredValue;
 800160a:	4611      	mov	r1, r2
 800160c:	f7ff fb26 	bl	8000c5c <__aeabi_fsub>
 8001610:	4605      	mov	r5, r0
	float proportional = pid->kp * error;
 8001612:	4601      	mov	r1, r0
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	f7fe fdad 	bl	8000174 <__aeabi_fmul>
 800161a:	4606      	mov	r6, r0
	pid->integral += error * dt;
 800161c:	68e7      	ldr	r7, [r4, #12]
 800161e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001622:	4628      	mov	r0, r5
 8001624:	f7fe fda6 	bl	8000174 <__aeabi_fmul>
 8001628:	4601      	mov	r1, r0
 800162a:	4638      	mov	r0, r7
 800162c:	f7ff fb18 	bl	8000c60 <__addsf3>
 8001630:	4605      	mov	r5, r0
 8001632:	60e0      	str	r0, [r4, #12]
	if (pid->integral > errorLimit) {
 8001634:	4913      	ldr	r1, [pc, #76]	@ (8001684 <calcRegulatorAction+0x80>)
 8001636:	f7ff fc87 	bl	8000f48 <__aeabi_fcmpgt>
 800163a:	b1c0      	cbz	r0, 800166e <calcRegulatorAction+0x6a>
		pid->integral = errorLimit;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <calcRegulatorAction+0x80>)
 800163e:	60e3      	str	r3, [r4, #12]
	float integral = pid->ki * pid->integral;
 8001640:	68e1      	ldr	r1, [r4, #12]
 8001642:	6860      	ldr	r0, [r4, #4]
 8001644:	f7fe fd96 	bl	8000174 <__aeabi_fmul>
 8001648:	4601      	mov	r1, r0
	float output = proportional + integral;
 800164a:	4630      	mov	r0, r6
 800164c:	f7ff fb08 	bl	8000c60 <__addsf3>
 8001650:	4604      	mov	r4, r0
	output = (output > 1) ? 1.0f : output;
 8001652:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001656:	f7ff fc77 	bl	8000f48 <__aeabi_fcmpgt>
 800165a:	b108      	cbz	r0, 8001660 <calcRegulatorAction+0x5c>
 800165c:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
	output = (output < -1) ? -1.0f : output;
 8001660:	4909      	ldr	r1, [pc, #36]	@ (8001688 <calcRegulatorAction+0x84>)
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff fc52 	bl	8000f0c <__aeabi_fcmplt>
 8001668:	b950      	cbnz	r0, 8001680 <calcRegulatorAction+0x7c>
}
 800166a:	4620      	mov	r0, r4
 800166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (pid->integral < -errorLimit) {
 800166e:	4907      	ldr	r1, [pc, #28]	@ (800168c <calcRegulatorAction+0x88>)
 8001670:	4628      	mov	r0, r5
 8001672:	f7ff fc4b 	bl	8000f0c <__aeabi_fcmplt>
 8001676:	2800      	cmp	r0, #0
 8001678:	d0e2      	beq.n	8001640 <calcRegulatorAction+0x3c>
		pid->integral = -errorLimit;
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <calcRegulatorAction+0x88>)
 800167c:	60e3      	str	r3, [r4, #12]
 800167e:	e7df      	b.n	8001640 <calcRegulatorAction+0x3c>
	output = (output < -1) ? -1.0f : output;
 8001680:	4c01      	ldr	r4, [pc, #4]	@ (8001688 <calcRegulatorAction+0x84>)
	return output;
 8001682:	e7f2      	b.n	800166a <calcRegulatorAction+0x66>
 8001684:	42700000 	.word	0x42700000
 8001688:	bf800000 	.word	0xbf800000
 800168c:	c2700000 	.word	0xc2700000

08001690 <toggleLED13>:
void toggleLED13(void) {
 8001690:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001692:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001696:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <toggleLED13+0x10>)
 8001698:	f001 fba3 	bl	8002de2 <HAL_GPIO_TogglePin>
}
 800169c:	bd08      	pop	{r3, pc}
 800169e:	bf00      	nop
 80016a0:	40011000 	.word	0x40011000

080016a4 <encoderCallback>:
void encoderCallback(int8_t direction) {
 80016a4:	b508      	push	{r3, lr}
	if (programCountdown == 0) {
 80016a6:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <encoderCallback+0x14>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b103      	cbz	r3, 80016ae <encoderCallback+0xa>
}
 80016ac:	bd08      	pop	{r3, pc}
		moveSibling(direction);
 80016ae:	f000 fc9f 	bl	8001ff0 <moveSibling>
		updateLCD();
 80016b2:	f7ff fea3 	bl	80013fc <updateLCD>
}
 80016b6:	e7f9      	b.n	80016ac <encoderCallback+0x8>
 80016b8:	2000038d 	.word	0x2000038d

080016bc <handleEncoderInterrupt>:
	if (programCountdown == 0) {
 80016bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <handleEncoderInterrupt+0x7c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d138      	bne.n	8001736 <handleEncoderInterrupt+0x7a>
void handleEncoderInterrupt(uint16_t GPIO_Pin) {
 80016c4:	b510      	push	{r4, lr}
 80016c6:	4604      	mov	r4, r0
		if (GPIO_Pin == GPIO_PIN_0) {
 80016c8:	2801      	cmp	r0, #1
 80016ca:	d002      	beq.n	80016d2 <handleEncoderInterrupt+0x16>
		if (GPIO_Pin == GPIO_PIN_1) {
 80016cc:	2c02      	cmp	r4, #2
 80016ce:	d018      	beq.n	8001702 <handleEncoderInterrupt+0x46>
}
 80016d0:	bd10      	pop	{r4, pc}
			B = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80016d2:	2102      	movs	r1, #2
 80016d4:	4819      	ldr	r0, [pc, #100]	@ (800173c <handleEncoderInterrupt+0x80>)
 80016d6:	f001 fb77 	bl	8002dc8 <HAL_GPIO_ReadPin>
 80016da:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <handleEncoderInterrupt+0x84>)
 80016dc:	7018      	strb	r0, [r3, #0]
			if (B != prevB) {
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <handleEncoderInterrupt+0x88>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4298      	cmp	r0, r3
 80016e4:	d0f2      	beq.n	80016cc <handleEncoderInterrupt+0x10>
				if (B == GPIO_PIN_SET) {
 80016e6:	2801      	cmp	r0, #1
 80016e8:	d004      	beq.n	80016f4 <handleEncoderInterrupt+0x38>
				prevB = B;
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <handleEncoderInterrupt+0x84>)
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <handleEncoderInterrupt+0x88>)
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e7eb      	b.n	80016cc <handleEncoderInterrupt+0x10>
					if (A == GPIO_PIN_RESET) {
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <handleEncoderInterrupt+0x8c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f6      	bne.n	80016ea <handleEncoderInterrupt+0x2e>
						encoderCallback(MENU_LEFT);
 80016fc:	f7ff ffd2 	bl	80016a4 <encoderCallback>
 8001700:	e7f3      	b.n	80016ea <handleEncoderInterrupt+0x2e>
			A = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001702:	2101      	movs	r1, #1
 8001704:	480d      	ldr	r0, [pc, #52]	@ (800173c <handleEncoderInterrupt+0x80>)
 8001706:	f001 fb5f 	bl	8002dc8 <HAL_GPIO_ReadPin>
 800170a:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <handleEncoderInterrupt+0x8c>)
 800170c:	7018      	strb	r0, [r3, #0]
			if (A != prevA) {
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <handleEncoderInterrupt+0x90>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4298      	cmp	r0, r3
 8001714:	d0dc      	beq.n	80016d0 <handleEncoderInterrupt+0x14>
				if (A == GPIO_PIN_SET) {
 8001716:	2801      	cmp	r0, #1
 8001718:	d004      	beq.n	8001724 <handleEncoderInterrupt+0x68>
				prevA = A;
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <handleEncoderInterrupt+0x8c>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <handleEncoderInterrupt+0x90>)
 8001720:	701a      	strb	r2, [r3, #0]
}
 8001722:	e7d5      	b.n	80016d0 <handleEncoderInterrupt+0x14>
					if (B == GPIO_PIN_RESET) {
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <handleEncoderInterrupt+0x84>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f6      	bne.n	800171a <handleEncoderInterrupt+0x5e>
						encoderCallback(MENU_RIGHT);
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f7ff ffb8 	bl	80016a4 <encoderCallback>
 8001734:	e7f1      	b.n	800171a <handleEncoderInterrupt+0x5e>
 8001736:	4770      	bx	lr
 8001738:	2000038d 	.word	0x2000038d
 800173c:	40010800 	.word	0x40010800
 8001740:	20000371 	.word	0x20000371
 8001744:	20000001 	.word	0x20000001
 8001748:	20000370 	.word	0x20000370
 800174c:	20000000 	.word	0x20000000

08001750 <handleGetAdc1>:
uint16_t handleGetAdc1(void) {
 8001750:	b510      	push	{r4, lr}
	HAL_ADC_Start(&hadc1);
 8001752:	4c0a      	ldr	r4, [pc, #40]	@ (800177c <handleGetAdc1+0x2c>)
 8001754:	4620      	mov	r0, r4
 8001756:	f001 f873 	bl	8002840 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 800175a:	210a      	movs	r1, #10
 800175c:	4620      	mov	r0, r4
 800175e:	f000 fec5 	bl	80024ec <HAL_ADC_PollForConversion>
 8001762:	b128      	cbz	r0, 8001770 <handleGetAdc1+0x20>
	uint16_t rawAdc = 0;
 8001764:	2400      	movs	r4, #0
	HAL_ADC_Stop(&hadc1);
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <handleGetAdc1+0x2c>)
 8001768:	f001 f98e 	bl	8002a88 <HAL_ADC_Stop>
}
 800176c:	4620      	mov	r0, r4
 800176e:	bd10      	pop	{r4, pc}
		rawAdc = HAL_ADC_GetValue(&hadc1);
 8001770:	4620      	mov	r0, r4
 8001772:	f000 ff7d 	bl	8002670 <HAL_ADC_GetValue>
 8001776:	b284      	uxth	r4, r0
 8001778:	e7f5      	b.n	8001766 <handleGetAdc1+0x16>
 800177a:	bf00      	nop
 800177c:	20000508 	.word	0x20000508

08001780 <updateTemperatureControl>:
void updateTemperatureControl(uint16_t rawAdc) {
 8001780:	b510      	push	{r4, lr}
	temp = calcThermistorTemp(rawAdc);
 8001782:	f7ff fedd 	bl	8001540 <calcThermistorTemp>
 8001786:	4602      	mov	r2, r0
 8001788:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <updateTemperatureControl+0x4c>)
 800178a:	6018      	str	r0, [r3, #0]
	action = calcRegulatorAction(&pid, setTemp, temp);
 800178c:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <updateTemperatureControl+0x50>)
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	4810      	ldr	r0, [pc, #64]	@ (80017d4 <updateTemperatureControl+0x54>)
 8001792:	f7ff ff37 	bl	8001604 <calcRegulatorAction>
 8001796:	4604      	mov	r4, r0
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <updateTemperatureControl+0x58>)
 800179a:	6018      	str	r0, [r3, #0]
	if (action > 0) {
 800179c:	2100      	movs	r1, #0
 800179e:	f7ff fbd3 	bl	8000f48 <__aeabi_fcmpgt>
 80017a2:	b168      	cbz	r0, 80017c0 <updateTemperatureControl+0x40>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (1000 * action) - 1);
 80017a4:	490d      	ldr	r1, [pc, #52]	@ (80017dc <updateTemperatureControl+0x5c>)
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7fe fce4 	bl	8000174 <__aeabi_fmul>
 80017ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017b0:	f7ff fa54 	bl	8000c5c <__aeabi_fsub>
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <updateTemperatureControl+0x60>)
 80017b6:	681c      	ldr	r4, [r3, #0]
 80017b8:	f7ff fbf6 	bl	8000fa8 <__aeabi_f2uiz>
 80017bc:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80017be:	bd10      	pop	{r4, pc}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <updateTemperatureControl+0x60>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80017c8:	e7f9      	b.n	80017be <updateTemperatureControl+0x3e>
 80017ca:	bf00      	nop
 80017cc:	20000018 	.word	0x20000018
 80017d0:	20000004 	.word	0x20000004
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000390 	.word	0x20000390
 80017dc:	447a0000 	.word	0x447a0000
 80017e0:	2000046c 	.word	0x2000046c

080017e4 <handlerTimerInterrupt>:
	if (debounceActive) {
 80017e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <handlerTimerInterrupt+0x70>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b153      	cbz	r3, 8001800 <handlerTimerInterrupt+0x1c>
		debounceCounter++;
 80017ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <handlerTimerInterrupt+0x74>)
 80017ec:	6813      	ldr	r3, [r2, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	6013      	str	r3, [r2, #0]
		if (debounceCounter >= 500) {
 80017f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017f6:	d303      	bcc.n	8001800 <handlerTimerInterrupt+0x1c>
			debounceCounter = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	6013      	str	r3, [r2, #0]
			debounceActive = 0;
 80017fc:	4a15      	ldr	r2, [pc, #84]	@ (8001854 <handlerTimerInterrupt+0x70>)
 80017fe:	7013      	strb	r3, [r2, #0]
	if (programCounter >= 1000) {
 8001800:	4b16      	ldr	r3, [pc, #88]	@ (800185c <handlerTimerInterrupt+0x78>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001808:	d302      	bcc.n	8001810 <handlerTimerInterrupt+0x2c>
		programCounter = 0;
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <handlerTimerInterrupt+0x78>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
	if (programCountdown == 1) {
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <handlerTimerInterrupt+0x7c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d002      	beq.n	800181e <handlerTimerInterrupt+0x3a>
	if (programCountdown == 1 && programCounter == 1000) {
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <handlerTimerInterrupt+0x44>
 800181c:	4770      	bx	lr
		programCounter++;
 800181e:	490f      	ldr	r1, [pc, #60]	@ (800185c <handlerTimerInterrupt+0x78>)
 8001820:	680a      	ldr	r2, [r1, #0]
 8001822:	3201      	adds	r2, #1
 8001824:	600a      	str	r2, [r1, #0]
 8001826:	e7f7      	b.n	8001818 <handlerTimerInterrupt+0x34>
	if (programCountdown == 1 && programCounter == 1000) {
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <handlerTimerInterrupt+0x78>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001830:	d1f4      	bne.n	800181c <handlerTimerInterrupt+0x38>
void handlerTimerInterrupt(TIM_HandleTypeDef *htim) {
 8001832:	b510      	push	{r4, lr}
		setTime--;
 8001834:	4c0b      	ldr	r4, [pc, #44]	@ (8001864 <handlerTimerInterrupt+0x80>)
 8001836:	8823      	ldrh	r3, [r4, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	8023      	strh	r3, [r4, #0]
		toggleLED13();
 800183c:	f7ff ff28 	bl	8001690 <toggleLED13>
		updateTemperatureControl(handleGetAdc1());
 8001840:	f7ff ff86 	bl	8001750 <handleGetAdc1>
 8001844:	f7ff ff9c 	bl	8001780 <updateTemperatureControl>
		if (setTime <= 0) {
 8001848:	8823      	ldrh	r3, [r4, #0]
 800184a:	b103      	cbz	r3, 800184e <handlerTimerInterrupt+0x6a>
}
 800184c:	bd10      	pop	{r4, pc}
			resetMenu();
 800184e:	f7ff fe4d 	bl	80014ec <resetMenu>
}
 8001852:	e7fb      	b.n	800184c <handlerTimerInterrupt+0x68>
 8001854:	20000372 	.word	0x20000372
 8001858:	2000036c 	.word	0x2000036c
 800185c:	20000368 	.word	0x20000368
 8001860:	2000038d 	.word	0x2000038d
 8001864:	20000002 	.word	0x20000002

08001868 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001868:	b508      	push	{r3, lr}
	if (programCountdown == 0) {
 800186a:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x10>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b103      	cbz	r3, 8001872 <HAL_GPIO_EXTI_Callback+0xa>
}
 8001870:	bd08      	pop	{r3, pc}
		handleEncoderInterrupt(GPIO_Pin);
 8001872:	f7ff ff23 	bl	80016bc <handleEncoderInterrupt>
}
 8001876:	e7fb      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0x8>
 8001878:	2000038d 	.word	0x2000038d

0800187c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800187c:	b510      	push	{r4, lr}
	if (htim->Instance == TIM2) {
 800187e:	6803      	ldr	r3, [r0, #0]
 8001880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001884:	d003      	beq.n	800188e <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM3) {
 8001886:	4a1a      	ldr	r2, [pc, #104]	@ (80018f0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d02b      	beq.n	80018e4 <HAL_TIM_IC_CaptureCallback+0x68>
}
 800188c:	bd10      	pop	{r4, pc}
 800188e:	4604      	mov	r4, r0
		if (!debounceActive && programCountdown == 0) {
 8001890:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f9      	bne.n	800188c <HAL_TIM_IC_CaptureCallback+0x10>
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f5      	bne.n	800188c <HAL_TIM_IC_CaptureCallback+0x10>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80018a0:	7f03      	ldrb	r3, [r0, #28]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d009      	beq.n	80018ba <HAL_TIM_IC_CaptureCallback+0x3e>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80018a6:	7f23      	ldrb	r3, [r4, #28]
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d010      	beq.n	80018ce <HAL_TIM_IC_CaptureCallback+0x52>
			debounceActive = 1;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_TIM_IC_CaptureCallback+0x78>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
			tickCounter = 0;
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_TIM_IC_CaptureCallback+0x80>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e7e8      	b.n	800188c <HAL_TIM_IC_CaptureCallback+0x10>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80018ba:	2120      	movs	r1, #32
 80018bc:	4810      	ldr	r0, [pc, #64]	@ (8001900 <HAL_TIM_IC_CaptureCallback+0x84>)
 80018be:	f001 fa90 	bl	8002de2 <HAL_GPIO_TogglePin>
				moveParentChild(MENU_UP);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 fbf6 	bl	80020b4 <moveParentChild>
				updateLCD();
 80018c8:	f7ff fd98 	bl	80013fc <updateLCD>
 80018cc:	e7eb      	b.n	80018a6 <HAL_TIM_IC_CaptureCallback+0x2a>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80018ce:	2120      	movs	r1, #32
 80018d0:	480b      	ldr	r0, [pc, #44]	@ (8001900 <HAL_TIM_IC_CaptureCallback+0x84>)
 80018d2:	f001 fa86 	bl	8002de2 <HAL_GPIO_TogglePin>
				moveParentChild(MENU_DOWN);
 80018d6:	f04f 30ff 	mov.w	r0, #4294967295
 80018da:	f000 fbeb 	bl	80020b4 <moveParentChild>
				updateLCD();
 80018de:	f7ff fd8d 	bl	80013fc <updateLCD>
 80018e2:	e7e3      	b.n	80018ac <HAL_TIM_IC_CaptureCallback+0x30>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80018e4:	2120      	movs	r1, #32
 80018e6:	4806      	ldr	r0, [pc, #24]	@ (8001900 <HAL_TIM_IC_CaptureCallback+0x84>)
 80018e8:	f001 fa7b 	bl	8002de2 <HAL_GPIO_TogglePin>
}
 80018ec:	e7ce      	b.n	800188c <HAL_TIM_IC_CaptureCallback+0x10>
 80018ee:	bf00      	nop
 80018f0:	40000400 	.word	0x40000400
 80018f4:	20000372 	.word	0x20000372
 80018f8:	2000038d 	.word	0x2000038d
 80018fc:	20000374 	.word	0x20000374
 8001900:	40010800 	.word	0x40010800

08001904 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001904:	b508      	push	{r3, lr}
	if (htim->Instance == TIM3) {
 8001906:	6802      	ldr	r2, [r0, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800190a:	429a      	cmp	r2, r3
 800190c:	d000      	beq.n	8001910 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800190e:	bd08      	pop	{r3, pc}
		handlerTimerInterrupt(htim);
 8001910:	f7ff ff68 	bl	80017e4 <handlerTimerInterrupt>
}
 8001914:	e7fb      	b.n	800190e <HAL_TIM_PeriodElapsedCallback+0xa>
 8001916:	bf00      	nop
 8001918:	40000400 	.word	0x40000400

0800191c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800191e:	e7fe      	b.n	800191e <Error_Handler+0x2>

08001920 <MX_TIM2_Init>:
static void MX_TIM2_Init(void) {
 8001920:	b500      	push	{lr}
 8001922:	b087      	sub	sp, #28
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001924:	2300      	movs	r3, #0
 8001926:	9304      	str	r3, [sp, #16]
 8001928:	9305      	str	r3, [sp, #20]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	9303      	str	r3, [sp, #12]
	htim2.Instance = TIM2;
 8001932:	4819      	ldr	r0, [pc, #100]	@ (8001998 <MX_TIM2_Init+0x78>)
 8001934:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001938:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 36 - 1;
 800193a:	2223      	movs	r2, #35	@ 0x23
 800193c:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 100 - 1;
 8001940:	2263      	movs	r2, #99	@ 0x63
 8001942:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001944:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001948:	f002 fc24 	bl	8004194 <HAL_TIM_IC_Init>
 800194c:	b9e0      	cbnz	r0, 8001988 <MX_TIM2_Init+0x68>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	9304      	str	r3, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	9305      	str	r3, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001954:	a904      	add	r1, sp, #16
 8001956:	4810      	ldr	r0, [pc, #64]	@ (8001998 <MX_TIM2_Init+0x78>)
 8001958:	f002 ff1e 	bl	8004798 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	b9b0      	cbnz	r0, 800198c <MX_TIM2_Init+0x6c>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001962:	2201      	movs	r2, #1
 8001964:	9201      	str	r2, [sp, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001966:	9302      	str	r3, [sp, #8]
	sConfigIC.ICFilter = 8;
 8001968:	2208      	movs	r2, #8
 800196a:	9203      	str	r2, [sp, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 800196c:	4669      	mov	r1, sp
 800196e:	480a      	ldr	r0, [pc, #40]	@ (8001998 <MX_TIM2_Init+0x78>)
 8001970:	f002 fd04 	bl	800437c <HAL_TIM_IC_ConfigChannel>
 8001974:	b960      	cbnz	r0, 8001990 <MX_TIM2_Init+0x70>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8001976:	220c      	movs	r2, #12
 8001978:	4669      	mov	r1, sp
 800197a:	4807      	ldr	r0, [pc, #28]	@ (8001998 <MX_TIM2_Init+0x78>)
 800197c:	f002 fcfe 	bl	800437c <HAL_TIM_IC_ConfigChannel>
 8001980:	b940      	cbnz	r0, 8001994 <MX_TIM2_Init+0x74>
}
 8001982:	b007      	add	sp, #28
 8001984:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001988:	f7ff ffc8 	bl	800191c <Error_Handler>
		Error_Handler();
 800198c:	f7ff ffc6 	bl	800191c <Error_Handler>
		Error_Handler();
 8001990:	f7ff ffc4 	bl	800191c <Error_Handler>
		Error_Handler();
 8001994:	f7ff ffc2 	bl	800191c <Error_Handler>
 8001998:	20000424 	.word	0x20000424

0800199c <MX_TIM3_Init>:
static void MX_TIM3_Init(void) {
 800199c:	b500      	push	{lr}
 800199e:	b087      	sub	sp, #28
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019a0:	2300      	movs	r3, #0
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	9303      	str	r3, [sp, #12]
 80019a6:	9304      	str	r3, [sp, #16]
 80019a8:	9305      	str	r3, [sp, #20]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	9301      	str	r3, [sp, #4]
	htim3.Instance = TIM3;
 80019ae:	4813      	ldr	r0, [pc, #76]	@ (80019fc <MX_TIM3_Init+0x60>)
 80019b0:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <MX_TIM3_Init+0x64>)
 80019b2:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 72 - 1;
 80019b4:	2247      	movs	r2, #71	@ 0x47
 80019b6:	6042      	str	r2, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 1000 - 1;
 80019ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019be:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80019c4:	f002 fb8e 	bl	80040e4 <HAL_TIM_Base_Init>
 80019c8:	b990      	cbnz	r0, 80019f0 <MX_TIM3_Init+0x54>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ce:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80019d0:	a902      	add	r1, sp, #8
 80019d2:	480a      	ldr	r0, [pc, #40]	@ (80019fc <MX_TIM3_Init+0x60>)
 80019d4:	f002 fd40 	bl	8004458 <HAL_TIM_ConfigClockSource>
 80019d8:	b960      	cbnz	r0, 80019f4 <MX_TIM3_Init+0x58>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80019e0:	4669      	mov	r1, sp
 80019e2:	4806      	ldr	r0, [pc, #24]	@ (80019fc <MX_TIM3_Init+0x60>)
 80019e4:	f002 fed8 	bl	8004798 <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	b930      	cbnz	r0, 80019f8 <MX_TIM3_Init+0x5c>
}
 80019ea:	b007      	add	sp, #28
 80019ec:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80019f0:	f7ff ff94 	bl	800191c <Error_Handler>
		Error_Handler();
 80019f4:	f7ff ff92 	bl	800191c <Error_Handler>
		Error_Handler();
 80019f8:	f7ff ff90 	bl	800191c <Error_Handler>
 80019fc:	200003dc 	.word	0x200003dc
 8001a00:	40000400 	.word	0x40000400

08001a04 <MX_TIM1_Init>:
static void MX_TIM1_Init(void) {
 8001a04:	b510      	push	{r4, lr}
 8001a06:	b092      	sub	sp, #72	@ 0x48
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a08:	2400      	movs	r4, #0
 8001a0a:	9410      	str	r4, [sp, #64]	@ 0x40
 8001a0c:	9411      	str	r4, [sp, #68]	@ 0x44
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a0e:	9409      	str	r4, [sp, #36]	@ 0x24
 8001a10:	940a      	str	r4, [sp, #40]	@ 0x28
 8001a12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001a14:	940c      	str	r4, [sp, #48]	@ 0x30
 8001a16:	940d      	str	r4, [sp, #52]	@ 0x34
 8001a18:	940e      	str	r4, [sp, #56]	@ 0x38
 8001a1a:	940f      	str	r4, [sp, #60]	@ 0x3c
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	4621      	mov	r1, r4
 8001a20:	a801      	add	r0, sp, #4
 8001a22:	f002 ff3b 	bl	800489c <memset>
	htim1.Instance = TIM1;
 8001a26:	4821      	ldr	r0, [pc, #132]	@ (8001aac <MX_TIM1_Init+0xa8>)
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <MX_TIM1_Init+0xac>)
 8001a2a:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 720 - 1;
 8001a2c:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8001a30:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	6084      	str	r4, [r0, #8]
	htim1.Init.Period = 1000 - 1;
 8001a34:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001a38:	60c3      	str	r3, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	6104      	str	r4, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a3c:	6144      	str	r4, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	6184      	str	r4, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001a40:	f002 fb7c 	bl	800413c <HAL_TIM_PWM_Init>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d129      	bne.n	8001a9c <MX_TIM1_Init+0x98>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9310      	str	r3, [sp, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	9311      	str	r3, [sp, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001a4e:	a910      	add	r1, sp, #64	@ 0x40
 8001a50:	4816      	ldr	r0, [pc, #88]	@ (8001aac <MX_TIM1_Init+0xa8>)
 8001a52:	f002 fea1 	bl	8004798 <HAL_TIMEx_MasterConfigSynchronization>
 8001a56:	bb18      	cbnz	r0, 8001aa0 <MX_TIM1_Init+0x9c>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a58:	2360      	movs	r3, #96	@ 0x60
 8001a5a:	9309      	str	r3, [sp, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	920a      	str	r2, [sp, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a60:	920b      	str	r2, [sp, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a62:	920c      	str	r2, [sp, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a64:	920d      	str	r2, [sp, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a66:	920e      	str	r2, [sp, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a68:	920f      	str	r2, [sp, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001a6a:	a909      	add	r1, sp, #36	@ 0x24
 8001a6c:	480f      	ldr	r0, [pc, #60]	@ (8001aac <MX_TIM1_Init+0xa8>)
 8001a6e:	f002 fbeb 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	b9b8      	cbnz	r0, 8001aa4 <MX_TIM1_Init+0xa0>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a78:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a7a:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001a7c:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a7e:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a84:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a86:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001a88:	a901      	add	r1, sp, #4
 8001a8a:	4808      	ldr	r0, [pc, #32]	@ (8001aac <MX_TIM1_Init+0xa8>)
 8001a8c:	f002 feba 	bl	8004804 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a90:	b950      	cbnz	r0, 8001aa8 <MX_TIM1_Init+0xa4>
	HAL_TIM_MspPostInit(&htim1);
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <MX_TIM1_Init+0xa8>)
 8001a94:	f000 fc32 	bl	80022fc <HAL_TIM_MspPostInit>
}
 8001a98:	b012      	add	sp, #72	@ 0x48
 8001a9a:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001a9c:	f7ff ff3e 	bl	800191c <Error_Handler>
		Error_Handler();
 8001aa0:	f7ff ff3c 	bl	800191c <Error_Handler>
		Error_Handler();
 8001aa4:	f7ff ff3a 	bl	800191c <Error_Handler>
		Error_Handler();
 8001aa8:	f7ff ff38 	bl	800191c <Error_Handler>
 8001aac:	2000046c 	.word	0x2000046c
 8001ab0:	40012c00 	.word	0x40012c00

08001ab4 <MX_I2C1_Init>:
static void MX_I2C1_Init(void) {
 8001ab4:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <MX_I2C1_Init+0x2c>)
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <MX_I2C1_Init+0x30>)
 8001aba:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <MX_I2C1_Init+0x34>)
 8001abe:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001ac4:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aca:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001acc:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001ace:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad0:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001ad4:	f001 fb2e 	bl	8003134 <HAL_I2C_Init>
 8001ad8:	b900      	cbnz	r0, 8001adc <MX_I2C1_Init+0x28>
}
 8001ada:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001adc:	f7ff ff1e 	bl	800191c <Error_Handler>
 8001ae0:	200004b4 	.word	0x200004b4
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	000186a0 	.word	0x000186a0

08001aec <MX_TIM4_Init>:
static void MX_TIM4_Init(void) {
 8001aec:	b500      	push	{lr}
 8001aee:	b087      	sub	sp, #28
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001af0:	2300      	movs	r3, #0
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	9303      	str	r3, [sp, #12]
 8001af6:	9304      	str	r3, [sp, #16]
 8001af8:	9305      	str	r3, [sp, #20]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	9301      	str	r3, [sp, #4]
	htim4.Instance = TIM4;
 8001afe:	4813      	ldr	r0, [pc, #76]	@ (8001b4c <MX_TIM4_Init+0x60>)
 8001b00:	4a13      	ldr	r2, [pc, #76]	@ (8001b50 <MX_TIM4_Init+0x64>)
 8001b02:	6002      	str	r2, [r0, #0]
	htim4.Init.Prescaler = 72 - 1;
 8001b04:	2247      	movs	r2, #71	@ 0x47
 8001b06:	6042      	str	r2, [r0, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	6083      	str	r3, [r0, #8]
	htim4.Init.Period = 65535;
 8001b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0e:	60c2      	str	r2, [r0, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	6103      	str	r3, [r0, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001b14:	f002 fae6 	bl	80040e4 <HAL_TIM_Base_Init>
 8001b18:	b990      	cbnz	r0, 8001b40 <MX_TIM4_Init+0x54>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1e:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001b20:	a902      	add	r1, sp, #8
 8001b22:	480a      	ldr	r0, [pc, #40]	@ (8001b4c <MX_TIM4_Init+0x60>)
 8001b24:	f002 fc98 	bl	8004458 <HAL_TIM_ConfigClockSource>
 8001b28:	b960      	cbnz	r0, 8001b44 <MX_TIM4_Init+0x58>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001b30:	4669      	mov	r1, sp
 8001b32:	4806      	ldr	r0, [pc, #24]	@ (8001b4c <MX_TIM4_Init+0x60>)
 8001b34:	f002 fe30 	bl	8004798 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	b930      	cbnz	r0, 8001b48 <MX_TIM4_Init+0x5c>
}
 8001b3a:	b007      	add	sp, #28
 8001b3c:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001b40:	f7ff feec 	bl	800191c <Error_Handler>
		Error_Handler();
 8001b44:	f7ff feea 	bl	800191c <Error_Handler>
		Error_Handler();
 8001b48:	f7ff fee8 	bl	800191c <Error_Handler>
 8001b4c:	20000394 	.word	0x20000394
 8001b50:	40000800 	.word	0x40000800

08001b54 <MX_ADC1_Init>:
static void MX_ADC1_Init(void) {
 8001b54:	b500      	push	{lr}
 8001b56:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	9303      	str	r3, [sp, #12]
	hadc1.Instance = ADC1;
 8001b60:	4810      	ldr	r0, [pc, #64]	@ (8001ba4 <MX_ADC1_Init+0x50>)
 8001b62:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <MX_ADC1_Init+0x54>)
 8001b64:	6002      	str	r2, [r0, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b66:	6083      	str	r3, [r0, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001b68:	7303      	strb	r3, [r0, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b6a:	7503      	strb	r3, [r0, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b6c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b70:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b72:	6043      	str	r3, [r0, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	6103      	str	r3, [r0, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b78:	f000 ff02 	bl	8002980 <HAL_ADC_Init>
 8001b7c:	b968      	cbnz	r0, 8001b9a <MX_ADC1_Init+0x46>
	sConfig.Channel = ADC_CHANNEL_6;
 8001b7e:	2306      	movs	r3, #6
 8001b80:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b86:	2300      	movs	r3, #0
 8001b88:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b8a:	a901      	add	r1, sp, #4
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_ADC1_Init+0x50>)
 8001b8e:	f000 fd73 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001b92:	b920      	cbnz	r0, 8001b9e <MX_ADC1_Init+0x4a>
}
 8001b94:	b005      	add	sp, #20
 8001b96:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001b9a:	f7ff febf 	bl	800191c <Error_Handler>
		Error_Handler();
 8001b9e:	f7ff febd 	bl	800191c <Error_Handler>
 8001ba2:	bf00      	nop
 8001ba4:	20000508 	.word	0x20000508
 8001ba8:	40012400 	.word	0x40012400

08001bac <SystemClock_Config>:
void SystemClock_Config(void) {
 8001bac:	b500      	push	{lr}
 8001bae:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bb0:	2228      	movs	r2, #40	@ 0x28
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	eb0d 0002 	add.w	r0, sp, r2
 8001bb8:	f002 fe70 	bl	800489c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9305      	str	r3, [sp, #20]
 8001bc0:	9306      	str	r3, [sp, #24]
 8001bc2:	9307      	str	r3, [sp, #28]
 8001bc4:	9308      	str	r3, [sp, #32]
 8001bc6:	9309      	str	r3, [sp, #36]	@ 0x24
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	920a      	str	r2, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bda:	920e      	str	r2, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bdc:	2202      	movs	r2, #2
 8001bde:	9211      	str	r2, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be0:	9312      	str	r3, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001be2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001be6:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001be8:	a80a      	add	r0, sp, #40	@ 0x28
 8001bea:	f001 fc53 	bl	8003494 <HAL_RCC_OscConfig>
 8001bee:	b9c8      	cbnz	r0, 8001c24 <SystemClock_Config+0x78>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	9106      	str	r1, [sp, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c00:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c02:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001c04:	a805      	add	r0, sp, #20
 8001c06:	f001 fe77 	bl	80038f8 <HAL_RCC_ClockConfig>
 8001c0a:	b968      	cbnz	r0, 8001c28 <SystemClock_Config+0x7c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	9301      	str	r3, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c14:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001c16:	a801      	add	r0, sp, #4
 8001c18:	f001 ff4a 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	b930      	cbnz	r0, 8001c2c <SystemClock_Config+0x80>
}
 8001c1e:	b015      	add	sp, #84	@ 0x54
 8001c20:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001c24:	f7ff fe7a 	bl	800191c <Error_Handler>
		Error_Handler();
 8001c28:	f7ff fe78 	bl	800191c <Error_Handler>
		Error_Handler();
 8001c2c:	f7ff fe76 	bl	800191c <Error_Handler>

08001c30 <main>:
int main(void) {
 8001c30:	b510      	push	{r4, lr}
	HAL_Init();
 8001c32:	f000 fc23 	bl	800247c <HAL_Init>
	SystemClock_Config();
 8001c36:	f7ff ffb9 	bl	8001bac <SystemClock_Config>
	MX_GPIO_Init();
 8001c3a:	f7ff fb41 	bl	80012c0 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001c3e:	f7ff fe6f 	bl	8001920 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001c42:	f7ff feab 	bl	800199c <MX_TIM3_Init>
	MX_TIM1_Init();
 8001c46:	f7ff fedd 	bl	8001a04 <MX_TIM1_Init>
	MX_I2C1_Init();
 8001c4a:	f7ff ff33 	bl	8001ab4 <MX_I2C1_Init>
	MX_TIM4_Init();
 8001c4e:	f7ff ff4d 	bl	8001aec <MX_TIM4_Init>
	MX_ADC1_Init();
 8001c52:	f7ff ff7f 	bl	8001b54 <MX_ADC1_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c56:	2100      	movs	r1, #0
 8001c58:	486f      	ldr	r0, [pc, #444]	@ (8001e18 <main+0x1e8>)
 8001c5a:	f002 fc8b 	bl	8004574 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001c5e:	4c6f      	ldr	r4, [pc, #444]	@ (8001e1c <main+0x1ec>)
 8001c60:	2108      	movs	r1, #8
 8001c62:	4620      	mov	r0, r4
 8001c64:	f002 fcf4 	bl	8004650 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001c68:	210c      	movs	r1, #12
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f002 fcf0 	bl	8004650 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001c70:	486b      	ldr	r0, [pc, #428]	@ (8001e20 <main+0x1f0>)
 8001c72:	f002 f90f 	bl	8003e94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001c76:	486b      	ldr	r0, [pc, #428]	@ (8001e24 <main+0x1f4>)
 8001c78:	f002 f90c 	bl	8003e94 <HAL_TIM_Base_Start_IT>
	initMenu();
 8001c7c:	f000 f8f6 	bl	8001e6c <initMenu>
	I2C_LCD_Init(0);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fa55 	bl	8001130 <I2C_LCD_Init>
	I2C_LCD_Clear(0);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fa2e 	bl	80010e8 <I2C_LCD_Clear>
	I2C_LCD_SetCursor(0, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4610      	mov	r0, r2
 8001c92:	f7ff fac9 	bl	8001228 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(0, getCurrentMenuItem()->name);
 8001c96:	f000 fa2b 	bl	80020f0 <getCurrentMenuItem>
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff faeb 	bl	8001278 <I2C_LCD_WriteString>
 8001ca2:	e02b      	b.n	8001cfc <main+0xcc>
			sprintf(buffer, "%ld", counter / 4);
 8001ca4:	4c60      	ldr	r4, [pc, #384]	@ (8001e28 <main+0x1f8>)
 8001ca6:	0892      	lsrs	r2, r2, #2
 8001ca8:	4960      	ldr	r1, [pc, #384]	@ (8001e2c <main+0x1fc>)
 8001caa:	4620      	mov	r0, r4
 8001cac:	f002 fdd6 	bl	800485c <siprintf>
			I2C_LCD_SetCursor(0, 15, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f7ff fab7 	bl	8001228 <I2C_LCD_SetCursor>
			I2C_LCD_WriteString(0, buffer);
 8001cba:	4621      	mov	r1, r4
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff fadb 	bl	8001278 <I2C_LCD_WriteString>
 8001cc2:	e027      	b.n	8001d14 <main+0xe4>
					sprintf(buffer, "A:-.%d", abs(action_int % 10));
 8001cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8001e30 <main+0x200>)
 8001cc6:	fb83 2300 	smull	r2, r3, r3, r0
 8001cca:	17c2      	asrs	r2, r0, #31
 8001ccc:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8001cd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cd4:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	bfb8      	it	lt
 8001cdc:	4252      	neglt	r2, r2
 8001cde:	4955      	ldr	r1, [pc, #340]	@ (8001e34 <main+0x204>)
 8001ce0:	4851      	ldr	r0, [pc, #324]	@ (8001e28 <main+0x1f8>)
 8001ce2:	f002 fdbb 	bl	800485c <siprintf>
				I2C_LCD_WriteString(0, buffer);
 8001ce6:	4950      	ldr	r1, [pc, #320]	@ (8001e28 <main+0x1f8>)
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff fac5 	bl	8001278 <I2C_LCD_WriteString>
		counter++;
 8001cee:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <main+0x208>)
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	6013      	str	r3, [r2, #0]
		HAL_Delay(200);
 8001cf6:	20c8      	movs	r0, #200	@ 0xc8
 8001cf8:	f000 fbe4 	bl	80024c4 <HAL_Delay>
		if (counter > 40) {
 8001cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <main+0x208>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b28      	cmp	r3, #40	@ 0x28
 8001d02:	d902      	bls.n	8001d0a <main+0xda>
			counter = 0;
 8001d04:	4b4c      	ldr	r3, [pc, #304]	@ (8001e38 <main+0x208>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
		if (counter % 4 == 0) {
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e38 <main+0x208>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	f012 0f03 	tst.w	r2, #3
 8001d12:	d0c7      	beq.n	8001ca4 <main+0x74>
		if (counter % 5 == 0) {
 8001d14:	4b48      	ldr	r3, [pc, #288]	@ (8001e38 <main+0x208>)
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	4b48      	ldr	r3, [pc, #288]	@ (8001e3c <main+0x20c>)
 8001d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8001d26:	4299      	cmp	r1, r3
 8001d28:	d1e1      	bne.n	8001cee <main+0xbe>
			I2C_LCD_SetCursor(0, 11, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	210b      	movs	r1, #11
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f7ff fa7a 	bl	8001228 <I2C_LCD_SetCursor>
			int tempset_int = (int) (setTemp);
 8001d34:	4b42      	ldr	r3, [pc, #264]	@ (8001e40 <main+0x210>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f7ff f910 	bl	8000f5c <__aeabi_f2iz>
 8001d3c:	4602      	mov	r2, r0
			sprintf(buffer, "T%d", tempset_int);
 8001d3e:	4c3a      	ldr	r4, [pc, #232]	@ (8001e28 <main+0x1f8>)
 8001d40:	4940      	ldr	r1, [pc, #256]	@ (8001e44 <main+0x214>)
 8001d42:	4620      	mov	r0, r4
 8001d44:	f002 fd8a 	bl	800485c <siprintf>
			I2C_LCD_WriteString(0, buffer);
 8001d48:	4621      	mov	r1, r4
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fa94 	bl	8001278 <I2C_LCD_WriteString>
			if (programCountdown == 1) {
 8001d50:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <main+0x218>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d1ca      	bne.n	8001cee <main+0xbe>
				I2C_LCD_SetCursor(0, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7ff fa63 	bl	8001228 <I2C_LCD_SetCursor>
				sprintf(buffer, "Count:%d:%02d", setTime / 60, setTime % 60);
 8001d62:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <main+0x21c>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	4a3a      	ldr	r2, [pc, #232]	@ (8001e50 <main+0x220>)
 8001d68:	fba2 1203 	umull	r1, r2, r2, r3
 8001d6c:	0952      	lsrs	r2, r2, #5
 8001d6e:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8001d72:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4936      	ldr	r1, [pc, #216]	@ (8001e54 <main+0x224>)
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f002 fd6e 	bl	800485c <siprintf>
				I2C_LCD_SetCursor(0, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	4611      	mov	r1, r2
 8001d84:	4610      	mov	r0, r2
 8001d86:	f7ff fa4f 	bl	8001228 <I2C_LCD_SetCursor>
				I2C_LCD_WriteString(0, buffer);
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fa73 	bl	8001278 <I2C_LCD_WriteString>
				I2C_LCD_SetCursor(0, 0, 1);
 8001d92:	2201      	movs	r2, #1
 8001d94:	2100      	movs	r1, #0
 8001d96:	4608      	mov	r0, r1
 8001d98:	f7ff fa46 	bl	8001228 <I2C_LCD_SetCursor>
				int temp_int = (int) (temp * 10);
 8001d9c:	492e      	ldr	r1, [pc, #184]	@ (8001e58 <main+0x228>)
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <main+0x22c>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	f7fe f9e7 	bl	8000174 <__aeabi_fmul>
 8001da6:	f7ff f8d9 	bl	8000f5c <__aeabi_f2iz>
				sprintf(buffer, "T:%d.%dC", temp_int / 10, abs(temp_int % 10));
 8001daa:	4a21      	ldr	r2, [pc, #132]	@ (8001e30 <main+0x200>)
 8001dac:	fb82 3200 	smull	r3, r2, r2, r0
 8001db0:	17c3      	asrs	r3, r0, #31
 8001db2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dbc:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bfb8      	it	lt
 8001dc4:	425b      	neglt	r3, r3
 8001dc6:	4926      	ldr	r1, [pc, #152]	@ (8001e60 <main+0x230>)
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f002 fd47 	bl	800485c <siprintf>
				I2C_LCD_WriteString(0, buffer);
 8001dce:	4621      	mov	r1, r4
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff fa51 	bl	8001278 <I2C_LCD_WriteString>
				I2C_LCD_SetCursor(0, 9, 1);
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	2109      	movs	r1, #9
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fa24 	bl	8001228 <I2C_LCD_SetCursor>
				int action_int = (int) (action * 10);
 8001de0:	491d      	ldr	r1, [pc, #116]	@ (8001e58 <main+0x228>)
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <main+0x234>)
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	f7fe f9c5 	bl	8000174 <__aeabi_fmul>
 8001dea:	f7ff f8b7 	bl	8000f5c <__aeabi_f2iz>
				if (action_int > 0) {
 8001dee:	2800      	cmp	r0, #0
 8001df0:	f77f af68 	ble.w	8001cc4 <main+0x94>
					sprintf(buffer, "A:.%d", abs(action_int % 10));
 8001df4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <main+0x200>)
 8001df6:	fb83 2300 	smull	r2, r3, r3, r0
 8001dfa:	17c2      	asrs	r2, r0, #31
 8001dfc:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8001e00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e04:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	bfb8      	it	lt
 8001e0c:	4252      	neglt	r2, r2
 8001e0e:	4916      	ldr	r1, [pc, #88]	@ (8001e68 <main+0x238>)
 8001e10:	4620      	mov	r0, r4
 8001e12:	f002 fd23 	bl	800485c <siprintf>
 8001e16:	e766      	b.n	8001ce6 <main+0xb6>
 8001e18:	2000046c 	.word	0x2000046c
 8001e1c:	20000424 	.word	0x20000424
 8001e20:	200003dc 	.word	0x200003dc
 8001e24:	20000394 	.word	0x20000394
 8001e28:	2000037c 	.word	0x2000037c
 8001e2c:	08005608 	.word	0x08005608
 8001e30:	66666667 	.word	0x66666667
 8001e34:	08005634 	.word	0x08005634
 8001e38:	20000378 	.word	0x20000378
 8001e3c:	cccccccd 	.word	0xcccccccd
 8001e40:	20000004 	.word	0x20000004
 8001e44:	0800560c 	.word	0x0800560c
 8001e48:	2000038d 	.word	0x2000038d
 8001e4c:	20000002 	.word	0x20000002
 8001e50:	88888889 	.word	0x88888889
 8001e54:	08005610 	.word	0x08005610
 8001e58:	41200000 	.word	0x41200000
 8001e5c:	20000018 	.word	0x20000018
 8001e60:	08005620 	.word	0x08005620
 8001e64:	20000390 	.word	0x20000390
 8001e68:	0800562c 	.word	0x0800562c

08001e6c <initMenu>:

uint16_t timeValue = 60;
uint16_t tempValue = 25;

// Initialize the menu structure
void initMenu(void) {
 8001e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static MenuItem wash = { "Wash", &root, NULL, 0 };
	static MenuItem dry = { "Dry", &root, NULL, 0 };
	static MenuItem cure = { "Cure", &root, NULL, 0 };

	static MenuItem *mainMenu[3]; // array of pointers
	mainMenu[0] = &wash;
 8001e70:	483e      	ldr	r0, [pc, #248]	@ (8001f6c <initMenu+0x100>)
 8001e72:	493f      	ldr	r1, [pc, #252]	@ (8001f70 <initMenu+0x104>)
 8001e74:	6001      	str	r1, [r0, #0]
	mainMenu[1] = &dry;
 8001e76:	4a3f      	ldr	r2, [pc, #252]	@ (8001f74 <initMenu+0x108>)
 8001e78:	6042      	str	r2, [r0, #4]
	mainMenu[2] = &cure;
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f78 <initMenu+0x10c>)
 8001e7c:	6083      	str	r3, [r0, #8]

	root.children = mainMenu;
 8001e7e:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8001f7c <initMenu+0x110>
 8001e82:	f8c8 0014 	str.w	r0, [r8, #20]
	root.numChildren = 3;
 8001e86:	f04f 0903 	mov.w	r9, #3
 8001e8a:	f888 9018 	strb.w	r9, [r8, #24]
	// Level 1 - Wash
	static MenuItem washStart = { "Start", &wash, NULL, 0 };
	static MenuItem washTime = { "Time", &wash, NULL, 0 };

	static MenuItem *washChildren[2];
	washChildren[0] = &washStart;
 8001e8e:	483c      	ldr	r0, [pc, #240]	@ (8001f80 <initMenu+0x114>)
 8001e90:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8001f84 <initMenu+0x118>
 8001e94:	f8c0 c000 	str.w	ip, [r0]
	washChildren[1] = &washTime;
 8001e98:	4f3b      	ldr	r7, [pc, #236]	@ (8001f88 <initMenu+0x11c>)
 8001e9a:	6047      	str	r7, [r0, #4]

	// Assign wash's children and set their parent pointers
	wash.children = washChildren;
 8001e9c:	6148      	str	r0, [r1, #20]
	wash.numChildren = 2;
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	7608      	strb	r0, [r1, #24]
	washChildren[0]->parent = &wash;
 8001ea2:	f8cc 1010 	str.w	r1, [ip, #16]
	washChildren[1]->parent = &wash;
 8001ea6:	6139      	str	r1, [r7, #16]
	static MenuItem dryStart = { "Start", &dry, NULL, 0 };
	static MenuItem dryTemp = { "Temperature", &dry, NULL, 0 };
	static MenuItem dryTime = { "Time", &dry, NULL, 0 };

	static MenuItem *dryChildren[3];
	dryChildren[0] = &dryStart;
 8001ea8:	4938      	ldr	r1, [pc, #224]	@ (8001f8c <initMenu+0x120>)
 8001eaa:	4e39      	ldr	r6, [pc, #228]	@ (8001f90 <initMenu+0x124>)
 8001eac:	600e      	str	r6, [r1, #0]
	dryChildren[1] = &dryTemp;
 8001eae:	4d39      	ldr	r5, [pc, #228]	@ (8001f94 <initMenu+0x128>)
 8001eb0:	604d      	str	r5, [r1, #4]
	dryChildren[2] = &dryTime;
 8001eb2:	4c39      	ldr	r4, [pc, #228]	@ (8001f98 <initMenu+0x12c>)
 8001eb4:	608c      	str	r4, [r1, #8]

	// Assign dry's children and set their parent pointers
	dry.children = dryChildren;
 8001eb6:	6151      	str	r1, [r2, #20]
	dry.numChildren = 3;
 8001eb8:	f882 9018 	strb.w	r9, [r2, #24]
	dryChildren[0]->parent = &dry;
 8001ebc:	6132      	str	r2, [r6, #16]
	dryChildren[1]->parent = &dry;
 8001ebe:	612a      	str	r2, [r5, #16]
	dryChildren[2]->parent = &dry;
 8001ec0:	6122      	str	r2, [r4, #16]
	static MenuItem cureStart = { "Start", &cure, NULL, 0 };
	static MenuItem cureTemp = { "Temperature", &cure, NULL, 0 };
	static MenuItem cureTime = { "Time", &cure, NULL, 0 };

	static MenuItem *cureChildren[3];
	cureChildren[0] = &cureStart;
 8001ec2:	f8df e0d8 	ldr.w	lr, [pc, #216]	@ 8001f9c <initMenu+0x130>
 8001ec6:	4836      	ldr	r0, [pc, #216]	@ (8001fa0 <initMenu+0x134>)
 8001ec8:	f8ce 0000 	str.w	r0, [lr]
	cureChildren[1] = &cureTemp;
 8001ecc:	4935      	ldr	r1, [pc, #212]	@ (8001fa4 <initMenu+0x138>)
 8001ece:	f8ce 1004 	str.w	r1, [lr, #4]
	cureChildren[2] = &cureTime;
 8001ed2:	4a35      	ldr	r2, [pc, #212]	@ (8001fa8 <initMenu+0x13c>)
 8001ed4:	f8ce 2008 	str.w	r2, [lr, #8]

	// Assign cure's children and set their parent pointers
	cure.children = cureChildren;
 8001ed8:	f8c3 e014 	str.w	lr, [r3, #20]
	cure.numChildren = 3;
 8001edc:	f883 9018 	strb.w	r9, [r3, #24]
	cureChildren[0]->parent = &cure;
 8001ee0:	6103      	str	r3, [r0, #16]
	cureChildren[1]->parent = &cure;
 8001ee2:	610b      	str	r3, [r1, #16]
	cureChildren[2]->parent = &cure;
 8001ee4:	6113      	str	r3, [r2, #16]

	// Level 2 - WashStart
	static MenuItem washStartValue = { "Start: ", &washStart, NULL, 0, "start",
			30 };
	static MenuItem *washStartValueChildren[1];
	washStartValueChildren[0] = &washStartValue;
 8001ee6:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <initMenu+0x140>)
 8001ee8:	f8df e0c4 	ldr.w	lr, [pc, #196]	@ 8001fb0 <initMenu+0x144>
 8001eec:	f8c3 e000 	str.w	lr, [r3]

	// Assign washStart's children and set their parent pointers
	washStart.children = washStartValueChildren;
 8001ef0:	f8cc 3014 	str.w	r3, [ip, #20]
	washStart.numChildren = 1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f88c 3018 	strb.w	r3, [ip, #24]
	washStartValue.parent = &washStart;
 8001efa:	f8ce c010 	str.w	ip, [lr, #16]

	// Level 2 - Wash Time
	static MenuItem washTimeValue = { "Time: ", &washTime, NULL, 0, "time",
			defaultTimeValue };
	static MenuItem *washTimeValueChildren[1];
	washTimeValueChildren[0] = &washTimeValue;
 8001efe:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8001fb4 <initMenu+0x148>
 8001f02:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 8001fb8 <initMenu+0x14c>
 8001f06:	f8ce c000 	str.w	ip, [lr]

	// Assign washTime's children and set their parent pointers
	washTime.children = washTimeValueChildren;
 8001f0a:	f8c7 e014 	str.w	lr, [r7, #20]
	washTime.numChildren = 1;
 8001f0e:	763b      	strb	r3, [r7, #24]
	washTimeValue.parent = &washTime;
 8001f10:	f8cc 7010 	str.w	r7, [ip, #16]

	// Level 2 - Dry Start
	static MenuItem dryStartValue =
			{ "Start: ", &dryStart, NULL, 0, "start", 30 };
	static MenuItem *dryStartValueChildren[1];
	dryStartValueChildren[0] = &dryStartValue;
 8001f14:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8001fbc <initMenu+0x150>
 8001f18:	4f29      	ldr	r7, [pc, #164]	@ (8001fc0 <initMenu+0x154>)
 8001f1a:	f8cc 7000 	str.w	r7, [ip]

	// Assign dryStart's children and set their parent pointers
	dryStart.children = dryStartValueChildren;
 8001f1e:	f8c6 c014 	str.w	ip, [r6, #20]
	dryStart.numChildren = 1;
 8001f22:	7633      	strb	r3, [r6, #24]
	dryStartValue.parent = &dryStart;
 8001f24:	613e      	str	r6, [r7, #16]

	// Level 2 - Dry Temp
	static MenuItem dryTempValue = { "Temp: ", &dryTemp, NULL, 0, "temp",
			defaultTempValue };
	static MenuItem *dryTempValueChildren[1];
	dryTempValueChildren[0] = &dryTempValue;
 8001f26:	4f27      	ldr	r7, [pc, #156]	@ (8001fc4 <initMenu+0x158>)
 8001f28:	4e27      	ldr	r6, [pc, #156]	@ (8001fc8 <initMenu+0x15c>)
 8001f2a:	603e      	str	r6, [r7, #0]

	// Assign dryTemp's children and set their parent pointers
	dryTemp.children = dryTempValueChildren;
 8001f2c:	616f      	str	r7, [r5, #20]
	dryTemp.numChildren = 1;
 8001f2e:	762b      	strb	r3, [r5, #24]
	dryTempValue.parent = &dryTemp;
 8001f30:	6135      	str	r5, [r6, #16]

	// Level 2 - Dry Time
	static MenuItem dryTimeValue = { "Time: ", &dryTime, NULL, 0, "time",
			defaultTimeValue };
	static MenuItem *dryTimeValueChildren[1];
	dryTimeValueChildren[0] = &dryTimeValue;
 8001f32:	4e26      	ldr	r6, [pc, #152]	@ (8001fcc <initMenu+0x160>)
 8001f34:	4d26      	ldr	r5, [pc, #152]	@ (8001fd0 <initMenu+0x164>)
 8001f36:	6035      	str	r5, [r6, #0]

	// Assign dryTime's children and set their parent pointers
	dryTime.children = dryTimeValueChildren;
 8001f38:	6166      	str	r6, [r4, #20]
	dryTime.numChildren = 1;
 8001f3a:	7623      	strb	r3, [r4, #24]
	dryTimeValue.parent = &dryTime;
 8001f3c:	612c      	str	r4, [r5, #16]

	// Level 2 - Cure Start
	static MenuItem cureStartValue = { "Start: ", &cureStart, NULL, 0, "start",
			30 };
	static MenuItem *cureStartValueChildren[1];
	cureStartValueChildren[0] = &cureStartValue;
 8001f3e:	4d25      	ldr	r5, [pc, #148]	@ (8001fd4 <initMenu+0x168>)
 8001f40:	4c25      	ldr	r4, [pc, #148]	@ (8001fd8 <initMenu+0x16c>)
 8001f42:	602c      	str	r4, [r5, #0]

	// Assign cureStart's children and set their parent pointers
	cureStart.children = cureStartValueChildren;
 8001f44:	6145      	str	r5, [r0, #20]
	cureStart.numChildren = 1;
 8001f46:	7603      	strb	r3, [r0, #24]
	cureStartValue.parent = &cureStart;
 8001f48:	6120      	str	r0, [r4, #16]

	// Level 2 - Cure Temp
	static MenuItem cureTempValue = { "Temp: ", &cureTemp, NULL, 0, "temp",
			defaultTempValue };
	static MenuItem *cureTempValueChildren[1];
	cureTempValueChildren[0] = &cureTempValue;
 8001f4a:	4c24      	ldr	r4, [pc, #144]	@ (8001fdc <initMenu+0x170>)
 8001f4c:	4824      	ldr	r0, [pc, #144]	@ (8001fe0 <initMenu+0x174>)
 8001f4e:	6020      	str	r0, [r4, #0]

	// Assign cureTemp's children and set their parent pointers
	cureTemp.children = cureTempValueChildren;
 8001f50:	614c      	str	r4, [r1, #20]
	cureTemp.numChildren = 1;
 8001f52:	760b      	strb	r3, [r1, #24]
	cureTempValue.parent = &cureTemp;
 8001f54:	6101      	str	r1, [r0, #16]

	// Level 2 - Cure Time
	static MenuItem cureTimeValue = { "Time: ", &cureTime, NULL, 0, "time",
			defaultTimeValue };
	static MenuItem *cureTimeValueChildren[1];
	cureTimeValueChildren[0] = &cureTimeValue;
 8001f56:	4823      	ldr	r0, [pc, #140]	@ (8001fe4 <initMenu+0x178>)
 8001f58:	4923      	ldr	r1, [pc, #140]	@ (8001fe8 <initMenu+0x17c>)
 8001f5a:	6001      	str	r1, [r0, #0]

	// Assign cureTime's children and set their parent pointers
	cureTime.children = cureTimeValueChildren;
 8001f5c:	6150      	str	r0, [r2, #20]
	cureTime.numChildren = 1;
 8001f5e:	7613      	strb	r3, [r2, #24]
	cureTimeValue.parent = &cureTime;
 8001f60:	610a      	str	r2, [r1, #16]

	// Set initial menu item to root
	currentMenuItem = &root;
 8001f62:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <initMenu+0x180>)
 8001f64:	f8c3 8000 	str.w	r8, [r3]
}
 8001f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f6c:	20000578 	.word	0x20000578
 8001f70:	200002c8 	.word	0x200002c8
 8001f74:	200002a4 	.word	0x200002a4
 8001f78:	20000280 	.word	0x20000280
 8001f7c:	2000025c 	.word	0x2000025c
 8001f80:	20000570 	.word	0x20000570
 8001f84:	20000238 	.word	0x20000238
 8001f88:	20000214 	.word	0x20000214
 8001f8c:	20000564 	.word	0x20000564
 8001f90:	200001f0 	.word	0x200001f0
 8001f94:	200001cc 	.word	0x200001cc
 8001f98:	200001a8 	.word	0x200001a8
 8001f9c:	20000558 	.word	0x20000558
 8001fa0:	20000184 	.word	0x20000184
 8001fa4:	20000160 	.word	0x20000160
 8001fa8:	2000013c 	.word	0x2000013c
 8001fac:	20000554 	.word	0x20000554
 8001fb0:	20000118 	.word	0x20000118
 8001fb4:	20000550 	.word	0x20000550
 8001fb8:	200000f4 	.word	0x200000f4
 8001fbc:	2000054c 	.word	0x2000054c
 8001fc0:	200000d0 	.word	0x200000d0
 8001fc4:	20000548 	.word	0x20000548
 8001fc8:	200000ac 	.word	0x200000ac
 8001fcc:	20000544 	.word	0x20000544
 8001fd0:	20000088 	.word	0x20000088
 8001fd4:	20000540 	.word	0x20000540
 8001fd8:	20000064 	.word	0x20000064
 8001fdc:	2000053c 	.word	0x2000053c
 8001fe0:	20000040 	.word	0x20000040
 8001fe4:	20000538 	.word	0x20000538
 8001fe8:	2000001c 	.word	0x2000001c
 8001fec:	20000584 	.word	0x20000584

08001ff0 <moveSibling>:

// Move through the menu
void moveSibling(int direction) {
 8001ff0:	b570      	push	{r4, r5, r6, lr}

    const uint16_t stepTime = 15;
    const uint16_t maxTime = 600;
    const uint16_t minTime = 15;

    if (currentMenuItem->parent) {
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <moveSibling+0xb8>)
 8001ff4:	681d      	ldr	r5, [r3, #0]
 8001ff6:	692a      	ldr	r2, [r5, #16]
 8001ff8:	b372      	cbz	r2, 8002058 <moveSibling+0x68>
 8001ffa:	4606      	mov	r6, r0
        MenuItem *parent = currentMenuItem->parent;

        for (uint8_t i = 0; i < parent->numChildren; i++) {
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	7e11      	ldrb	r1, [r2, #24]
 8002000:	4299      	cmp	r1, r3
 8002002:	d929      	bls.n	8002058 <moveSibling+0x68>
            if (parent->children[i] == currentMenuItem) {
 8002004:	6954      	ldr	r4, [r2, #20]
 8002006:	4618      	mov	r0, r3
 8002008:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 800200c:	4565      	cmp	r5, ip
 800200e:	d002      	beq.n	8002016 <moveSibling+0x26>
        for (uint8_t i = 0; i < parent->numChildren; i++) {
 8002010:	3301      	adds	r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	e7f3      	b.n	8001ffe <moveSibling+0xe>
                // move between children
                if (direction > 0 && i + 1 < parent->numChildren) {
 8002016:	2e00      	cmp	r6, #0
 8002018:	dd07      	ble.n	800202a <moveSibling+0x3a>
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	428a      	cmp	r2, r1
 800201e:	da04      	bge.n	800202a <moveSibling+0x3a>
                    currentMenuItem = parent->children[i + 1];
 8002020:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002024:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <moveSibling+0xb8>)
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e001      	b.n	800202e <moveSibling+0x3e>
                } else if (direction < 0 && i > 0) {
 800202a:	2e00      	cmp	r6, #0
 800202c:	db15      	blt.n	800205a <moveSibling+0x6a>
                    currentMenuItem = parent->children[i - 1];
                }

                // take action if exist
                if (currentMenuItem->action[0] != '\0') {
 800202e:	4b1e      	ldr	r3, [pc, #120]	@ (80020a8 <moveSibling+0xb8>)
 8002030:	681c      	ldr	r4, [r3, #0]
 8002032:	7e63      	ldrb	r3, [r4, #25]
 8002034:	b183      	cbz	r3, 8002058 <moveSibling+0x68>
                    if (strcmp(currentMenuItem->action, "time") == 0) {
 8002036:	f104 0519 	add.w	r5, r4, #25
 800203a:	491c      	ldr	r1, [pc, #112]	@ (80020ac <moveSibling+0xbc>)
 800203c:	4628      	mov	r0, r5
 800203e:	f7fe f887 	bl	8000150 <strcmp>
 8002042:	b9d8      	cbnz	r0, 800207c <moveSibling+0x8c>
                        if (direction > 0) {
 8002044:	2e00      	cmp	r6, #0
 8002046:	dd12      	ble.n	800206e <moveSibling+0x7e>
                            currentMenuItem->value = (currentMenuItem->value + stepTime > maxTime) ? maxTime : currentMenuItem->value + stepTime;
 8002048:	8c23      	ldrh	r3, [r4, #32]
 800204a:	f240 2249 	movw	r2, #585	@ 0x249
 800204e:	4293      	cmp	r3, r2
 8002050:	bf28      	it	cs
 8002052:	4613      	movcs	r3, r2
 8002054:	330f      	adds	r3, #15
 8002056:	8423      	strh	r3, [r4, #32]
                }
                break;
            }
        }
    }
}
 8002058:	bd70      	pop	{r4, r5, r6, pc}
                } else if (direction < 0 && i > 0) {
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0e7      	beq.n	800202e <moveSibling+0x3e>
                    currentMenuItem = parent->children[i - 1];
 800205e:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8002062:	3801      	subs	r0, #1
 8002064:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8002068:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <moveSibling+0xb8>)
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e7df      	b.n	800202e <moveSibling+0x3e>
                            currentMenuItem->value = (currentMenuItem->value - stepTime < minTime) ? minTime : currentMenuItem->value - stepTime;
 800206e:	8c23      	ldrh	r3, [r4, #32]
 8002070:	2b1e      	cmp	r3, #30
 8002072:	bf38      	it	cc
 8002074:	231e      	movcc	r3, #30
 8002076:	3b0f      	subs	r3, #15
 8002078:	8423      	strh	r3, [r4, #32]
 800207a:	e7ed      	b.n	8002058 <moveSibling+0x68>
                    } else if (strcmp(currentMenuItem->action, "temp") == 0) {
 800207c:	490c      	ldr	r1, [pc, #48]	@ (80020b0 <moveSibling+0xc0>)
 800207e:	4628      	mov	r0, r5
 8002080:	f7fe f866 	bl	8000150 <strcmp>
 8002084:	2800      	cmp	r0, #0
 8002086:	d1e7      	bne.n	8002058 <moveSibling+0x68>
                        if (direction > 0) {
 8002088:	2e00      	cmp	r6, #0
 800208a:	dd06      	ble.n	800209a <moveSibling+0xaa>
                            currentMenuItem->value = (currentMenuItem->value + stepTemp > maxTemp) ? maxTemp : currentMenuItem->value + stepTemp;
 800208c:	8c23      	ldrh	r3, [r4, #32]
 800208e:	2b4b      	cmp	r3, #75	@ 0x4b
 8002090:	bf28      	it	cs
 8002092:	234b      	movcs	r3, #75	@ 0x4b
 8002094:	3305      	adds	r3, #5
 8002096:	8423      	strh	r3, [r4, #32]
 8002098:	e7de      	b.n	8002058 <moveSibling+0x68>
                            currentMenuItem->value = (currentMenuItem->value - stepTemp < minTemp) ? minTemp : currentMenuItem->value - stepTemp;
 800209a:	8c23      	ldrh	r3, [r4, #32]
 800209c:	2b14      	cmp	r3, #20
 800209e:	bf38      	it	cc
 80020a0:	2314      	movcc	r3, #20
 80020a2:	3b05      	subs	r3, #5
 80020a4:	8423      	strh	r3, [r4, #32]
 80020a6:	e7d7      	b.n	8002058 <moveSibling+0x68>
 80020a8:	20000584 	.word	0x20000584
 80020ac:	080055c8 	.word	0x080055c8
 80020b0:	080055d8 	.word	0x080055d8

080020b4 <moveParentChild>:


void moveParentChild(int direction) {
	if (direction > 0) {
 80020b4:	2800      	cmp	r0, #0
 80020b6:	dd0e      	ble.n	80020d6 <moveParentChild+0x22>
		if (currentMenuItem->children && currentMenuItem->numChildren > 0) {
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <moveParentChild+0x38>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	b12a      	cbz	r2, 80020cc <moveParentChild+0x18>
 80020c0:	7e19      	ldrb	r1, [r3, #24]
 80020c2:	b119      	cbz	r1, 80020cc <moveParentChild+0x18>
			currentMenuItem = currentMenuItem->children[0];
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <moveParentChild+0x38>)
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	4770      	bx	lr
		} else if (currentMenuItem->parent) {
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	b123      	cbz	r3, 80020da <moveParentChild+0x26>
			currentMenuItem = currentMenuItem->parent;
 80020d0:	4a06      	ldr	r2, [pc, #24]	@ (80020ec <moveParentChild+0x38>)
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4770      	bx	lr
		}
	}

	else if (direction < 0) {
 80020d6:	2800      	cmp	r0, #0
 80020d8:	db00      	blt.n	80020dc <moveParentChild+0x28>
		if (currentMenuItem->parent) {
			currentMenuItem = currentMenuItem->parent;
		}
	}
}
 80020da:	4770      	bx	lr
		if (currentMenuItem->parent) {
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <moveParentChild+0x38>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f9      	beq.n	80020da <moveParentChild+0x26>
			currentMenuItem = currentMenuItem->parent;
 80020e6:	4a01      	ldr	r2, [pc, #4]	@ (80020ec <moveParentChild+0x38>)
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	e7f6      	b.n	80020da <moveParentChild+0x26>
 80020ec:	20000584 	.word	0x20000584

080020f0 <getCurrentMenuItem>:

// Get the current menu item
MenuItem* getCurrentMenuItem(void) {
	return currentMenuItem;
}
 80020f0:	4b01      	ldr	r3, [pc, #4]	@ (80020f8 <getCurrentMenuItem+0x8>)
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000584 	.word	0x20000584

080020fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <HAL_MspInit+0x3c>)
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	619a      	str	r2, [r3, #24]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	f002 0201 	and.w	r2, r2, #1
 800210e:	9200      	str	r2, [sp, #0]
 8002110:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002118:	61da      	str	r2, [r3, #28]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002124:	4a05      	ldr	r2, [pc, #20]	@ (800213c <HAL_MspInit+0x40>)
 8002126:	6853      	ldr	r3, [r2, #4]
 8002128:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800212c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002130:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002132:	b002      	add	sp, #8
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000

08002140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002140:	b500      	push	{lr}
 8002142:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	2300      	movs	r3, #0
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	9303      	str	r3, [sp, #12]
 800214a:	9304      	str	r3, [sp, #16]
 800214c:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 800214e:	6802      	ldr	r2, [r0, #0]
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_ADC_MspInit+0x58>)
 8002152:	429a      	cmp	r2, r3
 8002154:	d002      	beq.n	800215c <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002156:	b007      	add	sp, #28
 8002158:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800215c:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002166:	619a      	str	r2, [r3, #24]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800216e:	9200      	str	r2, [sp, #0]
 8002170:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	f042 0204 	orr.w	r2, r2, #4
 8002178:	619a      	str	r2, [r3, #24]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = AI_thermistor_Pin;
 8002184:	2340      	movs	r3, #64	@ 0x40
 8002186:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002188:	2303      	movs	r3, #3
 800218a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(AI_thermistor_GPIO_Port, &GPIO_InitStruct);
 800218c:	a902      	add	r1, sp, #8
 800218e:	4803      	ldr	r0, [pc, #12]	@ (800219c <HAL_ADC_MspInit+0x5c>)
 8002190:	f000 fd0c 	bl	8002bac <HAL_GPIO_Init>
}
 8002194:	e7df      	b.n	8002156 <HAL_ADC_MspInit+0x16>
 8002196:	bf00      	nop
 8002198:	40012400 	.word	0x40012400
 800219c:	40010800 	.word	0x40010800

080021a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a0:	b510      	push	{r4, lr}
 80021a2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	2300      	movs	r3, #0
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	9303      	str	r3, [sp, #12]
 80021aa:	9304      	str	r3, [sp, #16]
 80021ac:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 80021ae:	6802      	ldr	r2, [r0, #0]
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_I2C_MspInit+0x58>)
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_MspInit+0x1a>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80021b6:	b006      	add	sp, #24
 80021b8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4c10      	ldr	r4, [pc, #64]	@ (80021fc <HAL_I2C_MspInit+0x5c>)
 80021bc:	69a3      	ldr	r3, [r4, #24]
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	61a3      	str	r3, [r4, #24]
 80021c4:	69a3      	ldr	r3, [r4, #24]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ce:	23c0      	movs	r3, #192	@ 0xc0
 80021d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d2:	2312      	movs	r3, #18
 80021d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	a902      	add	r1, sp, #8
 80021dc:	4808      	ldr	r0, [pc, #32]	@ (8002200 <HAL_I2C_MspInit+0x60>)
 80021de:	f000 fce5 	bl	8002bac <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e2:	69e3      	ldr	r3, [r4, #28]
 80021e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021e8:	61e3      	str	r3, [r4, #28]
 80021ea:	69e3      	ldr	r3, [r4, #28]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9b01      	ldr	r3, [sp, #4]
}
 80021f4:	e7df      	b.n	80021b6 <HAL_I2C_MspInit+0x16>
 80021f6:	bf00      	nop
 80021f8:	40005400 	.word	0x40005400
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010c00 	.word	0x40010c00

08002204 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8002204:	6802      	ldr	r2, [r0, #0]
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_TIM_PWM_MspInit+0x28>)
 8002208:	429a      	cmp	r2, r3
 800220a:	d000      	beq.n	800220e <HAL_TIM_PWM_MspInit+0xa>
 800220c:	4770      	bx	lr
{
 800220e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002210:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800221a:	619a      	str	r2, [r3, #24]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002226:	b002      	add	sp, #8
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40012c00 	.word	0x40012c00

08002230 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002230:	b500      	push	{lr}
 8002232:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	2300      	movs	r3, #0
 8002236:	9302      	str	r3, [sp, #8]
 8002238:	9303      	str	r3, [sp, #12]
 800223a:	9304      	str	r3, [sp, #16]
 800223c:	9305      	str	r3, [sp, #20]
  if(htim_ic->Instance==TIM2)
 800223e:	6803      	ldr	r3, [r0, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002244:	d002      	beq.n	800224c <HAL_TIM_IC_MspInit+0x1c>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002246:	b007      	add	sp, #28
 8002248:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800224c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	61da      	str	r2, [r3, #28]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	f002 0201 	and.w	r2, r2, #1
 800225e:	9200      	str	r2, [sp, #0]
 8002260:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	f042 0204 	orr.w	r2, r2, #4
 8002268:	619a      	str	r2, [r3, #24]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002274:	230c      	movs	r3, #12
 8002276:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002278:	2301      	movs	r3, #1
 800227a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	a902      	add	r1, sp, #8
 800227e:	4806      	ldr	r0, [pc, #24]	@ (8002298 <HAL_TIM_IC_MspInit+0x68>)
 8002280:	f000 fc94 	bl	8002bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	4611      	mov	r1, r2
 8002288:	201c      	movs	r0, #28
 800228a:	f000 fc5d 	bl	8002b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800228e:	201c      	movs	r0, #28
 8002290:	f000 fc6a 	bl	8002b68 <HAL_NVIC_EnableIRQ>
}
 8002294:	e7d7      	b.n	8002246 <HAL_TIM_IC_MspInit+0x16>
 8002296:	bf00      	nop
 8002298:	40010800 	.word	0x40010800

0800229c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800229c:	b500      	push	{lr}
 800229e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 80022a0:	6803      	ldr	r3, [r0, #0]
 80022a2:	4a13      	ldr	r2, [pc, #76]	@ (80022f0 <HAL_TIM_Base_MspInit+0x54>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d005      	beq.n	80022b4 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80022a8:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <HAL_TIM_Base_MspInit+0x58>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d015      	beq.n	80022da <HAL_TIM_Base_MspInit+0x3e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022ae:	b003      	add	sp, #12
 80022b0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022b4:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_TIM_Base_MspInit+0x5c>)
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	f042 0202 	orr.w	r2, r2, #2
 80022bc:	61da      	str	r2, [r3, #28]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	4611      	mov	r1, r2
 80022cc:	201d      	movs	r0, #29
 80022ce:	f000 fc3b 	bl	8002b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022d2:	201d      	movs	r0, #29
 80022d4:	f000 fc48 	bl	8002b68 <HAL_NVIC_EnableIRQ>
 80022d8:	e7e9      	b.n	80022ae <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022da:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <HAL_TIM_Base_MspInit+0x5c>)
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	f042 0204 	orr.w	r2, r2, #4
 80022e2:	61da      	str	r2, [r3, #28]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	9b01      	ldr	r3, [sp, #4]
}
 80022ee:	e7de      	b.n	80022ae <HAL_TIM_Base_MspInit+0x12>
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022fc:	b500      	push	{lr}
 80022fe:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	2300      	movs	r3, #0
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	9303      	str	r3, [sp, #12]
 8002306:	9304      	str	r3, [sp, #16]
 8002308:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 800230a:	6802      	ldr	r2, [r0, #0]
 800230c:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <HAL_TIM_MspPostInit+0x48>)
 800230e:	429a      	cmp	r2, r3
 8002310:	d002      	beq.n	8002318 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002312:	b007      	add	sp, #28
 8002314:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	f042 0204 	orr.w	r2, r2, #4
 8002322:	619a      	str	r2, [r3, #24]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800232e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002332:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	a902      	add	r1, sp, #8
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <HAL_TIM_MspPostInit+0x4c>)
 800233e:	f000 fc35 	bl	8002bac <HAL_GPIO_Init>
}
 8002342:	e7e6      	b.n	8002312 <HAL_TIM_MspPostInit+0x16>
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40010800 	.word	0x40010800

0800234c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800234c:	e7fe      	b.n	800234c <NMI_Handler>

0800234e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler>

08002350 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <MemManage_Handler>

08002352 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler>

08002354 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <UsageFault_Handler>

08002356 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	4770      	bx	lr

08002358 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	4770      	bx	lr

0800235a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235e:	f000 f89f 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002362:	bd08      	pop	{r3, pc}

08002364 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002364:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002366:	2001      	movs	r0, #1
 8002368:	f000 fd44 	bl	8002df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800236c:	bd08      	pop	{r3, pc}

0800236e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800236e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002370:	2002      	movs	r0, #2
 8002372:	f000 fd3f 	bl	8002df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002376:	bd08      	pop	{r3, pc}

08002378 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002378:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800237a:	4802      	ldr	r0, [pc, #8]	@ (8002384 <TIM2_IRQHandler+0xc>)
 800237c:	f001 fdc1 	bl	8003f02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002380:	bd08      	pop	{r3, pc}
 8002382:	bf00      	nop
 8002384:	20000424 	.word	0x20000424

08002388 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002388:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800238a:	4802      	ldr	r0, [pc, #8]	@ (8002394 <TIM3_IRQHandler+0xc>)
 800238c:	f001 fdb9 	bl	8003f02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002390:	bd08      	pop	{r3, pc}
 8002392:	bf00      	nop
 8002394:	200003dc 	.word	0x200003dc

08002398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002398:	b510      	push	{r4, lr}
 800239a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800239c:	4a0c      	ldr	r2, [pc, #48]	@ (80023d0 <_sbrk+0x38>)
 800239e:	490d      	ldr	r1, [pc, #52]	@ (80023d4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <_sbrk+0x40>)
 80023a2:	6800      	ldr	r0, [r0, #0]
 80023a4:	b140      	cbz	r0, 80023b8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <_sbrk+0x40>)
 80023a8:	6800      	ldr	r0, [r0, #0]
 80023aa:	4403      	add	r3, r0
 80023ac:	1a52      	subs	r2, r2, r1
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d806      	bhi.n	80023c0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80023b2:	4a09      	ldr	r2, [pc, #36]	@ (80023d8 <_sbrk+0x40>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80023b6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80023b8:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <_sbrk+0x40>)
 80023ba:	4c08      	ldr	r4, [pc, #32]	@ (80023dc <_sbrk+0x44>)
 80023bc:	6004      	str	r4, [r0, #0]
 80023be:	e7f2      	b.n	80023a6 <_sbrk+0xe>
    errno = ENOMEM;
 80023c0:	f002 fa74 	bl	80048ac <__errno>
 80023c4:	230c      	movs	r3, #12
 80023c6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	e7f3      	b.n	80023b6 <_sbrk+0x1e>
 80023ce:	bf00      	nop
 80023d0:	20005000 	.word	0x20005000
 80023d4:	00000400 	.word	0x00000400
 80023d8:	20000588 	.word	0x20000588
 80023dc:	200006d8 	.word	0x200006d8

080023e0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	4770      	bx	lr
	...

080023e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023e4:	f7ff fffc 	bl	80023e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e8:	480b      	ldr	r0, [pc, #44]	@ (8002418 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023ea:	490c      	ldr	r1, [pc, #48]	@ (800241c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002420 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a09      	ldr	r2, [pc, #36]	@ (8002424 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002400:	4c09      	ldr	r4, [pc, #36]	@ (8002428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800240e:	f002 fa53 	bl	80048b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002412:	f7ff fc0d 	bl	8001c30 <main>
  bx lr
 8002416:	4770      	bx	lr
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8002420:	080056c0 	.word	0x080056c0
  ldr r2, =_sbss
 8002424:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8002428:	200006d8 	.word	0x200006d8

0800242c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC1_2_IRQHandler>
	...

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b510      	push	{r4, lr}
 8002432:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <HAL_InitTick+0x40>)
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002440:	4a0c      	ldr	r2, [pc, #48]	@ (8002474 <HAL_InitTick+0x44>)
 8002442:	6810      	ldr	r0, [r2, #0]
 8002444:	fbb0 f0f3 	udiv	r0, r0, r3
 8002448:	f000 fb9c 	bl	8002b84 <HAL_SYSTICK_Config>
 800244c:	b968      	cbnz	r0, 800246a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244e:	2c0f      	cmp	r4, #15
 8002450:	d901      	bls.n	8002456 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002452:	2001      	movs	r0, #1
 8002454:	e00a      	b.n	800246c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002456:	2200      	movs	r2, #0
 8002458:	4621      	mov	r1, r4
 800245a:	f04f 30ff 	mov.w	r0, #4294967295
 800245e:	f000 fb73 	bl	8002b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_InitTick+0x48>)
 8002464:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2000      	movs	r0, #0
 8002468:	e000      	b.n	800246c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800246a:	2001      	movs	r0, #1
}
 800246c:	bd10      	pop	{r4, pc}
 800246e:	bf00      	nop
 8002470:	200002f0 	.word	0x200002f0
 8002474:	200002ec 	.word	0x200002ec
 8002478:	200002f4 	.word	0x200002f4

0800247c <HAL_Init>:
{
 800247c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247e:	4a07      	ldr	r2, [pc, #28]	@ (800249c <HAL_Init+0x20>)
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 fb4b 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	200f      	movs	r0, #15
 8002490:	f7ff ffce 	bl	8002430 <HAL_InitTick>
  HAL_MspInit();
 8002494:	f7ff fe32 	bl	80020fc <HAL_MspInit>
}
 8002498:	2000      	movs	r0, #0
 800249a:	bd08      	pop	{r3, pc}
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024a0:	4a03      	ldr	r2, [pc, #12]	@ (80024b0 <HAL_IncTick+0x10>)
 80024a2:	6811      	ldr	r1, [r2, #0]
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_IncTick+0x14>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	440b      	add	r3, r1
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	2000058c 	.word	0x2000058c
 80024b4:	200002f0 	.word	0x200002f0

080024b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024b8:	4b01      	ldr	r3, [pc, #4]	@ (80024c0 <HAL_GetTick+0x8>)
 80024ba:	6818      	ldr	r0, [r3, #0]
}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	2000058c 	.word	0x2000058c

080024c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fff6 	bl	80024b8 <HAL_GetTick>
 80024cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80024d2:	d002      	beq.n	80024da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <HAL_Delay+0x24>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024da:	f7ff ffed 	bl	80024b8 <HAL_GetTick>
 80024de:	1b40      	subs	r0, r0, r5
 80024e0:	42a0      	cmp	r0, r4
 80024e2:	d3fa      	bcc.n	80024da <HAL_Delay+0x16>
  {
  }
}
 80024e4:	bd38      	pop	{r3, r4, r5, pc}
 80024e6:	bf00      	nop
 80024e8:	200002f0 	.word	0x200002f0

080024ec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	b083      	sub	sp, #12
 80024f0:	4605      	mov	r5, r0
 80024f2:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002504:	d123      	bne.n	800254e <HAL_ADC_PollForConversion+0x62>
 8002506:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800250e:	d103      	bne.n	8002518 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002512:	f413 0f70 	tst.w	r3, #15728640	@ 0xf00000
 8002516:	d029      	beq.n	800256c <HAL_ADC_PollForConversion+0x80>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002518:	4b50      	ldr	r3, [pc, #320]	@ (800265c <HAL_ADC_PollForConversion+0x170>)
 800251a:	681e      	ldr	r6, [r3, #0]
 800251c:	2002      	movs	r0, #2
 800251e:	f001 fb53 	bl	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002522:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002526:	682b      	ldr	r3, [r5, #0]
 8002528:	6919      	ldr	r1, [r3, #16]
 800252a:	4a4d      	ldr	r2, [pc, #308]	@ (8002660 <HAL_ADC_PollForConversion+0x174>)
 800252c:	4211      	tst	r1, r2
 800252e:	d136      	bne.n	800259e <HAL_ADC_PollForConversion+0xb2>
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	f102 425c 	add.w	r2, r2, #3690987520	@ 0xdc000000
 8002536:	4211      	tst	r1, r2
 8002538:	d131      	bne.n	800259e <HAL_ADC_PollForConversion+0xb2>
 800253a:	6919      	ldr	r1, [r3, #16]
 800253c:	4a49      	ldr	r2, [pc, #292]	@ (8002664 <HAL_ADC_PollForConversion+0x178>)
 800253e:	4211      	tst	r1, r2
 8002540:	d140      	bne.n	80025c4 <HAL_ADC_PollForConversion+0xd8>
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4b48      	ldr	r3, [pc, #288]	@ (8002668 <HAL_ADC_PollForConversion+0x17c>)
 8002546:	421a      	tst	r2, r3
 8002548:	d03e      	beq.n	80025c8 <HAL_ADC_PollForConversion+0xdc>
 800254a:	2329      	movs	r3, #41	@ 0x29
 800254c:	e041      	b.n	80025d2 <HAL_ADC_PollForConversion+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002550:	f043 0320 	orr.w	r3, r3, #32
 8002554:	62ab      	str	r3, [r5, #40]	@ 0x28
    __HAL_UNLOCK(hadc);
 8002556:	2300      	movs	r3, #0
 8002558:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
    return HAL_ERROR;
 800255c:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800255e:	b003      	add	sp, #12
 8002560:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002562:	682b      	ldr	r3, [r5, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f013 0f02 	tst.w	r3, #2
 800256a:	d00f      	beq.n	800258c <HAL_ADC_PollForConversion+0xa0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f013 0f02 	tst.w	r3, #2
 8002574:	d14f      	bne.n	8002616 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 8002576:	f1b4 3fff 	cmp.w	r4, #4294967295
 800257a:	d0f7      	beq.n	800256c <HAL_ADC_PollForConversion+0x80>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800257c:	2c00      	cmp	r4, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_ADC_PollForConversion+0x76>
 8002580:	f7ff ff9a 	bl	80024b8 <HAL_GetTick>
 8002584:	1bc3      	subs	r3, r0, r7
 8002586:	42a3      	cmp	r3, r4
 8002588:	d9f0      	bls.n	800256c <HAL_ADC_PollForConversion+0x80>
 800258a:	e7ea      	b.n	8002562 <HAL_ADC_PollForConversion+0x76>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800258c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	62ab      	str	r3, [r5, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 8002594:	2300      	movs	r3, #0
 8002596:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
            return HAL_TIMEOUT;
 800259a:	2003      	movs	r0, #3
 800259c:	e7df      	b.n	800255e <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800259e:	6919      	ldr	r1, [r3, #16]
 80025a0:	4a30      	ldr	r2, [pc, #192]	@ (8002664 <HAL_ADC_PollForConversion+0x178>)
 80025a2:	4211      	tst	r1, r2
 80025a4:	d104      	bne.n	80025b0 <HAL_ADC_PollForConversion+0xc4>
 80025a6:	68d9      	ldr	r1, [r3, #12]
 80025a8:	f102 426e 	add.w	r2, r2, #3992977408	@ 0xee000000
 80025ac:	4211      	tst	r1, r2
 80025ae:	d00d      	beq.n	80025cc <HAL_ADC_PollForConversion+0xe0>
 80025b0:	6919      	ldr	r1, [r3, #16]
 80025b2:	4a2e      	ldr	r2, [pc, #184]	@ (800266c <HAL_ADC_PollForConversion+0x180>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	b95a      	cbnz	r2, 80025d0 <HAL_ADC_PollForConversion+0xe4>
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b2c      	ldr	r3, [pc, #176]	@ (800266c <HAL_ADC_PollForConversion+0x180>)
 80025bc:	4013      	ands	r3, r2
 80025be:	b15b      	cbz	r3, 80025d8 <HAL_ADC_PollForConversion+0xec>
 80025c0:	23fc      	movs	r3, #252	@ 0xfc
 80025c2:	e006      	b.n	80025d2 <HAL_ADC_PollForConversion+0xe6>
 80025c4:	2329      	movs	r3, #41	@ 0x29
 80025c6:	e004      	b.n	80025d2 <HAL_ADC_PollForConversion+0xe6>
 80025c8:	2314      	movs	r3, #20
 80025ca:	e002      	b.n	80025d2 <HAL_ADC_PollForConversion+0xe6>
 80025cc:	2354      	movs	r3, #84	@ 0x54
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_PollForConversion+0xe6>
 80025d0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80025d2:	fb03 f606 	mul.w	r6, r3, r6
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025d6:	e007      	b.n	80025e8 <HAL_ADC_PollForConversion+0xfc>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025d8:	2354      	movs	r3, #84	@ 0x54
 80025da:	e7fa      	b.n	80025d2 <HAL_ADC_PollForConversion+0xe6>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025dc:	9b01      	ldr	r3, [sp, #4]
 80025de:	42b3      	cmp	r3, r6
 80025e0:	d310      	bcc.n	8002604 <HAL_ADC_PollForConversion+0x118>
      Conversion_Timeout_CPU_cycles ++;
 80025e2:	9b01      	ldr	r3, [sp, #4]
 80025e4:	3301      	adds	r3, #1
 80025e6:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025e8:	9b01      	ldr	r3, [sp, #4]
 80025ea:	42b3      	cmp	r3, r6
 80025ec:	d213      	bcs.n	8002616 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 80025ee:	f1b4 3fff 	cmp.w	r4, #4294967295
 80025f2:	d0f6      	beq.n	80025e2 <HAL_ADC_PollForConversion+0xf6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025f4:	2c00      	cmp	r4, #0
 80025f6:	d0f1      	beq.n	80025dc <HAL_ADC_PollForConversion+0xf0>
 80025f8:	f7ff ff5e 	bl	80024b8 <HAL_GetTick>
 80025fc:	1bc0      	subs	r0, r0, r7
 80025fe:	42a0      	cmp	r0, r4
 8002600:	d9ef      	bls.n	80025e2 <HAL_ADC_PollForConversion+0xf6>
 8002602:	e7eb      	b.n	80025dc <HAL_ADC_PollForConversion+0xf0>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002604:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	62ab      	str	r3, [r5, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 800260c:	2300      	movs	r3, #0
 800260e:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
            return HAL_TIMEOUT;
 8002612:	2003      	movs	r0, #3
 8002614:	e7a3      	b.n	800255e <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002616:	682b      	ldr	r3, [r5, #0]
 8002618:	f06f 0212 	mvn.w	r2, #18
 800261c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800261e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002624:	62ab      	str	r3, [r5, #40]	@ 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002626:	682b      	ldr	r3, [r5, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800262e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002632:	d001      	beq.n	8002638 <HAL_ADC_PollForConversion+0x14c>
  return HAL_OK;
 8002634:	2000      	movs	r0, #0
 8002636:	e792      	b.n	800255e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002638:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800263a:	b960      	cbnz	r0, 8002656 <HAL_ADC_PollForConversion+0x16a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800263c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800263e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002642:	62ab      	str	r3, [r5, #40]	@ 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002644:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002646:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800264a:	d188      	bne.n	800255e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800264c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002654:	e783      	b.n	800255e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8002656:	2000      	movs	r0, #0
 8002658:	e781      	b.n	800255e <HAL_ADC_PollForConversion+0x72>
 800265a:	bf00      	nop
 800265c:	200002ec 	.word	0x200002ec
 8002660:	24924924 	.word	0x24924924
 8002664:	12492492 	.word	0x12492492
 8002668:	00492492 	.word	0x00492492
 800266c:	00249249 	.word	0x00249249

08002670 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002670:	6803      	ldr	r3, [r0, #0]
 8002672:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8002674:	4770      	bx	lr
	...

08002678 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002678:	b430      	push	{r4, r5}
 800267a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800267c:	2200      	movs	r2, #0
 800267e:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002684:	2a01      	cmp	r2, #1
 8002686:	f000 808f 	beq.w	80027a8 <HAL_ADC_ConfigChannel+0x130>
 800268a:	4603      	mov	r3, r0
 800268c:	2201      	movs	r2, #1
 800268e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002692:	684a      	ldr	r2, [r1, #4]
 8002694:	2a06      	cmp	r2, #6
 8002696:	d82d      	bhi.n	80026f4 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002698:	6804      	ldr	r4, [r0, #0]
 800269a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800269c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80026a0:	3a05      	subs	r2, #5
 80026a2:	f04f 0c1f 	mov.w	ip, #31
 80026a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80026aa:	ea20 000c 	bic.w	r0, r0, ip
 80026ae:	680d      	ldr	r5, [r1, #0]
 80026b0:	fa05 f202 	lsl.w	r2, r5, r2
 80026b4:	4302      	orrs	r2, r0
 80026b6:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026b8:	680a      	ldr	r2, [r1, #0]
 80026ba:	2a09      	cmp	r2, #9
 80026bc:	d938      	bls.n	8002730 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026be:	681c      	ldr	r4, [r3, #0]
 80026c0:	68e0      	ldr	r0, [r4, #12]
 80026c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026c6:	3a1e      	subs	r2, #30
 80026c8:	f04f 0c07 	mov.w	ip, #7
 80026cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80026d0:	ea20 000c 	bic.w	r0, r0, ip
 80026d4:	688d      	ldr	r5, [r1, #8]
 80026d6:	fa05 f202 	lsl.w	r2, r5, r2
 80026da:	4302      	orrs	r2, r0
 80026dc:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026de:	680a      	ldr	r2, [r1, #0]
 80026e0:	3a10      	subs	r2, #16
 80026e2:	2a01      	cmp	r2, #1
 80026e4:	d934      	bls.n	8002750 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e6:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80026ee:	b002      	add	sp, #8
 80026f0:	bc30      	pop	{r4, r5}
 80026f2:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80026f4:	2a0c      	cmp	r2, #12
 80026f6:	d80d      	bhi.n	8002714 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026f8:	6805      	ldr	r5, [r0, #0]
 80026fa:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80026fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002700:	3a23      	subs	r2, #35	@ 0x23
 8002702:	241f      	movs	r4, #31
 8002704:	4094      	lsls	r4, r2
 8002706:	ea20 0004 	bic.w	r0, r0, r4
 800270a:	680c      	ldr	r4, [r1, #0]
 800270c:	4094      	lsls	r4, r2
 800270e:	4320      	orrs	r0, r4
 8002710:	6328      	str	r0, [r5, #48]	@ 0x30
 8002712:	e7d1      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002714:	6805      	ldr	r5, [r0, #0]
 8002716:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002718:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800271c:	3a41      	subs	r2, #65	@ 0x41
 800271e:	241f      	movs	r4, #31
 8002720:	4094      	lsls	r4, r2
 8002722:	ea20 0004 	bic.w	r0, r0, r4
 8002726:	680c      	ldr	r4, [r1, #0]
 8002728:	4094      	lsls	r4, r2
 800272a:	4320      	orrs	r0, r4
 800272c:	62e8      	str	r0, [r5, #44]	@ 0x2c
 800272e:	e7c3      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002730:	681c      	ldr	r4, [r3, #0]
 8002732:	6920      	ldr	r0, [r4, #16]
 8002734:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002738:	f04f 0c07 	mov.w	ip, #7
 800273c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002740:	ea20 000c 	bic.w	r0, r0, ip
 8002744:	688d      	ldr	r5, [r1, #8]
 8002746:	fa05 f202 	lsl.w	r2, r5, r2
 800274a:	4302      	orrs	r2, r0
 800274c:	6122      	str	r2, [r4, #16]
 800274e:	e7c6      	b.n	80026de <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4816      	ldr	r0, [pc, #88]	@ (80027ac <HAL_ADC_ConfigChannel+0x134>)
 8002754:	4282      	cmp	r2, r0
 8002756:	d005      	beq.n	8002764 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800275a:	f042 0220 	orr.w	r2, r2, #32
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002760:	2001      	movs	r0, #1
 8002762:	e7c1      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002764:	6890      	ldr	r0, [r2, #8]
 8002766:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 800276a:	d11b      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800276c:	6890      	ldr	r0, [r2, #8]
 800276e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002772:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002774:	680a      	ldr	r2, [r1, #0]
 8002776:	2a10      	cmp	r2, #16
 8002778:	d001      	beq.n	800277e <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277a:	2000      	movs	r0, #0
 800277c:	e7b4      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800277e:	4a0c      	ldr	r2, [pc, #48]	@ (80027b0 <HAL_ADC_ConfigChannel+0x138>)
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	490c      	ldr	r1, [pc, #48]	@ (80027b4 <HAL_ADC_ConfigChannel+0x13c>)
 8002784:	fba1 1202 	umull	r1, r2, r1, r2
 8002788:	0c92      	lsrs	r2, r2, #18
 800278a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800278e:	0052      	lsls	r2, r2, #1
 8002790:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002792:	e002      	b.n	800279a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8002794:	9a01      	ldr	r2, [sp, #4]
 8002796:	3a01      	subs	r2, #1
 8002798:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800279a:	9a01      	ldr	r2, [sp, #4]
 800279c:	2a00      	cmp	r2, #0
 800279e:	d1f9      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a0:	2000      	movs	r0, #0
 80027a2:	e7a1      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x70>
 80027a4:	2000      	movs	r0, #0
 80027a6:	e79f      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80027a8:	2002      	movs	r0, #2
 80027aa:	e7a0      	b.n	80026ee <HAL_ADC_ConfigChannel+0x76>
 80027ac:	40012400 	.word	0x40012400
 80027b0:	200002ec 	.word	0x200002ec
 80027b4:	431bde83 	.word	0x431bde83

080027b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027b8:	b530      	push	{r4, r5, lr}
 80027ba:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c0:	6803      	ldr	r3, [r0, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	f012 0f01 	tst.w	r2, #1
 80027c8:	d133      	bne.n	8002832 <ADC_Enable+0x7a>
 80027ca:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <ADC_Enable+0x80>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a18      	ldr	r2, [pc, #96]	@ (800283c <ADC_Enable+0x84>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80027e2:	e002      	b.n	80027ea <ADC_Enable+0x32>
    {
      wait_loop_index--;
 80027e4:	9b01      	ldr	r3, [sp, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f9      	bne.n	80027e4 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027f0:	f7ff fe62 	bl	80024b8 <HAL_GetTick>
 80027f4:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f013 0f01 	tst.w	r3, #1
 80027fe:	d116      	bne.n	800282e <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002800:	f7ff fe5a 	bl	80024b8 <HAL_GetTick>
 8002804:	1b43      	subs	r3, r0, r5
 8002806:	2b02      	cmp	r3, #2
 8002808:	d9f5      	bls.n	80027f6 <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f013 0f01 	tst.w	r3, #1
 8002812:	d1f0      	bne.n	80027f6 <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002814:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002816:	f043 0310 	orr.w	r3, r3, #16
 800281a:	62a3      	str	r3, [r4, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	62e3      	str	r3, [r4, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002824:	2300      	movs	r3, #0
 8002826:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24

          return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
 800282c:	e002      	b.n	8002834 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800282e:	2000      	movs	r0, #0
 8002830:	e000      	b.n	8002834 <ADC_Enable+0x7c>
 8002832:	2000      	movs	r0, #0
}
 8002834:	b003      	add	sp, #12
 8002836:	bd30      	pop	{r4, r5, pc}
 8002838:	200002ec 	.word	0x200002ec
 800283c:	431bde83 	.word	0x431bde83

08002840 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002840:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002844:	2b01      	cmp	r3, #1
 8002846:	d068      	beq.n	800291a <HAL_ADC_Start+0xda>
{
 8002848:	b510      	push	{r4, lr}
 800284a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800284c:	2301      	movs	r3, #1
 800284e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002852:	f7ff ffb1 	bl	80027b8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002856:	2800      	cmp	r0, #0
 8002858:	d15b      	bne.n	8002912 <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 800285a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800285c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002868:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	4a2c      	ldr	r2, [pc, #176]	@ (8002920 <HAL_ADC_Start+0xe0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002872:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002874:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002878:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002880:	d005      	beq.n	800288e <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002882:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002884:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002888:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800288c:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002890:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8002894:	d02b      	beq.n	80028ee <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002896:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002898:	f022 0206 	bic.w	r2, r2, #6
 800289c:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 800289e:	2200      	movs	r2, #0
 80028a0:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028a4:	f06f 0202 	mvn.w	r2, #2
 80028a8:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80028b2:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80028b6:	d01d      	beq.n	80028f4 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	e02a      	b.n	8002918 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028c2:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80028c6:	6852      	ldr	r2, [r2, #4]
 80028c8:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80028cc:	d0d1      	beq.n	8002872 <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028ce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80028d0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80028d4:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028d6:	4a13      	ldr	r2, [pc, #76]	@ (8002924 <HAL_ADC_Start+0xe4>)
 80028d8:	6852      	ldr	r2, [r2, #4]
 80028da:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80028de:	d0d6      	beq.n	800288e <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028e0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80028e2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80028e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80028ea:	62a2      	str	r2, [r4, #40]	@ 0x28
 80028ec:	e7cf      	b.n	800288e <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 80028ee:	2200      	movs	r2, #0
 80028f0:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80028f2:	e7d4      	b.n	800289e <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002920 <HAL_ADC_Start+0xe0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	e009      	b.n	8002918 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002904:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8002908:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800290a:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 800290e:	d1d3      	bne.n	80028b8 <HAL_ADC_Start+0x78>
 8002910:	e7f3      	b.n	80028fa <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 8002912:	2300      	movs	r3, #0
 8002914:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002918:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800291a:	2002      	movs	r0, #2
}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40012800 	.word	0x40012800
 8002924:	40012400 	.word	0x40012400

08002928 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002928:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800292a:	6803      	ldr	r3, [r0, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	f012 0f01 	tst.w	r2, #1
 8002932:	d101      	bne.n	8002938 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002934:	2000      	movs	r0, #0
}
 8002936:	bd38      	pop	{r3, r4, r5, pc}
 8002938:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002942:	f7ff fdb9 	bl	80024b8 <HAL_GetTick>
 8002946:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f013 0f01 	tst.w	r3, #1
 8002950:	d013      	beq.n	800297a <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002952:	f7ff fdb1 	bl	80024b8 <HAL_GetTick>
 8002956:	1b43      	subs	r3, r0, r5
 8002958:	2b02      	cmp	r3, #2
 800295a:	d9f5      	bls.n	8002948 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f013 0f01 	tst.w	r3, #1
 8002964:	d0f0      	beq.n	8002948 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002966:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002968:	f043 0310 	orr.w	r3, r3, #16
 800296c:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8002976:	2001      	movs	r0, #1
 8002978:	e7dd      	b.n	8002936 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800297a:	2000      	movs	r0, #0
 800297c:	e7db      	b.n	8002936 <ADC_ConversionStop_Disable+0xe>
	...

08002980 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002980:	2800      	cmp	r0, #0
 8002982:	d07b      	beq.n	8002a7c <HAL_ADC_Init+0xfc>
{
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002988:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d04d      	beq.n	8002a2a <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800298e:	4620      	mov	r0, r4
 8002990:	f7ff ffca 	bl	8002928 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002994:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002996:	f013 0310 	ands.w	r3, r3, #16
 800299a:	d169      	bne.n	8002a70 <HAL_ADC_Init+0xf0>
 800299c:	2800      	cmp	r0, #0
 800299e:	d167      	bne.n	8002a70 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 80029a0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80029a2:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80029a6:	f022 0202 	bic.w	r2, r2, #2
 80029aa:	f042 0202 	orr.w	r2, r2, #2
 80029ae:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029b0:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029b2:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029b4:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029b6:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029b8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029bc:	68a5      	ldr	r5, [r4, #8]
 80029be:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80029c2:	d002      	beq.n	80029ca <HAL_ADC_Init+0x4a>
 80029c4:	2d01      	cmp	r5, #1
 80029c6:	d036      	beq.n	8002a36 <HAL_ADC_Init+0xb6>
 80029c8:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029ca:	7d26      	ldrb	r6, [r4, #20]
 80029cc:	2e01      	cmp	r6, #1
 80029ce:	d035      	beq.n	8002a3c <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80029d0:	6826      	ldr	r6, [r4, #0]
 80029d2:	6871      	ldr	r1, [r6, #4]
 80029d4:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 80029d8:	4329      	orrs	r1, r5
 80029da:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80029dc:	6825      	ldr	r5, [r4, #0]
 80029de:	68ae      	ldr	r6, [r5, #8]
 80029e0:	4927      	ldr	r1, [pc, #156]	@ (8002a80 <HAL_ADC_Init+0x100>)
 80029e2:	4031      	ands	r1, r6
 80029e4:	4311      	orrs	r1, r2
 80029e6:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80029e8:	68a1      	ldr	r1, [r4, #8]
 80029ea:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80029ee:	d001      	beq.n	80029f4 <HAL_ADC_Init+0x74>
 80029f0:	2901      	cmp	r1, #1
 80029f2:	d102      	bne.n	80029fa <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029f4:	6923      	ldr	r3, [r4, #16]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80029fa:	6825      	ldr	r5, [r4, #0]
 80029fc:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80029fe:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8002a02:	430b      	orrs	r3, r1
 8002a04:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <HAL_ADC_Init+0x104>)
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d025      	beq.n	8002a5e <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8002a12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a14:	f023 0312 	bic.w	r3, r3, #18
 8002a18:	f043 0310 	orr.w	r3, r3, #16
 8002a1c:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8002a26:	2001      	movs	r0, #1
 8002a28:	e027      	b.n	8002a7a <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a2a:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002a2c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8002a30:	f7ff fb86 	bl	8002140 <HAL_ADC_MspInit>
 8002a34:	e7ab      	b.n	800298e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a36:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8002a3a:	e7c6      	b.n	80029ca <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a3c:	b931      	cbnz	r1, 8002a4c <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a3e:	69a1      	ldr	r1, [r4, #24]
 8002a40:	3901      	subs	r1, #1
 8002a42:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002a46:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8002a4a:	e7c1      	b.n	80029d0 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002a4e:	f041 0120 	orr.w	r1, r1, #32
 8002a52:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a54:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002a56:	f041 0101 	orr.w	r1, r1, #1
 8002a5a:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8002a5c:	e7b8      	b.n	80029d0 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002a62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a64:	f023 0303 	bic.w	r3, r3, #3
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a6e:	e004      	b.n	8002a7a <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a72:	f043 0310 	orr.w	r3, r3, #16
 8002a76:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
}
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
}
 8002a7e:	4770      	bx	lr
 8002a80:	ffe1f7fd 	.word	0xffe1f7fd
 8002a84:	ff1f0efe 	.word	0xff1f0efe

08002a88 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002a88:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d013      	beq.n	8002ab8 <HAL_ADC_Stop+0x30>
{
 8002a90:	b510      	push	{r4, lr}
 8002a92:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002a94:	2301      	movs	r3, #1
 8002a96:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a9a:	f7ff ff45 	bl	8002928 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002a9e:	b938      	cbnz	r0, 8002ab0 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8002aa0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002aa2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	62a3      	str	r3, [r4, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002ab6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002ab8:	2002      	movs	r0, #2
}
 8002aba:	4770      	bx	lr

08002abc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002abc:	2800      	cmp	r0, #0
 8002abe:	db08      	blt.n	8002ad2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac0:	0109      	lsls	r1, r1, #4
 8002ac2:	b2c9      	uxtb	r1, r1
 8002ac4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002ac8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002acc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002ad0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	f000 000f 	and.w	r0, r0, #15
 8002ad6:	0109      	lsls	r1, r1, #4
 8002ad8:	b2c9      	uxtb	r1, r1
 8002ada:	4b01      	ldr	r3, [pc, #4]	@ (8002ae0 <__NVIC_SetPriority+0x24>)
 8002adc:	5419      	strb	r1, [r3, r0]
  }
}
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed14 	.word	0xe000ed14

08002ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aea:	f1c0 0c07 	rsb	ip, r0, #7
 8002aee:	f1bc 0f04 	cmp.w	ip, #4
 8002af2:	bf28      	it	cs
 8002af4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af8:	1d03      	adds	r3, r0, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d90f      	bls.n	8002b1e <NVIC_EncodePriority+0x3a>
 8002afe:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 3eff 	mov.w	lr, #4294967295
 8002b04:	fa0e f00c 	lsl.w	r0, lr, ip
 8002b08:	ea21 0100 	bic.w	r1, r1, r0
 8002b0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0e:	fa0e fe03 	lsl.w	lr, lr, r3
 8002b12:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002b16:	ea41 0002 	orr.w	r0, r1, r2
 8002b1a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e7ee      	b.n	8002b00 <NVIC_EncodePriority+0x1c>
	...

08002b24 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4a07      	ldr	r2, [pc, #28]	@ (8002b44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b26:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b28:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b30:	0200      	lsls	r0, r0, #8
 8002b32:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b36:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002b40:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b48:	b510      	push	{r4, lr}
 8002b4a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_NVIC_SetPriority+0x1c>)
 8002b4e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b50:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002b54:	f7ff ffc6 	bl	8002ae4 <NVIC_EncodePriority>
 8002b58:	4601      	mov	r1, r0
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7ff ffae 	bl	8002abc <__NVIC_SetPriority>
}
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	bf00      	nop
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	db07      	blt.n	8002b7c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6c:	f000 021f 	and.w	r2, r0, #31
 8002b70:	0940      	lsrs	r0, r0, #5
 8002b72:	2301      	movs	r3, #1
 8002b74:	4093      	lsls	r3, r2
 8002b76:	4a02      	ldr	r2, [pc, #8]	@ (8002b80 <HAL_NVIC_EnableIRQ+0x18>)
 8002b78:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b84:	3801      	subs	r0, #1
 8002b86:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002b8a:	d20b      	bcs.n	8002ba4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002b90:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <HAL_SYSTICK_Config+0x24>)
 8002b94:	21f0      	movs	r1, #240	@ 0xf0
 8002b96:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002ba4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bb0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002bb2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb4:	e0a2      	b.n	8002cfc <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bb6:	4d7e      	ldr	r5, [pc, #504]	@ (8002db0 <HAL_GPIO_Init+0x204>)
 8002bb8:	42ab      	cmp	r3, r5
 8002bba:	d010      	beq.n	8002bde <HAL_GPIO_Init+0x32>
 8002bbc:	d907      	bls.n	8002bce <HAL_GPIO_Init+0x22>
 8002bbe:	4d7d      	ldr	r5, [pc, #500]	@ (8002db4 <HAL_GPIO_Init+0x208>)
 8002bc0:	42ab      	cmp	r3, r5
 8002bc2:	d00c      	beq.n	8002bde <HAL_GPIO_Init+0x32>
 8002bc4:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8002bc8:	42ab      	cmp	r3, r5
 8002bca:	d008      	beq.n	8002bde <HAL_GPIO_Init+0x32>
 8002bcc:	e013      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
 8002bce:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002bd2:	42ab      	cmp	r3, r5
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x32>
 8002bd6:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8002bda:	42ab      	cmp	r3, r5
 8002bdc:	d107      	bne.n	8002bee <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bde:	688b      	ldr	r3, [r1, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d055      	beq.n	8002c90 <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d04e      	beq.n	8002c86 <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002be8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bea:	2408      	movs	r4, #8
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8002bee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002bf2:	42ab      	cmp	r3, r5
 8002bf4:	d0f3      	beq.n	8002bde <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bf6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8002bfa:	d84b      	bhi.n	8002c94 <HAL_GPIO_Init+0xe8>
 8002bfc:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bfe:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c02:	6833      	ldr	r3, [r6, #0]
 8002c04:	250f      	movs	r5, #15
 8002c06:	4095      	lsls	r5, r2
 8002c08:	ea23 0305 	bic.w	r3, r3, r5
 8002c0c:	fa04 f202 	lsl.w	r2, r4, r2
 8002c10:	4313      	orrs	r3, r2
 8002c12:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c14:	684b      	ldr	r3, [r1, #4]
 8002c16:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002c1a:	d06d      	beq.n	8002cf8 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c1c:	4b66      	ldr	r3, [pc, #408]	@ (8002db8 <HAL_GPIO_Init+0x20c>)
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	619a      	str	r2, [r3, #24]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002c30:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8002c34:	1c95      	adds	r5, r2, #2
 8002c36:	4b61      	ldr	r3, [pc, #388]	@ (8002dbc <HAL_GPIO_Init+0x210>)
 8002c38:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c3c:	f00c 0503 	and.w	r5, ip, #3
 8002c40:	00ad      	lsls	r5, r5, #2
 8002c42:	230f      	movs	r3, #15
 8002c44:	40ab      	lsls	r3, r5
 8002c46:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc0 <HAL_GPIO_Init+0x214>)
 8002c4c:	4298      	cmp	r0, r3
 8002c4e:	d028      	beq.n	8002ca2 <HAL_GPIO_Init+0xf6>
 8002c50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c54:	4298      	cmp	r0, r3
 8002c56:	f000 808d 	beq.w	8002d74 <HAL_GPIO_Init+0x1c8>
 8002c5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c5e:	4298      	cmp	r0, r3
 8002c60:	f000 808a 	beq.w	8002d78 <HAL_GPIO_Init+0x1cc>
 8002c64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c68:	4298      	cmp	r0, r3
 8002c6a:	d018      	beq.n	8002c9e <HAL_GPIO_Init+0xf2>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	e019      	b.n	8002ca4 <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c70:	68cc      	ldr	r4, [r1, #12]
          break;
 8002c72:	e7c0      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c74:	68cc      	ldr	r4, [r1, #12]
 8002c76:	3404      	adds	r4, #4
          break;
 8002c78:	e7bd      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c7a:	68cc      	ldr	r4, [r1, #12]
 8002c7c:	3408      	adds	r4, #8
          break;
 8002c7e:	e7ba      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c80:	68cc      	ldr	r4, [r1, #12]
 8002c82:	340c      	adds	r4, #12
          break;
 8002c84:	e7b7      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8002c86:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c88:	2408      	movs	r4, #8
 8002c8a:	e7b4      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c8c:	2400      	movs	r4, #0
 8002c8e:	e7b2      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c90:	2404      	movs	r4, #4
 8002c92:	e7b0      	b.n	8002bf6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c94:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c96:	f1ac 0208 	sub.w	r2, ip, #8
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	e7b1      	b.n	8002c02 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e000      	b.n	8002ca4 <HAL_GPIO_Init+0xf8>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	40ab      	lsls	r3, r5
 8002ca6:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8002ca8:	3202      	adds	r2, #2
 8002caa:	4d44      	ldr	r5, [pc, #272]	@ (8002dbc <HAL_GPIO_Init+0x210>)
 8002cac:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cb0:	684b      	ldr	r3, [r1, #4]
 8002cb2:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002cb6:	d061      	beq.n	8002d7c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cb8:	4a42      	ldr	r2, [pc, #264]	@ (8002dc4 <HAL_GPIO_Init+0x218>)
 8002cba:	6893      	ldr	r3, [r2, #8]
 8002cbc:	ea43 030e 	orr.w	r3, r3, lr
 8002cc0:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc2:	684b      	ldr	r3, [r1, #4]
 8002cc4:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002cc8:	d05e      	beq.n	8002d88 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cca:	4a3e      	ldr	r2, [pc, #248]	@ (8002dc4 <HAL_GPIO_Init+0x218>)
 8002ccc:	68d3      	ldr	r3, [r2, #12]
 8002cce:	ea43 030e 	orr.w	r3, r3, lr
 8002cd2:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd4:	684b      	ldr	r3, [r1, #4]
 8002cd6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002cda:	d05b      	beq.n	8002d94 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cdc:	4a39      	ldr	r2, [pc, #228]	@ (8002dc4 <HAL_GPIO_Init+0x218>)
 8002cde:	6853      	ldr	r3, [r2, #4]
 8002ce0:	ea43 030e 	orr.w	r3, r3, lr
 8002ce4:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce6:	684b      	ldr	r3, [r1, #4]
 8002ce8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002cec:	d058      	beq.n	8002da0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cee:	4a35      	ldr	r2, [pc, #212]	@ (8002dc4 <HAL_GPIO_Init+0x218>)
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	ea43 030e 	orr.w	r3, r3, lr
 8002cf6:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8002cf8:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfc:	680b      	ldr	r3, [r1, #0]
 8002cfe:	fa33 f20c 	lsrs.w	r2, r3, ip
 8002d02:	d053      	beq.n	8002dac <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8002d04:	2201      	movs	r2, #1
 8002d06:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0a:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8002d0e:	ea32 0303 	bics.w	r3, r2, r3
 8002d12:	d1f1      	bne.n	8002cf8 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8002d14:	684b      	ldr	r3, [r1, #4]
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	f63f af4d 	bhi.w	8002bb6 <HAL_GPIO_Init+0xa>
 8002d1c:	2b12      	cmp	r3, #18
 8002d1e:	f63f af6a 	bhi.w	8002bf6 <HAL_GPIO_Init+0x4a>
 8002d22:	a501      	add	r5, pc, #4	@ (adr r5, 8002d28 <HAL_GPIO_Init+0x17c>)
 8002d24:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8002d28:	08002bdf 	.word	0x08002bdf
 8002d2c:	08002c71 	.word	0x08002c71
 8002d30:	08002c7b 	.word	0x08002c7b
 8002d34:	08002c8d 	.word	0x08002c8d
 8002d38:	08002bf7 	.word	0x08002bf7
 8002d3c:	08002bf7 	.word	0x08002bf7
 8002d40:	08002bf7 	.word	0x08002bf7
 8002d44:	08002bf7 	.word	0x08002bf7
 8002d48:	08002bf7 	.word	0x08002bf7
 8002d4c:	08002bf7 	.word	0x08002bf7
 8002d50:	08002bf7 	.word	0x08002bf7
 8002d54:	08002bf7 	.word	0x08002bf7
 8002d58:	08002bf7 	.word	0x08002bf7
 8002d5c:	08002bf7 	.word	0x08002bf7
 8002d60:	08002bf7 	.word	0x08002bf7
 8002d64:	08002bf7 	.word	0x08002bf7
 8002d68:	08002bf7 	.word	0x08002bf7
 8002d6c:	08002c75 	.word	0x08002c75
 8002d70:	08002c81 	.word	0x08002c81
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d74:	2301      	movs	r3, #1
 8002d76:	e795      	b.n	8002ca4 <HAL_GPIO_Init+0xf8>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e793      	b.n	8002ca4 <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d7c:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <HAL_GPIO_Init+0x218>)
 8002d7e:	6893      	ldr	r3, [r2, #8]
 8002d80:	ea23 030e 	bic.w	r3, r3, lr
 8002d84:	6093      	str	r3, [r2, #8]
 8002d86:	e79c      	b.n	8002cc2 <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d88:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc4 <HAL_GPIO_Init+0x218>)
 8002d8a:	68d3      	ldr	r3, [r2, #12]
 8002d8c:	ea23 030e 	bic.w	r3, r3, lr
 8002d90:	60d3      	str	r3, [r2, #12]
 8002d92:	e79f      	b.n	8002cd4 <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d94:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc4 <HAL_GPIO_Init+0x218>)
 8002d96:	6853      	ldr	r3, [r2, #4]
 8002d98:	ea23 030e 	bic.w	r3, r3, lr
 8002d9c:	6053      	str	r3, [r2, #4]
 8002d9e:	e7a2      	b.n	8002ce6 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002da0:	4a08      	ldr	r2, [pc, #32]	@ (8002dc4 <HAL_GPIO_Init+0x218>)
 8002da2:	6813      	ldr	r3, [r2, #0]
 8002da4:	ea23 030e 	bic.w	r3, r3, lr
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e7a5      	b.n	8002cf8 <HAL_GPIO_Init+0x14c>
  }
}
 8002dac:	b002      	add	sp, #8
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	10220000 	.word	0x10220000
 8002db4:	10310000 	.word	0x10310000
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc8:	6883      	ldr	r3, [r0, #8]
 8002dca:	4219      	tst	r1, r3
 8002dcc:	d001      	beq.n	8002dd2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002dce:	2001      	movs	r0, #1
 8002dd0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dd6:	b10a      	cbz	r2, 8002ddc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd8:	6101      	str	r1, [r0, #16]
 8002dda:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ddc:	0409      	lsls	r1, r1, #16
 8002dde:	6101      	str	r1, [r0, #16]
  }
}
 8002de0:	4770      	bx	lr

08002de2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002de2:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de4:	ea01 0203 	and.w	r2, r1, r3
 8002de8:	ea21 0103 	bic.w	r1, r1, r3
 8002dec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002df0:	6101      	str	r1, [r0, #16]
}
 8002df2:	4770      	bx	lr

08002df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002df6:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	4203      	tst	r3, r0
 8002dfc:	d100      	bne.n	8002e00 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002dfe:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e00:	4b02      	ldr	r3, [pc, #8]	@ (8002e0c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002e02:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e04:	f7fe fd30 	bl	8001868 <HAL_GPIO_EXTI_Callback>
}
 8002e08:	e7f9      	b.n	8002dfe <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002e0a:	bf00      	nop
 8002e0c:	40010400 	.word	0x40010400

08002e10 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e10:	6803      	ldr	r3, [r0, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002e18:	d101      	bne.n	8002e1e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8002e1a:	2000      	movs	r0, #0
}
 8002e1c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e22:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e32:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002e34:	f042 0204 	orr.w	r2, r2, #4
 8002e38:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8002e3a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8002e3e:	2001      	movs	r0, #1
 8002e40:	4770      	bx	lr

08002e42 <I2C_WaitOnFlagUntilTimeout>:
{
 8002e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e46:	4606      	mov	r6, r0
 8002e48:	460c      	mov	r4, r1
 8002e4a:	4617      	mov	r7, r2
 8002e4c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4e:	e03b      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e50:	f7ff fb32 	bl	80024b8 <HAL_GetTick>
 8002e54:	9b06      	ldr	r3, [sp, #24]
 8002e56:	1ac0      	subs	r0, r0, r3
 8002e58:	4540      	cmp	r0, r8
 8002e5a:	d802      	bhi.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x20>
 8002e5c:	f1b8 0f00 	cmp.w	r8, #0
 8002e60:	d132      	bne.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e62:	2d01      	cmp	r5, #1
 8002e64:	d018      	beq.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e66:	6833      	ldr	r3, [r6, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	ea24 0303 	bic.w	r3, r4, r3
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	429f      	cmp	r7, r3
 8002e78:	d126      	bne.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e84:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8002e8a:	f042 0220 	orr.w	r2, r2, #32
 8002e8e:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002e90:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8002e94:	2001      	movs	r0, #1
 8002e96:	e027      	b.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e98:	6833      	ldr	r3, [r6, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	ea24 0303 	bic.w	r3, r4, r3
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	e7e5      	b.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eaa:	6833      	ldr	r3, [r6, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	ea24 0c03 	bic.w	ip, r4, r3
 8002eb2:	fa1f fc8c 	uxth.w	ip, ip
 8002eb6:	fabc fc8c 	clz	ip, ip
 8002eba:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002ebe:	4567      	cmp	r7, ip
 8002ec0:	d111      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002ec6:	d1c3      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec8:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8002ecc:	2d01      	cmp	r5, #1
 8002ece:	d0ec      	beq.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x68>
 8002ed0:	6833      	ldr	r3, [r6, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	ea24 0c03 	bic.w	ip, r4, r3
 8002ed8:	fa1f fc8c 	uxth.w	ip, ip
 8002edc:	fabc fc8c 	clz	ip, ip
 8002ee0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002ee4:	e7eb      	b.n	8002ebe <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8002ee6:	2000      	movs	r0, #0
}
 8002ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	460e      	mov	r6, r1
 8002ef4:	4690      	mov	r8, r2
 8002ef6:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef8:	e053      	b.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f00:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f02:	682b      	ldr	r3, [r5, #0]
 8002f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f08:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f18:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002f1a:	f042 0204 	orr.w	r2, r2, #4
 8002f1e:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002f20:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8002f24:	2001      	movs	r0, #1
 8002f26:	e04a      	b.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7ff fac6 	bl	80024b8 <HAL_GetTick>
 8002f2c:	eba0 0009 	sub.w	r0, r0, r9
 8002f30:	4540      	cmp	r0, r8
 8002f32:	d802      	bhi.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8002f34:	f1b8 0f00 	cmp.w	r8, #0
 8002f38:	d133      	bne.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f3a:	2f01      	cmp	r7, #1
 8002f3c:	d017      	beq.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8002f3e:	682b      	ldr	r3, [r5, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	ea26 0303 	bic.w	r3, r6, r3
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b00      	subs	r3, #0
 8002f4a:	bf18      	it	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	b343      	cbz	r3, 8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	2220      	movs	r2, #32
 8002f56:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5e:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002f60:	f042 0220 	orr.w	r2, r2, #32
 8002f64:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002f66:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e027      	b.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f6e:	682b      	ldr	r3, [r5, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	ea26 0303 	bic.w	r3, r6, r3
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b00      	subs	r3, #0
 8002f7a:	bf18      	it	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	e7e6      	b.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	699c      	ldr	r4, [r3, #24]
 8002f84:	ea26 0404 	bic.w	r4, r6, r4
 8002f88:	b2a4      	uxth	r4, r4
 8002f8a:	3c00      	subs	r4, #0
 8002f8c:	bf18      	it	ne
 8002f8e:	2401      	movne	r4, #1
 8002f90:	b1a4      	cbz	r4, 8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f92:	682b      	ldr	r3, [r5, #0]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002f9a:	d1ae      	bne.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002fa0:	d1c2      	bne.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa2:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8002fa6:	2f01      	cmp	r7, #1
 8002fa8:	d1ea      	bne.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8002faa:	682b      	ldr	r3, [r5, #0]
 8002fac:	695c      	ldr	r4, [r3, #20]
 8002fae:	ea26 0404 	bic.w	r4, r6, r4
 8002fb2:	b2a4      	uxth	r4, r4
 8002fb4:	3c00      	subs	r4, #0
 8002fb6:	bf18      	it	ne
 8002fb8:	2401      	movne	r4, #1
 8002fba:	e7e9      	b.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8002fbc:	2000      	movs	r0, #0
}
 8002fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08002fc4 <I2C_MasterRequestWrite>:
{
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	4604      	mov	r4, r0
 8002fca:	460d      	mov	r5, r1
 8002fcc:	4616      	mov	r6, r2
 8002fce:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d00d      	beq.n	8002ff2 <I2C_MasterRequestWrite+0x2e>
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d00b      	beq.n	8002ff2 <I2C_MasterRequestWrite+0x2e>
 8002fda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fde:	d008      	beq.n	8002ff2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fe0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002fe2:	2b12      	cmp	r3, #18
 8002fe4:	d10a      	bne.n	8002ffc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe6:	6802      	ldr	r2, [r0, #0]
 8002fe8:	6813      	ldr	r3, [r2, #0]
 8002fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e004      	b.n	8002ffc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	6813      	ldr	r3, [r2, #0]
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffa:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffc:	9700      	str	r7, [sp, #0]
 8002ffe:	4633      	mov	r3, r6
 8003000:	2200      	movs	r2, #0
 8003002:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff ff1b 	bl	8002e42 <I2C_WaitOnFlagUntilTimeout>
 800300c:	b980      	cbnz	r0, 8003030 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800300e:	6923      	ldr	r3, [r4, #16]
 8003010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003014:	d116      	bne.n	8003044 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 800301c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301e:	463b      	mov	r3, r7
 8003020:	4632      	mov	r2, r6
 8003022:	4913      	ldr	r1, [pc, #76]	@ (8003070 <I2C_MasterRequestWrite+0xac>)
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff ff61 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302a:	b9f8      	cbnz	r0, 800306c <I2C_MasterRequestWrite+0xa8>
}
 800302c:	b003      	add	sp, #12
 800302e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003038:	d002      	beq.n	8003040 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800303a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800303e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8003040:	2003      	movs	r0, #3
 8003042:	e7f3      	b.n	800302c <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003044:	11eb      	asrs	r3, r5, #7
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	f003 0306 	and.w	r3, r3, #6
 800304c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8003050:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003052:	463b      	mov	r3, r7
 8003054:	4632      	mov	r2, r6
 8003056:	4907      	ldr	r1, [pc, #28]	@ (8003074 <I2C_MasterRequestWrite+0xb0>)
 8003058:	4620      	mov	r0, r4
 800305a:	f7ff ff47 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305e:	b918      	cbnz	r0, 8003068 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	b2ed      	uxtb	r5, r5
 8003064:	611d      	str	r5, [r3, #16]
 8003066:	e7da      	b.n	800301e <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8003068:	2001      	movs	r0, #1
 800306a:	e7df      	b.n	800302c <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 800306c:	2001      	movs	r0, #1
 800306e:	e7dd      	b.n	800302c <I2C_MasterRequestWrite+0x68>
 8003070:	00010002 	.word	0x00010002
 8003074:	00010008 	.word	0x00010008

08003078 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4604      	mov	r4, r0
 800307c:	460d      	mov	r5, r1
 800307e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003088:	d121      	bne.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff fec0 	bl	8002e10 <I2C_IsAcknowledgeFailed>
 8003090:	b9f8      	cbnz	r0, 80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003092:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003096:	d0f3      	beq.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003098:	f7ff fa0e 	bl	80024b8 <HAL_GetTick>
 800309c:	1b80      	subs	r0, r0, r6
 800309e:	42a8      	cmp	r0, r5
 80030a0:	d801      	bhi.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d1ec      	bne.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030ae:	d1e7      	bne.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b4:	2220      	movs	r2, #32
 80030b6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030be:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80030c6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80030ca:	2001      	movs	r0, #1
 80030cc:	e000      	b.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80030ce:	2000      	movs	r0, #0
}
 80030d0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80030d2:	2001      	movs	r0, #1
 80030d4:	e7fc      	b.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080030d6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80030d6:	b570      	push	{r4, r5, r6, lr}
 80030d8:	4604      	mov	r4, r0
 80030da:	460d      	mov	r5, r1
 80030dc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f013 0f04 	tst.w	r3, #4
 80030e6:	d121      	bne.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff fe91 	bl	8002e10 <I2C_IsAcknowledgeFailed>
 80030ee:	b9f8      	cbnz	r0, 8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80030f4:	d0f3      	beq.n	80030de <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7ff f9df 	bl	80024b8 <HAL_GetTick>
 80030fa:	1b80      	subs	r0, r0, r6
 80030fc:	42a8      	cmp	r0, r5
 80030fe:	d801      	bhi.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003100:	2d00      	cmp	r5, #0
 8003102:	d1ec      	bne.n	80030de <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f013 0f04 	tst.w	r3, #4
 800310c:	d1e7      	bne.n	80030de <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800310e:	2300      	movs	r3, #0
 8003110:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003112:	2220      	movs	r2, #32
 8003114:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800311e:	f042 0220 	orr.w	r2, r2, #32
 8003122:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003124:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8003128:	2001      	movs	r0, #1
 800312a:	e000      	b.n	800312e <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 800312c:	2000      	movs	r0, #0
}
 800312e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003130:	2001      	movs	r0, #1
 8003132:	e7fc      	b.n	800312e <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003134 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003134:	2800      	cmp	r0, #0
 8003136:	f000 80cc 	beq.w	80032d2 <HAL_I2C_Init+0x19e>
{
 800313a:	b570      	push	{r4, r5, r6, lr}
 800313c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800313e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003142:	2b00      	cmp	r3, #0
 8003144:	d077      	beq.n	8003236 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003146:	2324      	movs	r3, #36	@ 0x24
 8003148:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	6813      	ldr	r3, [r2, #0]
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003156:	6822      	ldr	r2, [r4, #0]
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800315e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003168:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800316a:	f000 fc81 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316e:	6862      	ldr	r2, [r4, #4]
 8003170:	4b5a      	ldr	r3, [pc, #360]	@ (80032dc <HAL_I2C_Init+0x1a8>)
 8003172:	429a      	cmp	r2, r3
 8003174:	d864      	bhi.n	8003240 <HAL_I2C_Init+0x10c>
 8003176:	4b5a      	ldr	r3, [pc, #360]	@ (80032e0 <HAL_I2C_Init+0x1ac>)
 8003178:	4298      	cmp	r0, r3
 800317a:	bf8c      	ite	hi
 800317c:	2300      	movhi	r3, #0
 800317e:	2301      	movls	r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	f040 80a8 	bne.w	80032d6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8003186:	4957      	ldr	r1, [pc, #348]	@ (80032e4 <HAL_I2C_Init+0x1b0>)
 8003188:	fba1 3100 	umull	r3, r1, r1, r0
 800318c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800318e:	6825      	ldr	r5, [r4, #0]
 8003190:	686a      	ldr	r2, [r5, #4]
 8003192:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003196:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800319a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800319c:	6821      	ldr	r1, [r4, #0]
 800319e:	6a0a      	ldr	r2, [r1, #32]
 80031a0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80031a4:	6866      	ldr	r6, [r4, #4]
 80031a6:	4d4d      	ldr	r5, [pc, #308]	@ (80032dc <HAL_I2C_Init+0x1a8>)
 80031a8:	42ae      	cmp	r6, r5
 80031aa:	d84f      	bhi.n	800324c <HAL_I2C_Init+0x118>
 80031ac:	3301      	adds	r3, #1
 80031ae:	4313      	orrs	r3, r2
 80031b0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b2:	6821      	ldr	r1, [r4, #0]
 80031b4:	69ca      	ldr	r2, [r1, #28]
 80031b6:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80031ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031be:	6865      	ldr	r5, [r4, #4]
 80031c0:	4b46      	ldr	r3, [pc, #280]	@ (80032dc <HAL_I2C_Init+0x1a8>)
 80031c2:	429d      	cmp	r5, r3
 80031c4:	d84c      	bhi.n	8003260 <HAL_I2C_Init+0x12c>
 80031c6:	1e43      	subs	r3, r0, #1
 80031c8:	006d      	lsls	r5, r5, #1
 80031ca:	fbb3 f3f5 	udiv	r3, r3, r5
 80031ce:	3301      	adds	r3, #1
 80031d0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80031d4:	4203      	tst	r3, r0
 80031d6:	d078      	beq.n	80032ca <HAL_I2C_Init+0x196>
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	431a      	orrs	r2, r3
 80031de:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e0:	6821      	ldr	r1, [r4, #0]
 80031e2:	680b      	ldr	r3, [r1, #0]
 80031e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80031e8:	69e2      	ldr	r2, [r4, #28]
 80031ea:	6a20      	ldr	r0, [r4, #32]
 80031ec:	4302      	orrs	r2, r0
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f2:	6821      	ldr	r1, [r4, #0]
 80031f4:	688b      	ldr	r3, [r1, #8]
 80031f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031fe:	6922      	ldr	r2, [r4, #16]
 8003200:	68e0      	ldr	r0, [r4, #12]
 8003202:	4302      	orrs	r2, r0
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003208:	6821      	ldr	r1, [r4, #0]
 800320a:	68cb      	ldr	r3, [r1, #12]
 800320c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003210:	6962      	ldr	r2, [r4, #20]
 8003212:	69a0      	ldr	r0, [r4, #24]
 8003214:	4302      	orrs	r2, r0
 8003216:	4313      	orrs	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	6813      	ldr	r3, [r2, #0]
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003224:	2000      	movs	r0, #0
 8003226:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003228:	2320      	movs	r3, #32
 800322a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8003234:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003236:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800323a:	f7fe ffb1 	bl	80021a0 <HAL_I2C_MspInit>
 800323e:	e782      	b.n	8003146 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003240:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <HAL_I2C_Init+0x1b4>)
 8003242:	4298      	cmp	r0, r3
 8003244:	bf8c      	ite	hi
 8003246:	2300      	movhi	r3, #0
 8003248:	2301      	movls	r3, #1
 800324a:	e799      	b.n	8003180 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8003250:	fb05 f303 	mul.w	r3, r5, r3
 8003254:	4d25      	ldr	r5, [pc, #148]	@ (80032ec <HAL_I2C_Init+0x1b8>)
 8003256:	fba5 5303 	umull	r5, r3, r5, r3
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	3301      	adds	r3, #1
 800325e:	e7a6      	b.n	80031ae <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003260:	68a6      	ldr	r6, [r4, #8]
 8003262:	b9be      	cbnz	r6, 8003294 <HAL_I2C_Init+0x160>
 8003264:	1e43      	subs	r3, r0, #1
 8003266:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800326a:	fbb3 f3fc 	udiv	r3, r3, ip
 800326e:	3301      	adds	r3, #1
 8003270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	bb43      	cbnz	r3, 80032ce <HAL_I2C_Init+0x19a>
 800327c:	b9c6      	cbnz	r6, 80032b0 <HAL_I2C_Init+0x17c>
 800327e:	1e43      	subs	r3, r0, #1
 8003280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003284:	fbb3 f3f5 	udiv	r3, r3, r5
 8003288:	3301      	adds	r3, #1
 800328a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003292:	e7a3      	b.n	80031dc <HAL_I2C_Init+0xa8>
 8003294:	1e43      	subs	r3, r0, #1
 8003296:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 800329a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800329e:	fbb3 f3fc 	udiv	r3, r3, ip
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	e7e4      	b.n	800327a <HAL_I2C_Init+0x146>
 80032b0:	1e43      	subs	r3, r0, #1
 80032b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80032b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80032ba:	fbb3 f3f5 	udiv	r3, r3, r5
 80032be:	3301      	adds	r3, #1
 80032c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032c8:	e788      	b.n	80031dc <HAL_I2C_Init+0xa8>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e786      	b.n	80031dc <HAL_I2C_Init+0xa8>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e784      	b.n	80031dc <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80032d2:	2001      	movs	r0, #1
}
 80032d4:	4770      	bx	lr
    return HAL_ERROR;
 80032d6:	2001      	movs	r0, #1
 80032d8:	e7ac      	b.n	8003234 <HAL_I2C_Init+0x100>
 80032da:	bf00      	nop
 80032dc:	000186a0 	.word	0x000186a0
 80032e0:	001e847f 	.word	0x001e847f
 80032e4:	431bde83 	.word	0x431bde83
 80032e8:	003d08ff 	.word	0x003d08ff
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_I2C_Master_Transmit>:
{
 80032f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032f4:	b085      	sub	sp, #20
 80032f6:	4604      	mov	r4, r0
 80032f8:	460f      	mov	r7, r1
 80032fa:	4691      	mov	r9, r2
 80032fc:	4698      	mov	r8, r3
 80032fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff f8da 	bl	80024b8 <HAL_GetTick>
 8003304:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003306:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800330a:	b2c0      	uxtb	r0, r0
 800330c:	2820      	cmp	r0, #32
 800330e:	d004      	beq.n	800331a <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8003310:	2702      	movs	r7, #2
}
 8003312:	4638      	mov	r0, r7
 8003314:	b005      	add	sp, #20
 8003316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800331a:	9500      	str	r5, [sp, #0]
 800331c:	2319      	movs	r3, #25
 800331e:	2201      	movs	r2, #1
 8003320:	494f      	ldr	r1, [pc, #316]	@ (8003460 <HAL_I2C_Master_Transmit+0x170>)
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff fd8d 	bl	8002e42 <I2C_WaitOnFlagUntilTimeout>
 8003328:	2800      	cmp	r0, #0
 800332a:	f040 8092 	bne.w	8003452 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 800332e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003332:	2b01      	cmp	r3, #1
 8003334:	f000 808f 	beq.w	8003456 <HAL_I2C_Master_Transmit+0x166>
 8003338:	2301      	movs	r3, #1
 800333a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	f012 0f01 	tst.w	r2, #1
 8003346:	d103      	bne.n	8003350 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	6813      	ldr	r3, [r2, #0]
 8003354:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003358:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800335a:	2321      	movs	r3, #33	@ 0x21
 800335c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003360:	2310      	movs	r3, #16
 8003362:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003366:	2300      	movs	r3, #0
 8003368:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800336a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800336e:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003372:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003374:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003376:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <HAL_I2C_Master_Transmit+0x174>)
 8003378:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800337a:	462b      	mov	r3, r5
 800337c:	4632      	mov	r2, r6
 800337e:	4639      	mov	r1, r7
 8003380:	4620      	mov	r0, r4
 8003382:	f7ff fe1f 	bl	8002fc4 <I2C_MasterRequestWrite>
 8003386:	4607      	mov	r7, r0
 8003388:	2800      	cmp	r0, #0
 800338a:	d166      	bne.n	800345a <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338c:	2300      	movs	r3, #0
 800338e:	9303      	str	r3, [sp, #12]
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	9203      	str	r2, [sp, #12]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	9303      	str	r3, [sp, #12]
 800339a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800339c:	e011      	b.n	80033c2 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80033a4:	2701      	movs	r7, #1
 80033a6:	e7b4      	b.n	8003312 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e7f7      	b.n	80033a4 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b4:	462a      	mov	r2, r5
 80033b6:	4631      	mov	r1, r6
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff fe8c 	bl	80030d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d12e      	bne.n	8003420 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80033c2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d036      	beq.n	8003436 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	462a      	mov	r2, r5
 80033ca:	4631      	mov	r1, r6
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7ff fe53 	bl	8003078 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d1e3      	bne.n	800339e <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	7812      	ldrb	r2, [r2, #0]
 80033dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80033de:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80033e4:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80033e6:	b289      	uxth	r1, r1
 80033e8:	3901      	subs	r1, #1
 80033ea:	b289      	uxth	r1, r1
 80033ec:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ee:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	6951      	ldr	r1, [r2, #20]
 80033fa:	f011 0f04 	tst.w	r1, #4
 80033fe:	d0d9      	beq.n	80033b4 <HAL_I2C_Master_Transmit+0xc4>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0d7      	beq.n	80033b4 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003404:	7843      	ldrb	r3, [r0, #1]
 8003406:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003408:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800340a:	3301      	adds	r3, #1
 800340c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800340e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29b      	uxth	r3, r3
 8003416:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003418:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	8523      	strh	r3, [r4, #40]	@ 0x28
 800341e:	e7c9      	b.n	80033b4 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003420:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d001      	beq.n	800342a <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8003426:	2701      	movs	r7, #1
 8003428:	e773      	b.n	8003312 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	6813      	ldr	r3, [r2, #0]
 800342e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e7f7      	b.n	8003426 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	6813      	ldr	r3, [r2, #0]
 800343a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800343e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003440:	2320      	movs	r3, #32
 8003442:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	2300      	movs	r3, #0
 8003448:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 800344c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8003450:	e75f      	b.n	8003312 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8003452:	2702      	movs	r7, #2
 8003454:	e75d      	b.n	8003312 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8003456:	2702      	movs	r7, #2
 8003458:	e75b      	b.n	8003312 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 800345a:	2701      	movs	r7, #1
 800345c:	e759      	b.n	8003312 <HAL_I2C_Master_Transmit+0x22>
 800345e:	bf00      	nop
 8003460:	00100002 	.word	0x00100002
 8003464:	ffff0000 	.word	0xffff0000

08003468 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003468:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800346a:	4b08      	ldr	r3, [pc, #32]	@ (800348c <RCC_Delay+0x24>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <RCC_Delay+0x28>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	0a5b      	lsrs	r3, r3, #9
 8003476:	fb00 f303 	mul.w	r3, r0, r3
 800347a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800347c:	bf00      	nop
  }
  while (Delay --);
 800347e:	9b01      	ldr	r3, [sp, #4]
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	9201      	str	r2, [sp, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f9      	bne.n	800347c <RCC_Delay+0x14>
}
 8003488:	b002      	add	sp, #8
 800348a:	4770      	bx	lr
 800348c:	200002ec 	.word	0x200002ec
 8003490:	10624dd3 	.word	0x10624dd3

08003494 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003494:	2800      	cmp	r0, #0
 8003496:	f000 81f1 	beq.w	800387c <HAL_RCC_OscConfig+0x3e8>
{
 800349a:	b570      	push	{r4, r5, r6, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a0:	6803      	ldr	r3, [r0, #0]
 80034a2:	f013 0f01 	tst.w	r3, #1
 80034a6:	d02c      	beq.n	8003502 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a8:	4b99      	ldr	r3, [pc, #612]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d01d      	beq.n	80034f0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034b4:	4b96      	ldr	r3, [pc, #600]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d012      	beq.n	80034e6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c0:	6863      	ldr	r3, [r4, #4]
 80034c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c6:	d041      	beq.n	800354c <HAL_RCC_OscConfig+0xb8>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d155      	bne.n	8003578 <HAL_RCC_OscConfig+0xe4>
 80034cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034d0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e037      	b.n	8003556 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e6:	4b8a      	ldr	r3, [pc, #552]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80034ee:	d0e7      	beq.n	80034c0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	4b87      	ldr	r3, [pc, #540]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_OscConfig+0x6e>
 80034fa:	6863      	ldr	r3, [r4, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 81bf 	beq.w	8003880 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	f013 0f02 	tst.w	r3, #2
 8003508:	d075      	beq.n	80035f6 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800350a:	4b81      	ldr	r3, [pc, #516]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f013 0f0c 	tst.w	r3, #12
 8003512:	d05f      	beq.n	80035d4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003514:	4b7e      	ldr	r3, [pc, #504]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d054      	beq.n	80035ca <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003520:	6923      	ldr	r3, [r4, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 808a 	beq.w	800363c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003528:	4b7a      	ldr	r3, [pc, #488]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800352e:	f7fe ffc3 	bl	80024b8 <HAL_GetTick>
 8003532:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003534:	4b76      	ldr	r3, [pc, #472]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f013 0f02 	tst.w	r3, #2
 800353c:	d175      	bne.n	800362a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353e:	f7fe ffbb 	bl	80024b8 <HAL_GetTick>
 8003542:	1b40      	subs	r0, r0, r5
 8003544:	2802      	cmp	r0, #2
 8003546:	d9f5      	bls.n	8003534 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003548:	2003      	movs	r0, #3
 800354a:	e19e      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	4a70      	ldr	r2, [pc, #448]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	b343      	cbz	r3, 80035ac <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800355a:	f7fe ffad 	bl	80024b8 <HAL_GetTick>
 800355e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003560:	4b6b      	ldr	r3, [pc, #428]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003568:	d1cb      	bne.n	8003502 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356a:	f7fe ffa5 	bl	80024b8 <HAL_GetTick>
 800356e:	1b40      	subs	r0, r0, r5
 8003570:	2864      	cmp	r0, #100	@ 0x64
 8003572:	d9f5      	bls.n	8003560 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003574:	2003      	movs	r0, #3
 8003576:	e188      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800357c:	d009      	beq.n	8003592 <HAL_RCC_OscConfig+0xfe>
 800357e:	4b64      	ldr	r3, [pc, #400]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e7e1      	b.n	8003556 <HAL_RCC_OscConfig+0xc2>
 8003592:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003596:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e7d4      	b.n	8003556 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80035ac:	f7fe ff84 	bl	80024b8 <HAL_GetTick>
 80035b0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	4b57      	ldr	r3, [pc, #348]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80035ba:	d0a2      	beq.n	8003502 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fe ff7c 	bl	80024b8 <HAL_GetTick>
 80035c0:	1b40      	subs	r0, r0, r5
 80035c2:	2864      	cmp	r0, #100	@ 0x64
 80035c4:	d9f5      	bls.n	80035b2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80035c6:	2003      	movs	r0, #3
 80035c8:	e15f      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ca:	4b51      	ldr	r3, [pc, #324]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80035d2:	d1a5      	bne.n	8003520 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f013 0f02 	tst.w	r3, #2
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_OscConfig+0x152>
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 814f 	bne.w	8003884 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80035e8:	6813      	ldr	r3, [r2, #0]
 80035ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80035ee:	6961      	ldr	r1, [r4, #20]
 80035f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035f4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	f013 0f08 	tst.w	r3, #8
 80035fc:	d033      	beq.n	8003666 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fe:	69a3      	ldr	r3, [r4, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d05c      	beq.n	80036be <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003604:	4b43      	ldr	r3, [pc, #268]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003606:	2201      	movs	r2, #1
 8003608:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800360c:	f7fe ff54 	bl	80024b8 <HAL_GetTick>
 8003610:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	4b3f      	ldr	r3, [pc, #252]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	f013 0f02 	tst.w	r3, #2
 800361a:	d121      	bne.n	8003660 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe ff4c 	bl	80024b8 <HAL_GetTick>
 8003620:	1b40      	subs	r0, r0, r5
 8003622:	2802      	cmp	r0, #2
 8003624:	d9f5      	bls.n	8003612 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003626:	2003      	movs	r0, #3
 8003628:	e12f      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4a39      	ldr	r2, [pc, #228]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 800362c:	6813      	ldr	r3, [r2, #0]
 800362e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003632:	6961      	ldr	r1, [r4, #20]
 8003634:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e7dc      	b.n	80035f6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800363c:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003642:	f7fe ff39 	bl	80024b8 <HAL_GetTick>
 8003646:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003648:	4b31      	ldr	r3, [pc, #196]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f013 0f02 	tst.w	r3, #2
 8003650:	d0d1      	beq.n	80035f6 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003652:	f7fe ff31 	bl	80024b8 <HAL_GetTick>
 8003656:	1b40      	subs	r0, r0, r5
 8003658:	2802      	cmp	r0, #2
 800365a:	d9f5      	bls.n	8003648 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800365c:	2003      	movs	r0, #3
 800365e:	e114      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003660:	2001      	movs	r0, #1
 8003662:	f7ff ff01 	bl	8003468 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	f013 0f04 	tst.w	r3, #4
 800366c:	f000 8096 	beq.w	800379c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003670:	4b27      	ldr	r3, [pc, #156]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003678:	d134      	bne.n	80036e4 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	4b25      	ldr	r3, [pc, #148]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003682:	61da      	str	r2, [r3, #28]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800368e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b21      	ldr	r3, [pc, #132]	@ (8003718 <HAL_RCC_OscConfig+0x284>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003698:	d026      	beq.n	80036e8 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369a:	68e3      	ldr	r3, [r4, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d03d      	beq.n	800371c <HAL_RCC_OscConfig+0x288>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d153      	bne.n	800374c <HAL_RCC_OscConfig+0x2b8>
 80036a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036a8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	621a      	str	r2, [r3, #32]
 80036b4:	6a1a      	ldr	r2, [r3, #32]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	621a      	str	r2, [r3, #32]
 80036bc:	e033      	b.n	8003726 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80036c6:	f7fe fef7 	bl	80024b8 <HAL_GetTick>
 80036ca:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	4b10      	ldr	r3, [pc, #64]	@ (8003710 <HAL_RCC_OscConfig+0x27c>)
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	f013 0f02 	tst.w	r3, #2
 80036d4:	d0c7      	beq.n	8003666 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d6:	f7fe feef 	bl	80024b8 <HAL_GetTick>
 80036da:	1b40      	subs	r0, r0, r5
 80036dc:	2802      	cmp	r0, #2
 80036de:	d9f5      	bls.n	80036cc <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80036e0:	2003      	movs	r0, #3
 80036e2:	e0d2      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80036e4:	2500      	movs	r5, #0
 80036e6:	e7d3      	b.n	8003690 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003718 <HAL_RCC_OscConfig+0x284>)
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80036f2:	f7fe fee1 	bl	80024b8 <HAL_GetTick>
 80036f6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b07      	ldr	r3, [pc, #28]	@ (8003718 <HAL_RCC_OscConfig+0x284>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003700:	d1cb      	bne.n	800369a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003702:	f7fe fed9 	bl	80024b8 <HAL_GetTick>
 8003706:	1b80      	subs	r0, r0, r6
 8003708:	2864      	cmp	r0, #100	@ 0x64
 800370a:	d9f5      	bls.n	80036f8 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 800370c:	2003      	movs	r0, #3
 800370e:	e0bc      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
 8003710:	40021000 	.word	0x40021000
 8003714:	42420000 	.word	0x42420000
 8003718:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371c:	4a5f      	ldr	r2, [pc, #380]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 800371e:	6a13      	ldr	r3, [r2, #32]
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003726:	68e3      	ldr	r3, [r4, #12]
 8003728:	b333      	cbz	r3, 8003778 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800372a:	f7fe fec5 	bl	80024b8 <HAL_GetTick>
 800372e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	4b5a      	ldr	r3, [pc, #360]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f013 0f02 	tst.w	r3, #2
 8003738:	d12f      	bne.n	800379a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fe febd 	bl	80024b8 <HAL_GetTick>
 800373e:	1b80      	subs	r0, r0, r6
 8003740:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003744:	4298      	cmp	r0, r3
 8003746:	d9f3      	bls.n	8003730 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8003748:	2003      	movs	r0, #3
 800374a:	e09e      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374c:	2b05      	cmp	r3, #5
 800374e:	d009      	beq.n	8003764 <HAL_RCC_OscConfig+0x2d0>
 8003750:	4b52      	ldr	r3, [pc, #328]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	621a      	str	r2, [r3, #32]
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	f022 0204 	bic.w	r2, r2, #4
 8003760:	621a      	str	r2, [r3, #32]
 8003762:	e7e0      	b.n	8003726 <HAL_RCC_OscConfig+0x292>
 8003764:	4b4d      	ldr	r3, [pc, #308]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	f042 0204 	orr.w	r2, r2, #4
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	621a      	str	r2, [r3, #32]
 8003776:	e7d6      	b.n	8003726 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8003778:	f7fe fe9e 	bl	80024b8 <HAL_GetTick>
 800377c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377e:	4b47      	ldr	r3, [pc, #284]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f013 0f02 	tst.w	r3, #2
 8003786:	d008      	beq.n	800379a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe fe96 	bl	80024b8 <HAL_GetTick>
 800378c:	1b80      	subs	r0, r0, r6
 800378e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003792:	4298      	cmp	r0, r3
 8003794:	d9f3      	bls.n	800377e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003796:	2003      	movs	r0, #3
 8003798:	e077      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800379a:	b9e5      	cbnz	r5, 80037d6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379c:	69e3      	ldr	r3, [r4, #28]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d072      	beq.n	8003888 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a2:	4a3e      	ldr	r2, [pc, #248]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 80037a4:	6852      	ldr	r2, [r2, #4]
 80037a6:	f002 020c 	and.w	r2, r2, #12
 80037aa:	2a08      	cmp	r2, #8
 80037ac:	d056      	beq.n	800385c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d017      	beq.n	80037e2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b3b      	ldr	r3, [pc, #236]	@ (80038a0 <HAL_RCC_OscConfig+0x40c>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80037b8:	f7fe fe7e 	bl	80024b8 <HAL_GetTick>
 80037bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037be:	4b37      	ldr	r3, [pc, #220]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80037c6:	d047      	beq.n	8003858 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fe fe76 	bl	80024b8 <HAL_GetTick>
 80037cc:	1b00      	subs	r0, r0, r4
 80037ce:	2802      	cmp	r0, #2
 80037d0:	d9f5      	bls.n	80037be <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80037d2:	2003      	movs	r0, #3
 80037d4:	e059      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4a31      	ldr	r2, [pc, #196]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 80037d8:	69d3      	ldr	r3, [r2, #28]
 80037da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037de:	61d3      	str	r3, [r2, #28]
 80037e0:	e7dc      	b.n	800379c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b2f      	ldr	r3, [pc, #188]	@ (80038a0 <HAL_RCC_OscConfig+0x40c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80037e8:	f7fe fe66 	bl	80024b8 <HAL_GetTick>
 80037ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80037f6:	d006      	beq.n	8003806 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe fe5e 	bl	80024b8 <HAL_GetTick>
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	2802      	cmp	r0, #2
 8003800:	d9f5      	bls.n	80037ee <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003802:	2003      	movs	r0, #3
 8003804:	e041      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003806:	6a23      	ldr	r3, [r4, #32]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800380c:	d01a      	beq.n	8003844 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380e:	4923      	ldr	r1, [pc, #140]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 8003810:	684b      	ldr	r3, [r1, #4]
 8003812:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8003816:	6a22      	ldr	r2, [r4, #32]
 8003818:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800381a:	4302      	orrs	r2, r0
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003820:	4b1f      	ldr	r3, [pc, #124]	@ (80038a0 <HAL_RCC_OscConfig+0x40c>)
 8003822:	2201      	movs	r2, #1
 8003824:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003826:	f7fe fe47 	bl	80024b8 <HAL_GetTick>
 800382a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800382c:	4b1b      	ldr	r3, [pc, #108]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003834:	d10e      	bne.n	8003854 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003836:	f7fe fe3f 	bl	80024b8 <HAL_GetTick>
 800383a:	1b00      	subs	r0, r0, r4
 800383c:	2802      	cmp	r0, #2
 800383e:	d9f5      	bls.n	800382c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003840:	2003      	movs	r0, #3
 8003842:	e022      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 8003846:	6853      	ldr	r3, [r2, #4]
 8003848:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800384c:	68a1      	ldr	r1, [r4, #8]
 800384e:	430b      	orrs	r3, r1
 8003850:	6053      	str	r3, [r2, #4]
 8003852:	e7dc      	b.n	800380e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003854:	2000      	movs	r0, #0
 8003856:	e018      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
 8003858:	2000      	movs	r0, #0
 800385a:	e016      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	2b01      	cmp	r3, #1
 800385e:	d016      	beq.n	800388e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <HAL_RCC_OscConfig+0x408>)
 8003862:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003864:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8003868:	6a22      	ldr	r2, [r4, #32]
 800386a:	4291      	cmp	r1, r2
 800386c:	d111      	bne.n	8003892 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800386e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003872:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	4293      	cmp	r3, r2
 8003876:	d10e      	bne.n	8003896 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003878:	2000      	movs	r0, #0
 800387a:	e006      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800387c:	2001      	movs	r0, #1
}
 800387e:	4770      	bx	lr
        return HAL_ERROR;
 8003880:	2001      	movs	r0, #1
 8003882:	e002      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8003888:	2000      	movs	r0, #0
}
 800388a:	b002      	add	sp, #8
 800388c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800388e:	2001      	movs	r0, #1
 8003890:	e7fb      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8003892:	2001      	movs	r0, #1
 8003894:	e7f9      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
 8003896:	2001      	movs	r0, #1
 8003898:	e7f7      	b.n	800388a <HAL_RCC_OscConfig+0x3f6>
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	42420000 	.word	0x42420000

080038a4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x40>)
 80038a6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80038a8:	f003 020c 	and.w	r2, r3, #12
 80038ac:	2a08      	cmp	r2, #8
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80038b0:	480d      	ldr	r0, [pc, #52]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80038b2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80038b8:	490c      	ldr	r1, [pc, #48]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x48>)
 80038ba:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038bc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80038c0:	d00b      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c2:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x40>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80038ca:	4a09      	ldr	r2, [pc, #36]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x4c>)
 80038cc:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ce:	4a06      	ldr	r2, [pc, #24]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x44>)
 80038d0:	fb02 f000 	mul.w	r0, r2, r0
 80038d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80038d8:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038da:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80038dc:	fb03 f000 	mul.w	r0, r3, r0
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	007a1200 	.word	0x007a1200
 80038ec:	08005658 	.word	0x08005658
 80038f0:	08005654 	.word	0x08005654
 80038f4:	003d0900 	.word	0x003d0900

080038f8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80038f8:	2800      	cmp	r0, #0
 80038fa:	f000 80a0 	beq.w	8003a3e <HAL_RCC_ClockConfig+0x146>
{
 80038fe:	b570      	push	{r4, r5, r6, lr}
 8003900:	460d      	mov	r5, r1
 8003902:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003904:	4b52      	ldr	r3, [pc, #328]	@ (8003a50 <HAL_RCC_ClockConfig+0x158>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	428b      	cmp	r3, r1
 800390e:	d20b      	bcs.n	8003928 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003910:	4a4f      	ldr	r2, [pc, #316]	@ (8003a50 <HAL_RCC_ClockConfig+0x158>)
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	f023 0307 	bic.w	r3, r3, #7
 8003918:	430b      	orrs	r3, r1
 800391a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	428b      	cmp	r3, r1
 8003924:	f040 808d 	bne.w	8003a42 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	f013 0f02 	tst.w	r3, #2
 800392e:	d017      	beq.n	8003960 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	f013 0f04 	tst.w	r3, #4
 8003934:	d004      	beq.n	8003940 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003936:	4a47      	ldr	r2, [pc, #284]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 8003938:	6853      	ldr	r3, [r2, #4]
 800393a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800393e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	f013 0f08 	tst.w	r3, #8
 8003946:	d004      	beq.n	8003952 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003948:	4a42      	ldr	r2, [pc, #264]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 800394a:	6853      	ldr	r3, [r2, #4]
 800394c:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003950:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003952:	4a40      	ldr	r2, [pc, #256]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 8003954:	6853      	ldr	r3, [r2, #4]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800395a:	68a1      	ldr	r1, [r4, #8]
 800395c:	430b      	orrs	r3, r1
 800395e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	f013 0f01 	tst.w	r3, #1
 8003966:	d031      	beq.n	80039cc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d020      	beq.n	80039b0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396e:	2b02      	cmp	r3, #2
 8003970:	d025      	beq.n	80039be <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4a38      	ldr	r2, [pc, #224]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	f012 0f02 	tst.w	r2, #2
 800397a:	d064      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397c:	4935      	ldr	r1, [pc, #212]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 800397e:	684a      	ldr	r2, [r1, #4]
 8003980:	f022 0203 	bic.w	r2, r2, #3
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003988:	f7fe fd96 	bl	80024b8 <HAL_GetTick>
 800398c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	4b31      	ldr	r3, [pc, #196]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	6862      	ldr	r2, [r4, #4]
 8003998:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800399c:	d016      	beq.n	80039cc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399e:	f7fe fd8b 	bl	80024b8 <HAL_GetTick>
 80039a2:	1b80      	subs	r0, r0, r6
 80039a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80039a8:	4298      	cmp	r0, r3
 80039aa:	d9f0      	bls.n	800398e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80039ac:	2003      	movs	r0, #3
 80039ae:	e045      	b.n	8003a3c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b0:	4a28      	ldr	r2, [pc, #160]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80039b8:	d1e0      	bne.n	800397c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80039ba:	2001      	movs	r0, #1
 80039bc:	e03e      	b.n	8003a3c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039be:	4a25      	ldr	r2, [pc, #148]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80039c6:	d1d9      	bne.n	800397c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80039c8:	2001      	movs	r0, #1
 80039ca:	e037      	b.n	8003a3c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b20      	ldr	r3, [pc, #128]	@ (8003a50 <HAL_RCC_ClockConfig+0x158>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	42ab      	cmp	r3, r5
 80039d6:	d90a      	bls.n	80039ee <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <HAL_RCC_ClockConfig+0x158>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	f023 0307 	bic.w	r3, r3, #7
 80039e0:	432b      	orrs	r3, r5
 80039e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	42ab      	cmp	r3, r5
 80039ec:	d12d      	bne.n	8003a4a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	f013 0f04 	tst.w	r3, #4
 80039f4:	d006      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f6:	4a17      	ldr	r2, [pc, #92]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 80039f8:	6853      	ldr	r3, [r2, #4]
 80039fa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80039fe:	68e1      	ldr	r1, [r4, #12]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f013 0f08 	tst.w	r3, #8
 8003a0a:	d007      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a0c:	4a11      	ldr	r2, [pc, #68]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 8003a0e:	6853      	ldr	r3, [r2, #4]
 8003a10:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003a14:	6921      	ldr	r1, [r4, #16]
 8003a16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a1a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a1c:	f7ff ff42 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003a20:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <HAL_RCC_ClockConfig+0x15c>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a28:	4a0b      	ldr	r2, [pc, #44]	@ (8003a58 <HAL_RCC_ClockConfig+0x160>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	40d8      	lsrs	r0, r3
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <HAL_RCC_ClockConfig+0x164>)
 8003a30:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003a32:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_ClockConfig+0x168>)
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	f7fe fcfb 	bl	8002430 <HAL_InitTick>
  return HAL_OK;
 8003a3a:	2000      	movs	r0, #0
}
 8003a3c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003a3e:	2001      	movs	r0, #1
}
 8003a40:	4770      	bx	lr
    return HAL_ERROR;
 8003a42:	2001      	movs	r0, #1
 8003a44:	e7fa      	b.n	8003a3c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003a46:	2001      	movs	r0, #1
 8003a48:	e7f8      	b.n	8003a3c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	e7f6      	b.n	8003a3c <HAL_RCC_ClockConfig+0x144>
 8003a4e:	bf00      	nop
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40021000 	.word	0x40021000
 8003a58:	08005644 	.word	0x08005644
 8003a5c:	200002ec 	.word	0x200002ec
 8003a60:	200002f4 	.word	0x200002f4

08003a64 <HAL_RCC_GetHCLKFreq>:
}
 8003a64:	4b01      	ldr	r3, [pc, #4]	@ (8003a6c <HAL_RCC_GetHCLKFreq+0x8>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	200002ec 	.word	0x200002ec

08003a70 <HAL_RCC_GetPCLK1Freq>:
{
 8003a70:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a72:	f7ff fff7 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a76:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a7e:	4a03      	ldr	r2, [pc, #12]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a80:	5cd3      	ldrb	r3, [r2, r3]
}
 8003a82:	40d8      	lsrs	r0, r3
 8003a84:	bd08      	pop	{r3, pc}
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	0800563c 	.word	0x0800563c

08003a90 <HAL_RCC_GetPCLK2Freq>:
{
 8003a90:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a92:	f7ff ffe7 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a96:	4b04      	ldr	r3, [pc, #16]	@ (8003aa8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a9e:	4a03      	ldr	r2, [pc, #12]	@ (8003aac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003aa2:	40d8      	lsrs	r0, r3
 8003aa4:	bd08      	pop	{r3, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	0800563c 	.word	0x0800563c

08003ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ab6:	6803      	ldr	r3, [r0, #0]
 8003ab8:	f013 0f01 	tst.w	r3, #1
 8003abc:	d036      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003abe:	4b3f      	ldr	r3, [pc, #252]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003ac6:	d149      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003ad0:	61da      	str	r2, [r3, #28]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003adc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b38      	ldr	r3, [pc, #224]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003ae6:	d03b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ae8:	4b34      	ldr	r3, [pc, #208]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aec:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003af0:	d013      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003af2:	6862      	ldr	r2, [r4, #4]
 8003af4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d00e      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4a2f      	ldr	r2, [pc, #188]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003afe:	6a13      	ldr	r3, [r2, #32]
 8003b00:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b04:	492f      	ldr	r1, [pc, #188]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003b06:	2601      	movs	r6, #1
 8003b08:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b0c:	2600      	movs	r6, #0
 8003b0e:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b12:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b14:	f013 0f01 	tst.w	r3, #1
 8003b18:	d136      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b1a:	4a28      	ldr	r2, [pc, #160]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003b1c:	6a13      	ldr	r3, [r2, #32]
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b22:	6861      	ldr	r1, [r4, #4]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	d13e      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	f013 0f02 	tst.w	r3, #2
 8003b32:	d006      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003b36:	6853      	ldr	r3, [r2, #4]
 8003b38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003b3c:	68a1      	ldr	r1, [r4, #8]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	f013 0f10 	tst.w	r3, #16
 8003b48:	d034      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003b4c:	6853      	ldr	r3, [r2, #4]
 8003b4e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003b52:	68e1      	ldr	r1, [r4, #12]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b58:	2000      	movs	r0, #0
 8003b5a:	e02c      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8003b5c:	2500      	movs	r5, #0
 8003b5e:	e7be      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b60:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b68:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b6a:	f7fe fca5 	bl	80024b8 <HAL_GetTick>
 8003b6e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	4b13      	ldr	r3, [pc, #76]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003b78:	d1b6      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fe fc9d 	bl	80024b8 <HAL_GetTick>
 8003b7e:	1b80      	subs	r0, r0, r6
 8003b80:	2864      	cmp	r0, #100	@ 0x64
 8003b82:	d9f5      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003b84:	2003      	movs	r0, #3
 8003b86:	e016      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8003b88:	f7fe fc96 	bl	80024b8 <HAL_GetTick>
 8003b8c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f013 0f02 	tst.w	r3, #2
 8003b96:	d1c0      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fe fc8e 	bl	80024b8 <HAL_GetTick>
 8003b9c:	1b80      	subs	r0, r0, r6
 8003b9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ba2:	4298      	cmp	r0, r3
 8003ba4:	d9f3      	bls.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8003ba6:	2003      	movs	r0, #3
 8003ba8:	e005      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003baa:	69d3      	ldr	r3, [r2, #28]
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	61d3      	str	r3, [r2, #28]
 8003bb2:	e7bb      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8003bb4:	2000      	movs	r0, #0
}
 8003bb6:	b002      	add	sp, #8
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	42420000 	.word	0x42420000

08003bc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bc8:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003bca:	2802      	cmp	r0, #2
 8003bcc:	d04e      	beq.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8003bce:	2810      	cmp	r0, #16
 8003bd0:	d003      	beq.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8003bd2:	2801      	cmp	r0, #1
 8003bd4:	d028      	beq.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003bd6:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003bd8:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8003bda:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003bdc:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8003be4:	d0f8      	beq.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003be6:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003bea:	4928      	ldr	r1, [pc, #160]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003bec:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bee:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf4:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003bfc:	4a24      	ldr	r2, [pc, #144]	@ (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8003bfe:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c00:	4b24      	ldr	r3, [pc, #144]	@ (8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8003c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c06:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003c12:	d1e1      	bne.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8003c14:	0040      	lsls	r0, r0, #1
 8003c16:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8003c18:	fba3 3000 	umull	r3, r0, r3, r0
 8003c1c:	0840      	lsrs	r0, r0, #1
 8003c1e:	e7db      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c20:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8003c22:	fb03 f000 	mul.w	r0, r3, r0
 8003c26:	e7f0      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8003c28:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c2c:	f240 3202 	movw	r2, #770	@ 0x302
 8003c30:	401a      	ands	r2, r3
 8003c32:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8003c36:	d024      	beq.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c40:	d004      	beq.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c46:	d009      	beq.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e7c5      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003c4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c50:	f012 0f02 	tst.w	r2, #2
 8003c54:	d0f5      	beq.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8003c56:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8003c5a:	e7bd      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8003c64:	d0b8      	beq.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 8003c66:	f24f 4024 	movw	r0, #62500	@ 0xf424
  return (frequency);
 8003c6a:	e7b5      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c6c:	f7ff ff10 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 8003c70:	4b05      	ldr	r3, [pc, #20]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003c78:	3301      	adds	r3, #1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003c80:	e7aa      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 8003c82:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003c86:	e7a7      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	0800566c 	.word	0x0800566c
 8003c90:	08005668 	.word	0x08005668
 8003c94:	007a1200 	.word	0x007a1200
 8003c98:	aaaaaaab 	.word	0xaaaaaaab
 8003c9c:	003d0900 	.word	0x003d0900

08003ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca4:	6a03      	ldr	r3, [r0, #32]
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cae:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb0:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb4:	680c      	ldr	r4, [r1, #0]
 8003cb6:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cb8:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cbc:	688b      	ldr	r3, [r1, #8]
 8003cbe:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf0 <TIM_OC1_SetConfig+0x50>)
 8003cc2:	4290      	cmp	r0, r2
 8003cc4:	d006      	beq.n	8003cd4 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc8:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cca:	684a      	ldr	r2, [r1, #4]
 8003ccc:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	6203      	str	r3, [r0, #32]
}
 8003cd0:	bc30      	pop	{r4, r5}
 8003cd2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cd4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003cd8:	68ca      	ldr	r2, [r1, #12]
 8003cda:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cdc:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ce0:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003ce4:	694a      	ldr	r2, [r1, #20]
 8003ce6:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ce8:	698d      	ldr	r5, [r1, #24]
 8003cea:	4315      	orrs	r5, r2
 8003cec:	e7eb      	b.n	8003cc6 <TIM_OC1_SetConfig+0x26>
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00

08003cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cf8:	6a02      	ldr	r2, [r0, #32]
 8003cfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cfe:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d02:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d04:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d08:	680d      	ldr	r5, [r1, #0]
 8003d0a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d10:	688a      	ldr	r2, [r1, #8]
 8003d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d16:	4a0d      	ldr	r2, [pc, #52]	@ (8003d4c <TIM_OC3_SetConfig+0x58>)
 8003d18:	4290      	cmp	r0, r2
 8003d1a:	d006      	beq.n	8003d2a <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d1e:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d20:	684a      	ldr	r2, [r1, #4]
 8003d22:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d24:	6203      	str	r3, [r0, #32]
}
 8003d26:	bc30      	pop	{r4, r5}
 8003d28:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d2e:	68ca      	ldr	r2, [r1, #12]
 8003d30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d38:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d3c:	694a      	ldr	r2, [r1, #20]
 8003d3e:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d42:	698a      	ldr	r2, [r1, #24]
 8003d44:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003d48:	e7e8      	b.n	8003d1c <TIM_OC3_SetConfig+0x28>
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00

08003d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d50:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d54:	6a02      	ldr	r2, [r0, #32]
 8003d56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d5a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d60:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d64:	680d      	ldr	r5, [r1, #0]
 8003d66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d6e:	688d      	ldr	r5, [r1, #8]
 8003d70:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d74:	4d07      	ldr	r5, [pc, #28]	@ (8003d94 <TIM_OC4_SetConfig+0x44>)
 8003d76:	42a8      	cmp	r0, r5
 8003d78:	d006      	beq.n	8003d88 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d7e:	684a      	ldr	r2, [r1, #4]
 8003d80:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d82:	6203      	str	r3, [r0, #32]
}
 8003d84:	bc30      	pop	{r4, r5}
 8003d86:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d88:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d8c:	694d      	ldr	r5, [r1, #20]
 8003d8e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003d92:	e7f2      	b.n	8003d7a <TIM_OC4_SetConfig+0x2a>
 8003d94:	40012c00 	.word	0x40012c00

08003d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d9a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9c:	6a04      	ldr	r4, [r0, #32]
 8003d9e:	f024 0401 	bic.w	r4, r4, #1
 8003da2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da6:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003daa:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003db2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003db6:	6203      	str	r3, [r0, #32]
}
 8003db8:	bc10      	pop	{r4}
 8003dba:	4770      	bx	lr

08003dbc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dbc:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dbe:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc0:	6a04      	ldr	r4, [r0, #32]
 8003dc2:	f024 0410 	bic.w	r4, r4, #16
 8003dc6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc8:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003dca:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003dce:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dd2:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003dd6:	031b      	lsls	r3, r3, #12
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dde:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003de2:	0109      	lsls	r1, r1, #4
 8003de4:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8003de8:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dea:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003dec:	6201      	str	r1, [r0, #32]
}
 8003dee:	bc30      	pop	{r4, r5}
 8003df0:	4770      	bx	lr

08003df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003df4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df6:	6a04      	ldr	r4, [r0, #32]
 8003df8:	f024 0410 	bic.w	r4, r4, #16
 8003dfc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfe:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e00:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e04:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e0c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e10:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e12:	6203      	str	r3, [r0, #32]
}
 8003e14:	bc10      	pop	{r4}
 8003e16:	4770      	bx	lr

08003e18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e18:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e1a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e1c:	6a04      	ldr	r4, [r0, #32]
 8003e1e:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8003e22:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e24:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e26:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003e2a:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e2e:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003e3a:	f425 7500 	bic.w	r5, r5, #512	@ 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003e3e:	0209      	lsls	r1, r1, #8
 8003e40:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8003e44:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e46:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003e48:	6201      	str	r1, [r0, #32]
}
 8003e4a:	bc30      	pop	{r4, r5}
 8003e4c:	4770      	bx	lr

08003e4e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e4e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e50:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e52:	6a04      	ldr	r4, [r0, #32]
 8003e54:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8003e58:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e5a:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e5c:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e60:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e64:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003e70:	f425 5500 	bic.w	r5, r5, #8192	@ 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003e74:	0309      	lsls	r1, r1, #12
 8003e76:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8003e7a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e7c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003e7e:	6201      	str	r1, [r0, #32]
}
 8003e80:	bc30      	pop	{r4, r5}
 8003e82:	4770      	bx	lr

08003e84 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e84:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e90:	6083      	str	r3, [r0, #8]
}
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003e94:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d127      	bne.n	8003eee <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea4:	6802      	ldr	r2, [r0, #0]
 8003ea6:	68d3      	ldr	r3, [r2, #12]
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eae:	6803      	ldr	r3, [r0, #0]
 8003eb0:	4a11      	ldr	r2, [pc, #68]	@ (8003ef8 <HAL_TIM_Base_Start_IT+0x64>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d010      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x44>
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eba:	d00d      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x44>
 8003ebc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d009      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x44>
 8003ec4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d005      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	2a06      	cmp	r2, #6
 8003ee0:	d007      	beq.n	8003ef2 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003eea:	2000      	movs	r0, #0
 8003eec:	4770      	bx	lr
    return HAL_ERROR;
 8003eee:	2001      	movs	r0, #1
 8003ef0:	4770      	bx	lr
  return HAL_OK;
 8003ef2:	2000      	movs	r0, #0
}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40012c00 	.word	0x40012c00

08003efc <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003efc:	4770      	bx	lr

08003efe <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIM_TriggerCallback>:
}
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_IRQHandler>:
{
 8003f02:	b570      	push	{r4, r5, r6, lr}
 8003f04:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f0a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f0c:	f015 0f02 	tst.w	r5, #2
 8003f10:	d010      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f12:	f016 0f02 	tst.w	r6, #2
 8003f16:	d00d      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f18:	f06f 0202 	mvn.w	r2, #2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f22:	6803      	ldr	r3, [r0, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f013 0f03 	tst.w	r3, #3
 8003f2a:	d05e      	beq.n	8003fea <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f2c:	f7fd fca6 	bl	800187c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f30:	2300      	movs	r3, #0
 8003f32:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f34:	f015 0f04 	tst.w	r5, #4
 8003f38:	d012      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f3a:	f016 0f04 	tst.w	r6, #4
 8003f3e:	d00f      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	f06f 0204 	mvn.w	r2, #4
 8003f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003f54:	d04f      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	4620      	mov	r0, r4
 8003f58:	f7fd fc90 	bl	800187c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f60:	f015 0f08 	tst.w	r5, #8
 8003f64:	d012      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f66:	f016 0f08 	tst.w	r6, #8
 8003f6a:	d00f      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f06f 0208 	mvn.w	r2, #8
 8003f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f74:	2304      	movs	r3, #4
 8003f76:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f013 0f03 	tst.w	r3, #3
 8003f80:	d040      	beq.n	8004004 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7fd fc7a 	bl	800187c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f8c:	f015 0f10 	tst.w	r5, #16
 8003f90:	d012      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f92:	f016 0f10 	tst.w	r6, #16
 8003f96:	d00f      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f06f 0210 	mvn.w	r2, #16
 8003f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003fac:	d031      	beq.n	8004012 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7fd fc64 	bl	800187c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fb8:	f015 0f01 	tst.w	r5, #1
 8003fbc:	d002      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fbe:	f016 0f01 	tst.w	r6, #1
 8003fc2:	d12d      	bne.n	8004020 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fc4:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003fc8:	d002      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fca:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003fce:	d12f      	bne.n	8004030 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fd0:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8003fd4:	d002      	beq.n	8003fdc <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fd6:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003fda:	d131      	bne.n	8004040 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fdc:	f015 0f20 	tst.w	r5, #32
 8003fe0:	d002      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fe2:	f016 0f20 	tst.w	r6, #32
 8003fe6:	d133      	bne.n	8004050 <HAL_TIM_IRQHandler+0x14e>
}
 8003fe8:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	f7ff ff87 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff ff85 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
 8003ff4:	e79c      	b.n	8003f30 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7ff ff80 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff ff7e 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
 8004002:	e7ab      	b.n	8003f5c <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004004:	4620      	mov	r0, r4
 8004006:	f7ff ff79 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400a:	4620      	mov	r0, r4
 800400c:	f7ff ff77 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
 8004010:	e7ba      	b.n	8003f88 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	4620      	mov	r0, r4
 8004014:	f7ff ff72 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	4620      	mov	r0, r4
 800401a:	f7ff ff70 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
 800401e:	e7c9      	b.n	8003fb4 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f06f 0201 	mvn.w	r2, #1
 8004026:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004028:	4620      	mov	r0, r4
 800402a:	f7fd fc6b 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
 800402e:	e7c9      	b.n	8003fc4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004036:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004038:	4620      	mov	r0, r4
 800403a:	f000 fc0d 	bl	8004858 <HAL_TIMEx_BreakCallback>
 800403e:	e7c7      	b.n	8003fd0 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004046:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff ff59 	bl	8003f00 <HAL_TIM_TriggerCallback>
 800404e:	e7c5      	b.n	8003fdc <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	f06f 0220 	mvn.w	r2, #32
 8004056:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004058:	4620      	mov	r0, r4
 800405a:	f000 fbfc 	bl	8004856 <HAL_TIMEx_CommutCallback>
}
 800405e:	e7c3      	b.n	8003fe8 <HAL_TIM_IRQHandler+0xe6>

08004060 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004060:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004062:	4a1f      	ldr	r2, [pc, #124]	@ (80040e0 <TIM_Base_SetConfig+0x80>)
 8004064:	4290      	cmp	r0, r2
 8004066:	d00a      	beq.n	800407e <TIM_Base_SetConfig+0x1e>
 8004068:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0x1e>
 800406e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004072:	4290      	cmp	r0, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0x1e>
 8004076:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800407a:	4290      	cmp	r0, r2
 800407c:	d103      	bne.n	8004086 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800407e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004082:	684a      	ldr	r2, [r1, #4]
 8004084:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004086:	4a16      	ldr	r2, [pc, #88]	@ (80040e0 <TIM_Base_SetConfig+0x80>)
 8004088:	4290      	cmp	r0, r2
 800408a:	d00a      	beq.n	80040a2 <TIM_Base_SetConfig+0x42>
 800408c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0x42>
 8004092:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004096:	4290      	cmp	r0, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0x42>
 800409a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800409e:	4290      	cmp	r0, r2
 80040a0:	d103      	bne.n	80040aa <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a6:	68ca      	ldr	r2, [r1, #12]
 80040a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ae:	694a      	ldr	r2, [r1, #20]
 80040b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80040b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b4:	688b      	ldr	r3, [r1, #8]
 80040b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040b8:	680b      	ldr	r3, [r1, #0]
 80040ba:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040bc:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <TIM_Base_SetConfig+0x80>)
 80040be:	4298      	cmp	r0, r3
 80040c0:	d00a      	beq.n	80040d8 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 80040c2:	2301      	movs	r3, #1
 80040c4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040c6:	6903      	ldr	r3, [r0, #16]
 80040c8:	f013 0f01 	tst.w	r3, #1
 80040cc:	d003      	beq.n	80040d6 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ce:	6903      	ldr	r3, [r0, #16]
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6103      	str	r3, [r0, #16]
}
 80040d6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80040d8:	690b      	ldr	r3, [r1, #16]
 80040da:	6303      	str	r3, [r0, #48]	@ 0x30
 80040dc:	e7f1      	b.n	80040c2 <TIM_Base_SetConfig+0x62>
 80040de:	bf00      	nop
 80040e0:	40012c00 	.word	0x40012c00

080040e4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80040e4:	b340      	cbz	r0, 8004138 <HAL_TIM_Base_Init+0x54>
{
 80040e6:	b510      	push	{r4, lr}
 80040e8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80040ea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80040ee:	b1f3      	cbz	r3, 800412e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	2302      	movs	r3, #2
 80040f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f6:	4621      	mov	r1, r4
 80040f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80040fc:	f7ff ffb0 	bl	8004060 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004100:	2301      	movs	r3, #1
 8004102:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800410a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800410e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004112:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004116:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800411a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800411e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004122:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004126:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800412a:	2000      	movs	r0, #0
}
 800412c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800412e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004132:	f7fe f8b3 	bl	800229c <HAL_TIM_Base_MspInit>
 8004136:	e7db      	b.n	80040f0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004138:	2001      	movs	r0, #1
}
 800413a:	4770      	bx	lr

0800413c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800413c:	b340      	cbz	r0, 8004190 <HAL_TIM_PWM_Init+0x54>
{
 800413e:	b510      	push	{r4, lr}
 8004140:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004142:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004146:	b1f3      	cbz	r3, 8004186 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	2302      	movs	r3, #2
 800414a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414e:	4621      	mov	r1, r4
 8004150:	f851 0b04 	ldr.w	r0, [r1], #4
 8004154:	f7ff ff84 	bl	8004060 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	2301      	movs	r3, #1
 800415a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004162:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004166:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800416a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004176:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800417a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800417e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004182:	2000      	movs	r0, #0
}
 8004184:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004186:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800418a:	f7fe f83b 	bl	8002204 <HAL_TIM_PWM_MspInit>
 800418e:	e7db      	b.n	8004148 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004190:	2001      	movs	r0, #1
}
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8004194:	b340      	cbz	r0, 80041e8 <HAL_TIM_IC_Init+0x54>
{
 8004196:	b510      	push	{r4, lr}
 8004198:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800419a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800419e:	b1f3      	cbz	r3, 80041de <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a6:	4621      	mov	r1, r4
 80041a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80041ac:	f7ff ff58 	bl	8004060 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80041ba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80041be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80041c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80041d2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80041d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80041da:	2000      	movs	r0, #0
}
 80041dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80041de:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 80041e2:	f7fe f825 	bl	8002230 <HAL_TIM_IC_MspInit>
 80041e6:	e7db      	b.n	80041a0 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 80041e8:	2001      	movs	r0, #1
}
 80041ea:	4770      	bx	lr

080041ec <TIM_OC2_SetConfig>:
{
 80041ec:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80041ee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f0:	6a02      	ldr	r2, [r0, #32]
 80041f2:	f022 0210 	bic.w	r2, r2, #16
 80041f6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80041f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80041fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041fc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	680d      	ldr	r5, [r1, #0]
 8004202:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004206:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800420a:	688d      	ldr	r5, [r1, #8]
 800420c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004210:	4d0c      	ldr	r5, [pc, #48]	@ (8004244 <TIM_OC2_SetConfig+0x58>)
 8004212:	42a8      	cmp	r0, r5
 8004214:	d006      	beq.n	8004224 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8004216:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004218:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800421a:	684a      	ldr	r2, [r1, #4]
 800421c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800421e:	6203      	str	r3, [r0, #32]
}
 8004220:	bc30      	pop	{r4, r5}
 8004222:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004228:	68cd      	ldr	r5, [r1, #12]
 800422a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800422e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004232:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004236:	694d      	ldr	r5, [r1, #20]
 8004238:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800423c:	698d      	ldr	r5, [r1, #24]
 800423e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004242:	e7e8      	b.n	8004216 <TIM_OC2_SetConfig+0x2a>
 8004244:	40012c00 	.word	0x40012c00

08004248 <HAL_TIM_PWM_ConfigChannel>:
{
 8004248:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800424a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d066      	beq.n	8004320 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004252:	4604      	mov	r4, r0
 8004254:	460d      	mov	r5, r1
 8004256:	2301      	movs	r3, #1
 8004258:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800425c:	2a0c      	cmp	r2, #12
 800425e:	d85a      	bhi.n	8004316 <HAL_TIM_PWM_ConfigChannel+0xce>
 8004260:	e8df f002 	tbb	[pc, r2]
 8004264:	59595907 	.word	0x59595907
 8004268:	5959591b 	.word	0x5959591b
 800426c:	59595930 	.word	0x59595930
 8004270:	44          	.byte	0x44
 8004271:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004272:	6800      	ldr	r0, [r0, #0]
 8004274:	f7ff fd14 	bl	8003ca0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	6993      	ldr	r3, [r2, #24]
 800427c:	f043 0308 	orr.w	r3, r3, #8
 8004280:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	6993      	ldr	r3, [r2, #24]
 8004286:	f023 0304 	bic.w	r3, r3, #4
 800428a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800428c:	6822      	ldr	r2, [r4, #0]
 800428e:	6993      	ldr	r3, [r2, #24]
 8004290:	6929      	ldr	r1, [r5, #16]
 8004292:	430b      	orrs	r3, r1
 8004294:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004296:	2000      	movs	r0, #0
      break;
 8004298:	e03e      	b.n	8004318 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	f7ff ffa6 	bl	80041ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042a0:	6822      	ldr	r2, [r4, #0]
 80042a2:	6993      	ldr	r3, [r2, #24]
 80042a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042a8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	6993      	ldr	r3, [r2, #24]
 80042ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042b2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	6993      	ldr	r3, [r2, #24]
 80042b8:	6929      	ldr	r1, [r5, #16]
 80042ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80042be:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80042c0:	2000      	movs	r0, #0
      break;
 80042c2:	e029      	b.n	8004318 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042c4:	6800      	ldr	r0, [r0, #0]
 80042c6:	f7ff fd15 	bl	8003cf4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	69d3      	ldr	r3, [r2, #28]
 80042ce:	f043 0308 	orr.w	r3, r3, #8
 80042d2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	69d3      	ldr	r3, [r2, #28]
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042de:	6822      	ldr	r2, [r4, #0]
 80042e0:	69d3      	ldr	r3, [r2, #28]
 80042e2:	6929      	ldr	r1, [r5, #16]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80042e8:	2000      	movs	r0, #0
      break;
 80042ea:	e015      	b.n	8004318 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ec:	6800      	ldr	r0, [r0, #0]
 80042ee:	f7ff fd2f 	bl	8003d50 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	69d3      	ldr	r3, [r2, #28]
 80042f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042fa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	69d3      	ldr	r3, [r2, #28]
 8004300:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004304:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	69d3      	ldr	r3, [r2, #28]
 800430a:	6929      	ldr	r1, [r5, #16]
 800430c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004310:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2000      	movs	r0, #0
      break;
 8004314:	e000      	b.n	8004318 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8004316:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004318:	2300      	movs	r3, #0
 800431a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800431e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004320:	2002      	movs	r0, #2
 8004322:	e7fc      	b.n	800431e <HAL_TIM_PWM_ConfigChannel+0xd6>

08004324 <TIM_TI1_SetConfig>:
{
 8004324:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8004326:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004328:	6a04      	ldr	r4, [r0, #32]
 800432a:	f024 0401 	bic.w	r4, r4, #1
 800432e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004330:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004332:	4e11      	ldr	r6, [pc, #68]	@ (8004378 <TIM_TI1_SetConfig+0x54>)
 8004334:	42b0      	cmp	r0, r6
 8004336:	d00d      	beq.n	8004354 <TIM_TI1_SetConfig+0x30>
 8004338:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800433c:	d00a      	beq.n	8004354 <TIM_TI1_SetConfig+0x30>
 800433e:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8004342:	42b0      	cmp	r0, r6
 8004344:	d006      	beq.n	8004354 <TIM_TI1_SetConfig+0x30>
 8004346:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800434a:	42b0      	cmp	r0, r6
 800434c:	d002      	beq.n	8004354 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800434e:	f044 0201 	orr.w	r2, r4, #1
 8004352:	e002      	b.n	800435a <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004354:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004358:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	b2db      	uxtb	r3, r3
 8004362:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004364:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004368:	f001 010a 	and.w	r1, r1, #10
 800436c:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800436e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004370:	6201      	str	r1, [r0, #32]
}
 8004372:	bc70      	pop	{r4, r5, r6}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00

0800437c <HAL_TIM_IC_ConfigChannel>:
{
 800437c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800437e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d05a      	beq.n	800443c <HAL_TIM_IC_ConfigChannel+0xc0>
 8004386:	4604      	mov	r4, r0
 8004388:	460d      	mov	r5, r1
 800438a:	2301      	movs	r3, #1
 800438c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8004390:	b152      	cbz	r2, 80043a8 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8004392:	2a04      	cmp	r2, #4
 8004394:	d01a      	beq.n	80043cc <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8004396:	2a08      	cmp	r2, #8
 8004398:	d02b      	beq.n	80043f2 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 800439a:	2a0c      	cmp	r2, #12
 800439c:	d03b      	beq.n	8004416 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 800439e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80043a0:	2300      	movs	r3, #0
 80043a2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80043a8:	68cb      	ldr	r3, [r1, #12]
 80043aa:	684a      	ldr	r2, [r1, #4]
 80043ac:	6809      	ldr	r1, [r1, #0]
 80043ae:	6800      	ldr	r0, [r0, #0]
 80043b0:	f7ff ffb8 	bl	8004324 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	6993      	ldr	r3, [r2, #24]
 80043b8:	f023 030c 	bic.w	r3, r3, #12
 80043bc:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	6993      	ldr	r3, [r2, #24]
 80043c2:	68a9      	ldr	r1, [r5, #8]
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2000      	movs	r0, #0
 80043ca:	e7e9      	b.n	80043a0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 80043cc:	68cb      	ldr	r3, [r1, #12]
 80043ce:	684a      	ldr	r2, [r1, #4]
 80043d0:	6809      	ldr	r1, [r1, #0]
 80043d2:	6800      	ldr	r0, [r0, #0]
 80043d4:	f7ff fcf2 	bl	8003dbc <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	6993      	ldr	r3, [r2, #24]
 80043dc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80043e0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043e2:	6822      	ldr	r2, [r4, #0]
 80043e4:	6993      	ldr	r3, [r2, #24]
 80043e6:	68a9      	ldr	r1, [r5, #8]
 80043e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80043ec:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80043ee:	2000      	movs	r0, #0
 80043f0:	e7d6      	b.n	80043a0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 80043f2:	68cb      	ldr	r3, [r1, #12]
 80043f4:	684a      	ldr	r2, [r1, #4]
 80043f6:	6809      	ldr	r1, [r1, #0]
 80043f8:	6800      	ldr	r0, [r0, #0]
 80043fa:	f7ff fd0d 	bl	8003e18 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	69d3      	ldr	r3, [r2, #28]
 8004402:	f023 030c 	bic.w	r3, r3, #12
 8004406:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	69d3      	ldr	r3, [r2, #28]
 800440c:	68a9      	ldr	r1, [r5, #8]
 800440e:	430b      	orrs	r3, r1
 8004410:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2000      	movs	r0, #0
 8004414:	e7c4      	b.n	80043a0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8004416:	68cb      	ldr	r3, [r1, #12]
 8004418:	684a      	ldr	r2, [r1, #4]
 800441a:	6809      	ldr	r1, [r1, #0]
 800441c:	6800      	ldr	r0, [r0, #0]
 800441e:	f7ff fd16 	bl	8003e4e <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004422:	6822      	ldr	r2, [r4, #0]
 8004424:	69d3      	ldr	r3, [r2, #28]
 8004426:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800442a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800442c:	6822      	ldr	r2, [r4, #0]
 800442e:	69d3      	ldr	r3, [r2, #28]
 8004430:	68a9      	ldr	r1, [r5, #8]
 8004432:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004436:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2000      	movs	r0, #0
 800443a:	e7b1      	b.n	80043a0 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 800443c:	2002      	movs	r0, #2
 800443e:	e7b2      	b.n	80043a6 <HAL_TIM_IC_ConfigChannel+0x2a>

08004440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004440:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004442:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004444:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004448:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800444c:	430a      	orrs	r2, r1
 800444e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004452:	6082      	str	r2, [r0, #8]
}
 8004454:	bc10      	pop	{r4}
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004458:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d078      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0xfa>
{
 8004460:	b510      	push	{r4, lr}
 8004462:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004464:	2301      	movs	r3, #1
 8004466:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800446a:	2302      	movs	r3, #2
 800446c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004470:	6802      	ldr	r2, [r0, #0]
 8004472:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004474:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004478:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800447c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800447e:	680b      	ldr	r3, [r1, #0]
 8004480:	2b60      	cmp	r3, #96	@ 0x60
 8004482:	d04c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xc6>
 8004484:	d829      	bhi.n	80044da <HAL_TIM_ConfigClockSource+0x82>
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d054      	beq.n	8004534 <HAL_TIM_ConfigClockSource+0xdc>
 800448a:	d90c      	bls.n	80044a6 <HAL_TIM_ConfigClockSource+0x4e>
 800448c:	2b50      	cmp	r3, #80	@ 0x50
 800448e:	d122      	bne.n	80044d6 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004490:	68ca      	ldr	r2, [r1, #12]
 8004492:	6849      	ldr	r1, [r1, #4]
 8004494:	6800      	ldr	r0, [r0, #0]
 8004496:	f7ff fc7f 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800449a:	2150      	movs	r1, #80	@ 0x50
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	f7ff fcf1 	bl	8003e84 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2000      	movs	r0, #0
      break;
 80044a4:	e005      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d00d      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x6e>
 80044aa:	d909      	bls.n	80044c0 <HAL_TIM_ConfigClockSource+0x68>
 80044ac:	2b30      	cmp	r3, #48	@ 0x30
 80044ae:	d00a      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80044b0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80044b8:	2300      	movs	r3, #0
 80044ba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80044be:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80044c0:	b10b      	cbz	r3, 80044c6 <HAL_TIM_ConfigClockSource+0x6e>
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d105      	bne.n	80044d2 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044c6:	4619      	mov	r1, r3
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	f7ff fcdb 	bl	8003e84 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2000      	movs	r0, #0
      break;
 80044d0:	e7ef      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
 80044d4:	e7ed      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
 80044d6:	2001      	movs	r0, #1
 80044d8:	e7eb      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044de:	d034      	beq.n	800454a <HAL_TIM_ConfigClockSource+0xf2>
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e4:	d10c      	bne.n	8004500 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80044e6:	68cb      	ldr	r3, [r1, #12]
 80044e8:	684a      	ldr	r2, [r1, #4]
 80044ea:	6889      	ldr	r1, [r1, #8]
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f7ff ffa7 	bl	8004440 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	6893      	ldr	r3, [r2, #8]
 80044f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044fa:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044fc:	2000      	movs	r0, #0
      break;
 80044fe:	e7d8      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004500:	2b70      	cmp	r3, #112	@ 0x70
 8004502:	d124      	bne.n	800454e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004504:	68cb      	ldr	r3, [r1, #12]
 8004506:	684a      	ldr	r2, [r1, #4]
 8004508:	6889      	ldr	r1, [r1, #8]
 800450a:	6800      	ldr	r0, [r0, #0]
 800450c:	f7ff ff98 	bl	8004440 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004510:	6822      	ldr	r2, [r4, #0]
 8004512:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004514:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004518:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800451a:	2000      	movs	r0, #0
      break;
 800451c:	e7c9      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800451e:	68ca      	ldr	r2, [r1, #12]
 8004520:	6849      	ldr	r1, [r1, #4]
 8004522:	6800      	ldr	r0, [r0, #0]
 8004524:	f7ff fc65 	bl	8003df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004528:	2160      	movs	r1, #96	@ 0x60
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	f7ff fcaa 	bl	8003e84 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2000      	movs	r0, #0
      break;
 8004532:	e7be      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004534:	68ca      	ldr	r2, [r1, #12]
 8004536:	6849      	ldr	r1, [r1, #4]
 8004538:	6800      	ldr	r0, [r0, #0]
 800453a:	f7ff fc2d 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800453e:	2140      	movs	r1, #64	@ 0x40
 8004540:	6820      	ldr	r0, [r4, #0]
 8004542:	f7ff fc9f 	bl	8003e84 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2000      	movs	r0, #0
      break;
 8004548:	e7b3      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800454a:	2000      	movs	r0, #0
 800454c:	e7b1      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800454e:	2001      	movs	r0, #1
 8004550:	e7af      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004552:	2002      	movs	r0, #2
}
 8004554:	4770      	bx	lr

08004556 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004556:	f001 011f 	and.w	r1, r1, #31
 800455a:	f04f 0c01 	mov.w	ip, #1
 800455e:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004562:	6a03      	ldr	r3, [r0, #32]
 8004564:	ea23 030c 	bic.w	r3, r3, ip
 8004568:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800456a:	6a03      	ldr	r3, [r0, #32]
 800456c:	408a      	lsls	r2, r1
 800456e:	4313      	orrs	r3, r2
 8004570:	6203      	str	r3, [r0, #32]
}
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_PWM_Start>:
{
 8004574:	b510      	push	{r4, lr}
 8004576:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004578:	4608      	mov	r0, r1
 800457a:	bb51      	cbnz	r1, 80045d2 <HAL_TIM_PWM_Start+0x5e>
 800457c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	bf18      	it	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d15b      	bne.n	8004644 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800458c:	2800      	cmp	r0, #0
 800458e:	d139      	bne.n	8004604 <HAL_TIM_PWM_Start+0x90>
 8004590:	2302      	movs	r3, #2
 8004592:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004596:	2201      	movs	r2, #1
 8004598:	4601      	mov	r1, r0
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	f7ff ffdb 	bl	8004556 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	4a2a      	ldr	r2, [pc, #168]	@ (800464c <HAL_TIM_PWM_Start+0xd8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d03d      	beq.n	8004624 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	4a28      	ldr	r2, [pc, #160]	@ (800464c <HAL_TIM_PWM_Start+0xd8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d03e      	beq.n	800462e <HAL_TIM_PWM_Start+0xba>
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b4:	d03b      	beq.n	800462e <HAL_TIM_PWM_Start+0xba>
 80045b6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d037      	beq.n	800462e <HAL_TIM_PWM_Start+0xba>
 80045be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d033      	beq.n	800462e <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80045ce:	2000      	movs	r0, #0
 80045d0:	e039      	b.n	8004646 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045d2:	2904      	cmp	r1, #4
 80045d4:	d008      	beq.n	80045e8 <HAL_TIM_PWM_Start+0x74>
 80045d6:	2908      	cmp	r1, #8
 80045d8:	d00d      	beq.n	80045f6 <HAL_TIM_PWM_Start+0x82>
 80045da:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	bf18      	it	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	e7cf      	b.n	8004588 <HAL_TIM_PWM_Start+0x14>
 80045e8:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	bf18      	it	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	e7c8      	b.n	8004588 <HAL_TIM_PWM_Start+0x14>
 80045f6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	bf18      	it	ne
 8004600:	2301      	movne	r3, #1
 8004602:	e7c1      	b.n	8004588 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004604:	2804      	cmp	r0, #4
 8004606:	d005      	beq.n	8004614 <HAL_TIM_PWM_Start+0xa0>
 8004608:	2808      	cmp	r0, #8
 800460a:	d007      	beq.n	800461c <HAL_TIM_PWM_Start+0xa8>
 800460c:	2302      	movs	r3, #2
 800460e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004612:	e7c0      	b.n	8004596 <HAL_TIM_PWM_Start+0x22>
 8004614:	2302      	movs	r3, #2
 8004616:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800461a:	e7bc      	b.n	8004596 <HAL_TIM_PWM_Start+0x22>
 800461c:	2302      	movs	r3, #2
 800461e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004622:	e7b8      	b.n	8004596 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8004624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004626:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800462a:	645a      	str	r2, [r3, #68]	@ 0x44
 800462c:	e7bc      	b.n	80045a8 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004634:	2a06      	cmp	r2, #6
 8004636:	d007      	beq.n	8004648 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004640:	2000      	movs	r0, #0
 8004642:	e000      	b.n	8004646 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8004644:	2001      	movs	r0, #1
}
 8004646:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004648:	2000      	movs	r0, #0
 800464a:	e7fc      	b.n	8004646 <HAL_TIM_PWM_Start+0xd2>
 800464c:	40012c00 	.word	0x40012c00

08004650 <HAL_TIM_IC_Start_IT>:
{
 8004650:	b510      	push	{r4, lr}
 8004652:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004654:	460b      	mov	r3, r1
 8004656:	b9f1      	cbnz	r1, 8004696 <HAL_TIM_IC_Start_IT+0x46>
 8004658:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 800465c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800465e:	bb53      	cbnz	r3, 80046b6 <HAL_TIM_IC_Start_IT+0x66>
 8004660:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8004664:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004666:	2801      	cmp	r0, #1
 8004668:	f040 808e 	bne.w	8004788 <HAL_TIM_IC_Start_IT+0x138>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800466c:	2a01      	cmp	r2, #1
 800466e:	f040 808c 	bne.w	800478a <HAL_TIM_IC_Start_IT+0x13a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	bb83      	cbnz	r3, 80046d6 <HAL_TIM_IC_Start_IT+0x86>
 8004674:	2102      	movs	r1, #2
 8004676:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800467a:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  switch (Channel)
 800467e:	2b0c      	cmp	r3, #12
 8004680:	f200 8084 	bhi.w	800478c <HAL_TIM_IC_Start_IT+0x13c>
 8004684:	e8df f003 	tbb	[pc, r3]
 8004688:	82828269 	.word	0x82828269
 800468c:	82828241 	.word	0x82828241
 8004690:	82828263 	.word	0x82828263
 8004694:	6f          	.byte	0x6f
 8004695:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004696:	2904      	cmp	r1, #4
 8004698:	d005      	beq.n	80046a6 <HAL_TIM_IC_Start_IT+0x56>
 800469a:	2908      	cmp	r1, #8
 800469c:	d007      	beq.n	80046ae <HAL_TIM_IC_Start_IT+0x5e>
 800469e:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 80046a2:	b2c0      	uxtb	r0, r0
 80046a4:	e7db      	b.n	800465e <HAL_TIM_IC_Start_IT+0xe>
 80046a6:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 80046aa:	b2c0      	uxtb	r0, r0
 80046ac:	e7d7      	b.n	800465e <HAL_TIM_IC_Start_IT+0xe>
 80046ae:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80046b2:	b2c0      	uxtb	r0, r0
 80046b4:	e7d3      	b.n	800465e <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d005      	beq.n	80046c6 <HAL_TIM_IC_Start_IT+0x76>
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d007      	beq.n	80046ce <HAL_TIM_IC_Start_IT+0x7e>
 80046be:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	e7cf      	b.n	8004666 <HAL_TIM_IC_Start_IT+0x16>
 80046c6:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	e7cb      	b.n	8004666 <HAL_TIM_IC_Start_IT+0x16>
 80046ce:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	e7c7      	b.n	8004666 <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d00c      	beq.n	80046f4 <HAL_TIM_IC_Start_IT+0xa4>
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_IC_Start_IT+0xac>
 80046de:	2102      	movs	r1, #2
 80046e0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d00d      	beq.n	8004704 <HAL_TIM_IC_Start_IT+0xb4>
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d02d      	beq.n	8004748 <HAL_TIM_IC_Start_IT+0xf8>
 80046ec:	2102      	movs	r1, #2
 80046ee:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
 80046f2:	e7c4      	b.n	800467e <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f4:	2102      	movs	r1, #2
 80046f6:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fa:	e7f3      	b.n	80046e4 <HAL_TIM_IC_Start_IT+0x94>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fc:	2102      	movs	r1, #2
 80046fe:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	e7ef      	b.n	80046e4 <HAL_TIM_IC_Start_IT+0x94>
 8004704:	2202      	movs	r2, #2
 8004706:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800470a:	6821      	ldr	r1, [r4, #0]
 800470c:	68ca      	ldr	r2, [r1, #12]
 800470e:	f042 0204 	orr.w	r2, r2, #4
 8004712:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004714:	2201      	movs	r2, #1
 8004716:	4619      	mov	r1, r3
 8004718:	6820      	ldr	r0, [r4, #0]
 800471a:	f7ff ff1c 	bl	8004556 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <HAL_TIM_IC_Start_IT+0x144>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d025      	beq.n	8004772 <HAL_TIM_IC_Start_IT+0x122>
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472a:	d022      	beq.n	8004772 <HAL_TIM_IC_Start_IT+0x122>
 800472c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004730:	4293      	cmp	r3, r2
 8004732:	d01e      	beq.n	8004772 <HAL_TIM_IC_Start_IT+0x122>
 8004734:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004738:	4293      	cmp	r3, r2
 800473a:	d01a      	beq.n	8004772 <HAL_TIM_IC_Start_IT+0x122>
      __HAL_TIM_ENABLE(htim);
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	2000      	movs	r0, #0
 8004746:	e020      	b.n	800478a <HAL_TIM_IC_Start_IT+0x13a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004748:	2202      	movs	r2, #2
 800474a:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	68ca      	ldr	r2, [r1, #12]
 8004752:	f042 0208 	orr.w	r2, r2, #8
 8004756:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004758:	e7dc      	b.n	8004714 <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800475a:	6821      	ldr	r1, [r4, #0]
 800475c:	68ca      	ldr	r2, [r1, #12]
 800475e:	f042 0202 	orr.w	r2, r2, #2
 8004762:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004764:	e7d6      	b.n	8004714 <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	68ca      	ldr	r2, [r1, #12]
 800476a:	f042 0210 	orr.w	r2, r2, #16
 800476e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004770:	e7d0      	b.n	8004714 <HAL_TIM_IC_Start_IT+0xc4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	2a06      	cmp	r2, #6
 800477a:	d009      	beq.n	8004790 <HAL_TIM_IC_Start_IT+0x140>
        __HAL_TIM_ENABLE(htim);
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	2000      	movs	r0, #0
 8004786:	e000      	b.n	800478a <HAL_TIM_IC_Start_IT+0x13a>
    return HAL_ERROR;
 8004788:	2001      	movs	r0, #1
}
 800478a:	bd10      	pop	{r4, pc}
  switch (Channel)
 800478c:	4610      	mov	r0, r2
 800478e:	e7fc      	b.n	800478a <HAL_TIM_IC_Start_IT+0x13a>
 8004790:	2000      	movs	r0, #0
 8004792:	e7fa      	b.n	800478a <HAL_TIM_IC_Start_IT+0x13a>
 8004794:	40012c00 	.word	0x40012c00

08004798 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004798:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800479c:	2a01      	cmp	r2, #1
 800479e:	d02c      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80047a0:	b410      	push	{r4}
 80047a2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80047a4:	2201      	movs	r2, #1
 80047a6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047aa:	2202      	movs	r2, #2
 80047ac:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b0:	6802      	ldr	r2, [r0, #0]
 80047b2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ba:	6808      	ldr	r0, [r1, #0]
 80047bc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047c0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	480e      	ldr	r0, [pc, #56]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80047c6:	4282      	cmp	r2, r0
 80047c8:	d00a      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80047ca:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80047ce:	d007      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80047d0:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80047d4:	4282      	cmp	r2, r0
 80047d6:	d003      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80047d8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80047dc:	4282      	cmp	r2, r0
 80047de:	d104      	bne.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e4:	6849      	ldr	r1, [r1, #4]
 80047e6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047f0:	2000      	movs	r0, #0
 80047f2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80047f6:	bc10      	pop	{r4}
 80047f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80047fa:	2002      	movs	r0, #2
}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40012c00 	.word	0x40012c00

08004804 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004804:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004806:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d021      	beq.n	8004852 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800480e:	2301      	movs	r3, #1
 8004810:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004814:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481a:	6888      	ldr	r0, [r1, #8]
 800481c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800481e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004822:	6848      	ldr	r0, [r1, #4]
 8004824:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004826:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800482a:	6808      	ldr	r0, [r1, #0]
 800482c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800482e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004832:	6908      	ldr	r0, [r1, #16]
 8004834:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800483a:	6948      	ldr	r0, [r1, #20]
 800483c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800483e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004842:	69c9      	ldr	r1, [r1, #28]
 8004844:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004846:	6811      	ldr	r1, [r2, #0]
 8004848:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800484a:	2000      	movs	r0, #0
 800484c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004850:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004852:	2002      	movs	r0, #2
}
 8004854:	4770      	bx	lr

08004856 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004856:	4770      	bx	lr

08004858 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004858:	4770      	bx	lr
	...

0800485c <siprintf>:
 800485c:	b40e      	push	{r1, r2, r3}
 800485e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004862:	b500      	push	{lr}
 8004864:	b09c      	sub	sp, #112	@ 0x70
 8004866:	ab1d      	add	r3, sp, #116	@ 0x74
 8004868:	9002      	str	r0, [sp, #8]
 800486a:	9006      	str	r0, [sp, #24]
 800486c:	9107      	str	r1, [sp, #28]
 800486e:	9104      	str	r1, [sp, #16]
 8004870:	4808      	ldr	r0, [pc, #32]	@ (8004894 <siprintf+0x38>)
 8004872:	4909      	ldr	r1, [pc, #36]	@ (8004898 <siprintf+0x3c>)
 8004874:	f853 2b04 	ldr.w	r2, [r3], #4
 8004878:	9105      	str	r1, [sp, #20]
 800487a:	6800      	ldr	r0, [r0, #0]
 800487c:	a902      	add	r1, sp, #8
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	f000 f992 	bl	8004ba8 <_svfiprintf_r>
 8004884:	2200      	movs	r2, #0
 8004886:	9b02      	ldr	r3, [sp, #8]
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	b01c      	add	sp, #112	@ 0x70
 800488c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004890:	b003      	add	sp, #12
 8004892:	4770      	bx	lr
 8004894:	200002f8 	.word	0x200002f8
 8004898:	ffff0208 	.word	0xffff0208

0800489c <memset>:
 800489c:	4603      	mov	r3, r0
 800489e:	4402      	add	r2, r0
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d100      	bne.n	80048a6 <memset+0xa>
 80048a4:	4770      	bx	lr
 80048a6:	f803 1b01 	strb.w	r1, [r3], #1
 80048aa:	e7f9      	b.n	80048a0 <memset+0x4>

080048ac <__errno>:
 80048ac:	4b01      	ldr	r3, [pc, #4]	@ (80048b4 <__errno+0x8>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	200002f8 	.word	0x200002f8

080048b8 <__libc_init_array>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	2600      	movs	r6, #0
 80048bc:	4d0c      	ldr	r5, [pc, #48]	@ (80048f0 <__libc_init_array+0x38>)
 80048be:	4c0d      	ldr	r4, [pc, #52]	@ (80048f4 <__libc_init_array+0x3c>)
 80048c0:	1b64      	subs	r4, r4, r5
 80048c2:	10a4      	asrs	r4, r4, #2
 80048c4:	42a6      	cmp	r6, r4
 80048c6:	d109      	bne.n	80048dc <__libc_init_array+0x24>
 80048c8:	f000 fe64 	bl	8005594 <_init>
 80048cc:	2600      	movs	r6, #0
 80048ce:	4d0a      	ldr	r5, [pc, #40]	@ (80048f8 <__libc_init_array+0x40>)
 80048d0:	4c0a      	ldr	r4, [pc, #40]	@ (80048fc <__libc_init_array+0x44>)
 80048d2:	1b64      	subs	r4, r4, r5
 80048d4:	10a4      	asrs	r4, r4, #2
 80048d6:	42a6      	cmp	r6, r4
 80048d8:	d105      	bne.n	80048e6 <__libc_init_array+0x2e>
 80048da:	bd70      	pop	{r4, r5, r6, pc}
 80048dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e0:	4798      	blx	r3
 80048e2:	3601      	adds	r6, #1
 80048e4:	e7ee      	b.n	80048c4 <__libc_init_array+0xc>
 80048e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ea:	4798      	blx	r3
 80048ec:	3601      	adds	r6, #1
 80048ee:	e7f2      	b.n	80048d6 <__libc_init_array+0x1e>
 80048f0:	080056b8 	.word	0x080056b8
 80048f4:	080056b8 	.word	0x080056b8
 80048f8:	080056b8 	.word	0x080056b8
 80048fc:	080056bc 	.word	0x080056bc

08004900 <__retarget_lock_acquire_recursive>:
 8004900:	4770      	bx	lr

08004902 <__retarget_lock_release_recursive>:
 8004902:	4770      	bx	lr

08004904 <_free_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4605      	mov	r5, r0
 8004908:	2900      	cmp	r1, #0
 800490a:	d040      	beq.n	800498e <_free_r+0x8a>
 800490c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004910:	1f0c      	subs	r4, r1, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	bfb8      	it	lt
 8004916:	18e4      	addlt	r4, r4, r3
 8004918:	f000 f8de 	bl	8004ad8 <__malloc_lock>
 800491c:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <_free_r+0x8c>)
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	b933      	cbnz	r3, 8004930 <_free_r+0x2c>
 8004922:	6063      	str	r3, [r4, #4]
 8004924:	6014      	str	r4, [r2, #0]
 8004926:	4628      	mov	r0, r5
 8004928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492c:	f000 b8da 	b.w	8004ae4 <__malloc_unlock>
 8004930:	42a3      	cmp	r3, r4
 8004932:	d908      	bls.n	8004946 <_free_r+0x42>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	1821      	adds	r1, r4, r0
 8004938:	428b      	cmp	r3, r1
 800493a:	bf01      	itttt	eq
 800493c:	6819      	ldreq	r1, [r3, #0]
 800493e:	685b      	ldreq	r3, [r3, #4]
 8004940:	1809      	addeq	r1, r1, r0
 8004942:	6021      	streq	r1, [r4, #0]
 8004944:	e7ed      	b.n	8004922 <_free_r+0x1e>
 8004946:	461a      	mov	r2, r3
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	b10b      	cbz	r3, 8004950 <_free_r+0x4c>
 800494c:	42a3      	cmp	r3, r4
 800494e:	d9fa      	bls.n	8004946 <_free_r+0x42>
 8004950:	6811      	ldr	r1, [r2, #0]
 8004952:	1850      	adds	r0, r2, r1
 8004954:	42a0      	cmp	r0, r4
 8004956:	d10b      	bne.n	8004970 <_free_r+0x6c>
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	4401      	add	r1, r0
 800495c:	1850      	adds	r0, r2, r1
 800495e:	4283      	cmp	r3, r0
 8004960:	6011      	str	r1, [r2, #0]
 8004962:	d1e0      	bne.n	8004926 <_free_r+0x22>
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4408      	add	r0, r1
 800496a:	6010      	str	r0, [r2, #0]
 800496c:	6053      	str	r3, [r2, #4]
 800496e:	e7da      	b.n	8004926 <_free_r+0x22>
 8004970:	d902      	bls.n	8004978 <_free_r+0x74>
 8004972:	230c      	movs	r3, #12
 8004974:	602b      	str	r3, [r5, #0]
 8004976:	e7d6      	b.n	8004926 <_free_r+0x22>
 8004978:	6820      	ldr	r0, [r4, #0]
 800497a:	1821      	adds	r1, r4, r0
 800497c:	428b      	cmp	r3, r1
 800497e:	bf01      	itttt	eq
 8004980:	6819      	ldreq	r1, [r3, #0]
 8004982:	685b      	ldreq	r3, [r3, #4]
 8004984:	1809      	addeq	r1, r1, r0
 8004986:	6021      	streq	r1, [r4, #0]
 8004988:	6063      	str	r3, [r4, #4]
 800498a:	6054      	str	r4, [r2, #4]
 800498c:	e7cb      	b.n	8004926 <_free_r+0x22>
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	200006d4 	.word	0x200006d4

08004994 <sbrk_aligned>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	4e0f      	ldr	r6, [pc, #60]	@ (80049d4 <sbrk_aligned+0x40>)
 8004998:	460c      	mov	r4, r1
 800499a:	6831      	ldr	r1, [r6, #0]
 800499c:	4605      	mov	r5, r0
 800499e:	b911      	cbnz	r1, 80049a6 <sbrk_aligned+0x12>
 80049a0:	f000 fbaa 	bl	80050f8 <_sbrk_r>
 80049a4:	6030      	str	r0, [r6, #0]
 80049a6:	4621      	mov	r1, r4
 80049a8:	4628      	mov	r0, r5
 80049aa:	f000 fba5 	bl	80050f8 <_sbrk_r>
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	d103      	bne.n	80049ba <sbrk_aligned+0x26>
 80049b2:	f04f 34ff 	mov.w	r4, #4294967295
 80049b6:	4620      	mov	r0, r4
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	1cc4      	adds	r4, r0, #3
 80049bc:	f024 0403 	bic.w	r4, r4, #3
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	d0f8      	beq.n	80049b6 <sbrk_aligned+0x22>
 80049c4:	1a21      	subs	r1, r4, r0
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 fb96 	bl	80050f8 <_sbrk_r>
 80049cc:	3001      	adds	r0, #1
 80049ce:	d1f2      	bne.n	80049b6 <sbrk_aligned+0x22>
 80049d0:	e7ef      	b.n	80049b2 <sbrk_aligned+0x1e>
 80049d2:	bf00      	nop
 80049d4:	200006d0 	.word	0x200006d0

080049d8 <_malloc_r>:
 80049d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049dc:	1ccd      	adds	r5, r1, #3
 80049de:	f025 0503 	bic.w	r5, r5, #3
 80049e2:	3508      	adds	r5, #8
 80049e4:	2d0c      	cmp	r5, #12
 80049e6:	bf38      	it	cc
 80049e8:	250c      	movcc	r5, #12
 80049ea:	2d00      	cmp	r5, #0
 80049ec:	4606      	mov	r6, r0
 80049ee:	db01      	blt.n	80049f4 <_malloc_r+0x1c>
 80049f0:	42a9      	cmp	r1, r5
 80049f2:	d904      	bls.n	80049fe <_malloc_r+0x26>
 80049f4:	230c      	movs	r3, #12
 80049f6:	6033      	str	r3, [r6, #0]
 80049f8:	2000      	movs	r0, #0
 80049fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ad4 <_malloc_r+0xfc>
 8004a02:	f000 f869 	bl	8004ad8 <__malloc_lock>
 8004a06:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0a:	461c      	mov	r4, r3
 8004a0c:	bb44      	cbnz	r4, 8004a60 <_malloc_r+0x88>
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4630      	mov	r0, r6
 8004a12:	f7ff ffbf 	bl	8004994 <sbrk_aligned>
 8004a16:	1c43      	adds	r3, r0, #1
 8004a18:	4604      	mov	r4, r0
 8004a1a:	d158      	bne.n	8004ace <_malloc_r+0xf6>
 8004a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a20:	4627      	mov	r7, r4
 8004a22:	2f00      	cmp	r7, #0
 8004a24:	d143      	bne.n	8004aae <_malloc_r+0xd6>
 8004a26:	2c00      	cmp	r4, #0
 8004a28:	d04b      	beq.n	8004ac2 <_malloc_r+0xea>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	4630      	mov	r0, r6
 8004a30:	eb04 0903 	add.w	r9, r4, r3
 8004a34:	f000 fb60 	bl	80050f8 <_sbrk_r>
 8004a38:	4581      	cmp	r9, r0
 8004a3a:	d142      	bne.n	8004ac2 <_malloc_r+0xea>
 8004a3c:	6821      	ldr	r1, [r4, #0]
 8004a3e:	4630      	mov	r0, r6
 8004a40:	1a6d      	subs	r5, r5, r1
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7ff ffa6 	bl	8004994 <sbrk_aligned>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d03a      	beq.n	8004ac2 <_malloc_r+0xea>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	442b      	add	r3, r5
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	f8d8 3000 	ldr.w	r3, [r8]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	bb62      	cbnz	r2, 8004ab4 <_malloc_r+0xdc>
 8004a5a:	f8c8 7000 	str.w	r7, [r8]
 8004a5e:	e00f      	b.n	8004a80 <_malloc_r+0xa8>
 8004a60:	6822      	ldr	r2, [r4, #0]
 8004a62:	1b52      	subs	r2, r2, r5
 8004a64:	d420      	bmi.n	8004aa8 <_malloc_r+0xd0>
 8004a66:	2a0b      	cmp	r2, #11
 8004a68:	d917      	bls.n	8004a9a <_malloc_r+0xc2>
 8004a6a:	1961      	adds	r1, r4, r5
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	6025      	str	r5, [r4, #0]
 8004a70:	bf18      	it	ne
 8004a72:	6059      	strne	r1, [r3, #4]
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	bf08      	it	eq
 8004a78:	f8c8 1000 	streq.w	r1, [r8]
 8004a7c:	5162      	str	r2, [r4, r5]
 8004a7e:	604b      	str	r3, [r1, #4]
 8004a80:	4630      	mov	r0, r6
 8004a82:	f000 f82f 	bl	8004ae4 <__malloc_unlock>
 8004a86:	f104 000b 	add.w	r0, r4, #11
 8004a8a:	1d23      	adds	r3, r4, #4
 8004a8c:	f020 0007 	bic.w	r0, r0, #7
 8004a90:	1ac2      	subs	r2, r0, r3
 8004a92:	bf1c      	itt	ne
 8004a94:	1a1b      	subne	r3, r3, r0
 8004a96:	50a3      	strne	r3, [r4, r2]
 8004a98:	e7af      	b.n	80049fa <_malloc_r+0x22>
 8004a9a:	6862      	ldr	r2, [r4, #4]
 8004a9c:	42a3      	cmp	r3, r4
 8004a9e:	bf0c      	ite	eq
 8004aa0:	f8c8 2000 	streq.w	r2, [r8]
 8004aa4:	605a      	strne	r2, [r3, #4]
 8004aa6:	e7eb      	b.n	8004a80 <_malloc_r+0xa8>
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	6864      	ldr	r4, [r4, #4]
 8004aac:	e7ae      	b.n	8004a0c <_malloc_r+0x34>
 8004aae:	463c      	mov	r4, r7
 8004ab0:	687f      	ldr	r7, [r7, #4]
 8004ab2:	e7b6      	b.n	8004a22 <_malloc_r+0x4a>
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	42a3      	cmp	r3, r4
 8004aba:	d1fb      	bne.n	8004ab4 <_malloc_r+0xdc>
 8004abc:	2300      	movs	r3, #0
 8004abe:	6053      	str	r3, [r2, #4]
 8004ac0:	e7de      	b.n	8004a80 <_malloc_r+0xa8>
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	6033      	str	r3, [r6, #0]
 8004ac8:	f000 f80c 	bl	8004ae4 <__malloc_unlock>
 8004acc:	e794      	b.n	80049f8 <_malloc_r+0x20>
 8004ace:	6005      	str	r5, [r0, #0]
 8004ad0:	e7d6      	b.n	8004a80 <_malloc_r+0xa8>
 8004ad2:	bf00      	nop
 8004ad4:	200006d4 	.word	0x200006d4

08004ad8 <__malloc_lock>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	@ (8004ae0 <__malloc_lock+0x8>)
 8004ada:	f7ff bf11 	b.w	8004900 <__retarget_lock_acquire_recursive>
 8004ade:	bf00      	nop
 8004ae0:	200006cc 	.word	0x200006cc

08004ae4 <__malloc_unlock>:
 8004ae4:	4801      	ldr	r0, [pc, #4]	@ (8004aec <__malloc_unlock+0x8>)
 8004ae6:	f7ff bf0c 	b.w	8004902 <__retarget_lock_release_recursive>
 8004aea:	bf00      	nop
 8004aec:	200006cc 	.word	0x200006cc

08004af0 <__ssputs_r>:
 8004af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	461f      	mov	r7, r3
 8004af6:	688e      	ldr	r6, [r1, #8]
 8004af8:	4682      	mov	sl, r0
 8004afa:	42be      	cmp	r6, r7
 8004afc:	460c      	mov	r4, r1
 8004afe:	4690      	mov	r8, r2
 8004b00:	680b      	ldr	r3, [r1, #0]
 8004b02:	d82d      	bhi.n	8004b60 <__ssputs_r+0x70>
 8004b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b0c:	d026      	beq.n	8004b5c <__ssputs_r+0x6c>
 8004b0e:	6965      	ldr	r5, [r4, #20]
 8004b10:	6909      	ldr	r1, [r1, #16]
 8004b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b16:	eba3 0901 	sub.w	r9, r3, r1
 8004b1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b1e:	1c7b      	adds	r3, r7, #1
 8004b20:	444b      	add	r3, r9
 8004b22:	106d      	asrs	r5, r5, #1
 8004b24:	429d      	cmp	r5, r3
 8004b26:	bf38      	it	cc
 8004b28:	461d      	movcc	r5, r3
 8004b2a:	0553      	lsls	r3, r2, #21
 8004b2c:	d527      	bpl.n	8004b7e <__ssputs_r+0x8e>
 8004b2e:	4629      	mov	r1, r5
 8004b30:	f7ff ff52 	bl	80049d8 <_malloc_r>
 8004b34:	4606      	mov	r6, r0
 8004b36:	b360      	cbz	r0, 8004b92 <__ssputs_r+0xa2>
 8004b38:	464a      	mov	r2, r9
 8004b3a:	6921      	ldr	r1, [r4, #16]
 8004b3c:	f000 fafa 	bl	8005134 <memcpy>
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	6126      	str	r6, [r4, #16]
 8004b4e:	444e      	add	r6, r9
 8004b50:	6026      	str	r6, [r4, #0]
 8004b52:	463e      	mov	r6, r7
 8004b54:	6165      	str	r5, [r4, #20]
 8004b56:	eba5 0509 	sub.w	r5, r5, r9
 8004b5a:	60a5      	str	r5, [r4, #8]
 8004b5c:	42be      	cmp	r6, r7
 8004b5e:	d900      	bls.n	8004b62 <__ssputs_r+0x72>
 8004b60:	463e      	mov	r6, r7
 8004b62:	4632      	mov	r2, r6
 8004b64:	4641      	mov	r1, r8
 8004b66:	6820      	ldr	r0, [r4, #0]
 8004b68:	f000 faac 	bl	80050c4 <memmove>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	1b9b      	subs	r3, r3, r6
 8004b72:	60a3      	str	r3, [r4, #8]
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	4433      	add	r3, r6
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7e:	462a      	mov	r2, r5
 8004b80:	f000 fae6 	bl	8005150 <_realloc_r>
 8004b84:	4606      	mov	r6, r0
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d1e0      	bne.n	8004b4c <__ssputs_r+0x5c>
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	6921      	ldr	r1, [r4, #16]
 8004b8e:	f7ff feb9 	bl	8004904 <_free_r>
 8004b92:	230c      	movs	r3, #12
 8004b94:	f8ca 3000 	str.w	r3, [sl]
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	e7e9      	b.n	8004b7a <__ssputs_r+0x8a>
	...

08004ba8 <_svfiprintf_r>:
 8004ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bac:	4698      	mov	r8, r3
 8004bae:	898b      	ldrh	r3, [r1, #12]
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	460d      	mov	r5, r1
 8004bb6:	4614      	mov	r4, r2
 8004bb8:	b09d      	sub	sp, #116	@ 0x74
 8004bba:	d510      	bpl.n	8004bde <_svfiprintf_r+0x36>
 8004bbc:	690b      	ldr	r3, [r1, #16]
 8004bbe:	b973      	cbnz	r3, 8004bde <_svfiprintf_r+0x36>
 8004bc0:	2140      	movs	r1, #64	@ 0x40
 8004bc2:	f7ff ff09 	bl	80049d8 <_malloc_r>
 8004bc6:	6028      	str	r0, [r5, #0]
 8004bc8:	6128      	str	r0, [r5, #16]
 8004bca:	b930      	cbnz	r0, 8004bda <_svfiprintf_r+0x32>
 8004bcc:	230c      	movs	r3, #12
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	b01d      	add	sp, #116	@ 0x74
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	2340      	movs	r3, #64	@ 0x40
 8004bdc:	616b      	str	r3, [r5, #20]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004be2:	2320      	movs	r3, #32
 8004be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004be8:	2330      	movs	r3, #48	@ 0x30
 8004bea:	f04f 0901 	mov.w	r9, #1
 8004bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bf2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004d8c <_svfiprintf_r+0x1e4>
 8004bf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	469a      	mov	sl, r3
 8004bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c02:	b10a      	cbz	r2, 8004c08 <_svfiprintf_r+0x60>
 8004c04:	2a25      	cmp	r2, #37	@ 0x25
 8004c06:	d1f9      	bne.n	8004bfc <_svfiprintf_r+0x54>
 8004c08:	ebba 0b04 	subs.w	fp, sl, r4
 8004c0c:	d00b      	beq.n	8004c26 <_svfiprintf_r+0x7e>
 8004c0e:	465b      	mov	r3, fp
 8004c10:	4622      	mov	r2, r4
 8004c12:	4629      	mov	r1, r5
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7ff ff6b 	bl	8004af0 <__ssputs_r>
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	f000 80a7 	beq.w	8004d6e <_svfiprintf_r+0x1c6>
 8004c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c22:	445a      	add	r2, fp
 8004c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c26:	f89a 3000 	ldrb.w	r3, [sl]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 809f 	beq.w	8004d6e <_svfiprintf_r+0x1c6>
 8004c30:	2300      	movs	r3, #0
 8004c32:	f04f 32ff 	mov.w	r2, #4294967295
 8004c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c3a:	f10a 0a01 	add.w	sl, sl, #1
 8004c3e:	9304      	str	r3, [sp, #16]
 8004c40:	9307      	str	r3, [sp, #28]
 8004c42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c46:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c48:	4654      	mov	r4, sl
 8004c4a:	2205      	movs	r2, #5
 8004c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c50:	484e      	ldr	r0, [pc, #312]	@ (8004d8c <_svfiprintf_r+0x1e4>)
 8004c52:	f000 fa61 	bl	8005118 <memchr>
 8004c56:	9a04      	ldr	r2, [sp, #16]
 8004c58:	b9d8      	cbnz	r0, 8004c92 <_svfiprintf_r+0xea>
 8004c5a:	06d0      	lsls	r0, r2, #27
 8004c5c:	bf44      	itt	mi
 8004c5e:	2320      	movmi	r3, #32
 8004c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c64:	0711      	lsls	r1, r2, #28
 8004c66:	bf44      	itt	mi
 8004c68:	232b      	movmi	r3, #43	@ 0x2b
 8004c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c74:	d015      	beq.n	8004ca2 <_svfiprintf_r+0xfa>
 8004c76:	4654      	mov	r4, sl
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f04f 0c0a 	mov.w	ip, #10
 8004c7e:	9a07      	ldr	r2, [sp, #28]
 8004c80:	4621      	mov	r1, r4
 8004c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c86:	3b30      	subs	r3, #48	@ 0x30
 8004c88:	2b09      	cmp	r3, #9
 8004c8a:	d94b      	bls.n	8004d24 <_svfiprintf_r+0x17c>
 8004c8c:	b1b0      	cbz	r0, 8004cbc <_svfiprintf_r+0x114>
 8004c8e:	9207      	str	r2, [sp, #28]
 8004c90:	e014      	b.n	8004cbc <_svfiprintf_r+0x114>
 8004c92:	eba0 0308 	sub.w	r3, r0, r8
 8004c96:	fa09 f303 	lsl.w	r3, r9, r3
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	46a2      	mov	sl, r4
 8004c9e:	9304      	str	r3, [sp, #16]
 8004ca0:	e7d2      	b.n	8004c48 <_svfiprintf_r+0xa0>
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	1d19      	adds	r1, r3, #4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	9103      	str	r1, [sp, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bfbb      	ittet	lt
 8004cae:	425b      	neglt	r3, r3
 8004cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8004cb4:	9307      	strge	r3, [sp, #28]
 8004cb6:	9307      	strlt	r3, [sp, #28]
 8004cb8:	bfb8      	it	lt
 8004cba:	9204      	strlt	r2, [sp, #16]
 8004cbc:	7823      	ldrb	r3, [r4, #0]
 8004cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cc0:	d10a      	bne.n	8004cd8 <_svfiprintf_r+0x130>
 8004cc2:	7863      	ldrb	r3, [r4, #1]
 8004cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cc6:	d132      	bne.n	8004d2e <_svfiprintf_r+0x186>
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	3402      	adds	r4, #2
 8004ccc:	1d1a      	adds	r2, r3, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	9203      	str	r2, [sp, #12]
 8004cd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cd6:	9305      	str	r3, [sp, #20]
 8004cd8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004d90 <_svfiprintf_r+0x1e8>
 8004cdc:	2203      	movs	r2, #3
 8004cde:	4650      	mov	r0, sl
 8004ce0:	7821      	ldrb	r1, [r4, #0]
 8004ce2:	f000 fa19 	bl	8005118 <memchr>
 8004ce6:	b138      	cbz	r0, 8004cf8 <_svfiprintf_r+0x150>
 8004ce8:	2240      	movs	r2, #64	@ 0x40
 8004cea:	9b04      	ldr	r3, [sp, #16]
 8004cec:	eba0 000a 	sub.w	r0, r0, sl
 8004cf0:	4082      	lsls	r2, r0
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	3401      	adds	r4, #1
 8004cf6:	9304      	str	r3, [sp, #16]
 8004cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cfc:	2206      	movs	r2, #6
 8004cfe:	4825      	ldr	r0, [pc, #148]	@ (8004d94 <_svfiprintf_r+0x1ec>)
 8004d00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d04:	f000 fa08 	bl	8005118 <memchr>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d036      	beq.n	8004d7a <_svfiprintf_r+0x1d2>
 8004d0c:	4b22      	ldr	r3, [pc, #136]	@ (8004d98 <_svfiprintf_r+0x1f0>)
 8004d0e:	bb1b      	cbnz	r3, 8004d58 <_svfiprintf_r+0x1b0>
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	3307      	adds	r3, #7
 8004d14:	f023 0307 	bic.w	r3, r3, #7
 8004d18:	3308      	adds	r3, #8
 8004d1a:	9303      	str	r3, [sp, #12]
 8004d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d1e:	4433      	add	r3, r6
 8004d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d22:	e76a      	b.n	8004bfa <_svfiprintf_r+0x52>
 8004d24:	460c      	mov	r4, r1
 8004d26:	2001      	movs	r0, #1
 8004d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d2c:	e7a8      	b.n	8004c80 <_svfiprintf_r+0xd8>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f04f 0c0a 	mov.w	ip, #10
 8004d34:	4619      	mov	r1, r3
 8004d36:	3401      	adds	r4, #1
 8004d38:	9305      	str	r3, [sp, #20]
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d40:	3a30      	subs	r2, #48	@ 0x30
 8004d42:	2a09      	cmp	r2, #9
 8004d44:	d903      	bls.n	8004d4e <_svfiprintf_r+0x1a6>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0c6      	beq.n	8004cd8 <_svfiprintf_r+0x130>
 8004d4a:	9105      	str	r1, [sp, #20]
 8004d4c:	e7c4      	b.n	8004cd8 <_svfiprintf_r+0x130>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	2301      	movs	r3, #1
 8004d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d56:	e7f0      	b.n	8004d3a <_svfiprintf_r+0x192>
 8004d58:	ab03      	add	r3, sp, #12
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	4638      	mov	r0, r7
 8004d60:	4b0e      	ldr	r3, [pc, #56]	@ (8004d9c <_svfiprintf_r+0x1f4>)
 8004d62:	a904      	add	r1, sp, #16
 8004d64:	f3af 8000 	nop.w
 8004d68:	1c42      	adds	r2, r0, #1
 8004d6a:	4606      	mov	r6, r0
 8004d6c:	d1d6      	bne.n	8004d1c <_svfiprintf_r+0x174>
 8004d6e:	89ab      	ldrh	r3, [r5, #12]
 8004d70:	065b      	lsls	r3, r3, #25
 8004d72:	f53f af2d 	bmi.w	8004bd0 <_svfiprintf_r+0x28>
 8004d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d78:	e72c      	b.n	8004bd4 <_svfiprintf_r+0x2c>
 8004d7a:	ab03      	add	r3, sp, #12
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	462a      	mov	r2, r5
 8004d80:	4638      	mov	r0, r7
 8004d82:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <_svfiprintf_r+0x1f4>)
 8004d84:	a904      	add	r1, sp, #16
 8004d86:	f000 f87d 	bl	8004e84 <_printf_i>
 8004d8a:	e7ed      	b.n	8004d68 <_svfiprintf_r+0x1c0>
 8004d8c:	0800567c 	.word	0x0800567c
 8004d90:	08005682 	.word	0x08005682
 8004d94:	08005686 	.word	0x08005686
 8004d98:	00000000 	.word	0x00000000
 8004d9c:	08004af1 	.word	0x08004af1

08004da0 <_printf_common>:
 8004da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	4616      	mov	r6, r2
 8004da6:	4698      	mov	r8, r3
 8004da8:	688a      	ldr	r2, [r1, #8]
 8004daa:	690b      	ldr	r3, [r1, #16]
 8004dac:	4607      	mov	r7, r0
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bfb8      	it	lt
 8004db2:	4613      	movlt	r3, r2
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dba:	460c      	mov	r4, r1
 8004dbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dc0:	b10a      	cbz	r2, 8004dc6 <_printf_common+0x26>
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	6033      	str	r3, [r6, #0]
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	0699      	lsls	r1, r3, #26
 8004dca:	bf42      	ittt	mi
 8004dcc:	6833      	ldrmi	r3, [r6, #0]
 8004dce:	3302      	addmi	r3, #2
 8004dd0:	6033      	strmi	r3, [r6, #0]
 8004dd2:	6825      	ldr	r5, [r4, #0]
 8004dd4:	f015 0506 	ands.w	r5, r5, #6
 8004dd8:	d106      	bne.n	8004de8 <_printf_common+0x48>
 8004dda:	f104 0a19 	add.w	sl, r4, #25
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	6832      	ldr	r2, [r6, #0]
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dc2b      	bgt.n	8004e40 <_printf_common+0xa0>
 8004de8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	3b00      	subs	r3, #0
 8004df0:	bf18      	it	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	0692      	lsls	r2, r2, #26
 8004df6:	d430      	bmi.n	8004e5a <_printf_common+0xba>
 8004df8:	4641      	mov	r1, r8
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e00:	47c8      	blx	r9
 8004e02:	3001      	adds	r0, #1
 8004e04:	d023      	beq.n	8004e4e <_printf_common+0xae>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	6922      	ldr	r2, [r4, #16]
 8004e0a:	f003 0306 	and.w	r3, r3, #6
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	bf14      	ite	ne
 8004e12:	2500      	movne	r5, #0
 8004e14:	6833      	ldreq	r3, [r6, #0]
 8004e16:	f04f 0600 	mov.w	r6, #0
 8004e1a:	bf08      	it	eq
 8004e1c:	68e5      	ldreq	r5, [r4, #12]
 8004e1e:	f104 041a 	add.w	r4, r4, #26
 8004e22:	bf08      	it	eq
 8004e24:	1aed      	subeq	r5, r5, r3
 8004e26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e2a:	bf08      	it	eq
 8004e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e30:	4293      	cmp	r3, r2
 8004e32:	bfc4      	itt	gt
 8004e34:	1a9b      	subgt	r3, r3, r2
 8004e36:	18ed      	addgt	r5, r5, r3
 8004e38:	42b5      	cmp	r5, r6
 8004e3a:	d11a      	bne.n	8004e72 <_printf_common+0xd2>
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	e008      	b.n	8004e52 <_printf_common+0xb2>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4652      	mov	r2, sl
 8004e44:	4641      	mov	r1, r8
 8004e46:	4638      	mov	r0, r7
 8004e48:	47c8      	blx	r9
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d103      	bne.n	8004e56 <_printf_common+0xb6>
 8004e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e56:	3501      	adds	r5, #1
 8004e58:	e7c1      	b.n	8004dde <_printf_common+0x3e>
 8004e5a:	2030      	movs	r0, #48	@ 0x30
 8004e5c:	18e1      	adds	r1, r4, r3
 8004e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e68:	4422      	add	r2, r4
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e70:	e7c2      	b.n	8004df8 <_printf_common+0x58>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4622      	mov	r2, r4
 8004e76:	4641      	mov	r1, r8
 8004e78:	4638      	mov	r0, r7
 8004e7a:	47c8      	blx	r9
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d0e6      	beq.n	8004e4e <_printf_common+0xae>
 8004e80:	3601      	adds	r6, #1
 8004e82:	e7d9      	b.n	8004e38 <_printf_common+0x98>

08004e84 <_printf_i>:
 8004e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	7e0f      	ldrb	r7, [r1, #24]
 8004e8a:	4691      	mov	r9, r2
 8004e8c:	2f78      	cmp	r7, #120	@ 0x78
 8004e8e:	4680      	mov	r8, r0
 8004e90:	460c      	mov	r4, r1
 8004e92:	469a      	mov	sl, r3
 8004e94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e9a:	d807      	bhi.n	8004eac <_printf_i+0x28>
 8004e9c:	2f62      	cmp	r7, #98	@ 0x62
 8004e9e:	d80a      	bhi.n	8004eb6 <_printf_i+0x32>
 8004ea0:	2f00      	cmp	r7, #0
 8004ea2:	f000 80d3 	beq.w	800504c <_printf_i+0x1c8>
 8004ea6:	2f58      	cmp	r7, #88	@ 0x58
 8004ea8:	f000 80ba 	beq.w	8005020 <_printf_i+0x19c>
 8004eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004eb4:	e03a      	b.n	8004f2c <_printf_i+0xa8>
 8004eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004eba:	2b15      	cmp	r3, #21
 8004ebc:	d8f6      	bhi.n	8004eac <_printf_i+0x28>
 8004ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8004ec4 <_printf_i+0x40>)
 8004ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004ead 	.word	0x08004ead
 8004ed0:	08004ead 	.word	0x08004ead
 8004ed4:	08004ead 	.word	0x08004ead
 8004ed8:	08004ead 	.word	0x08004ead
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004ead 	.word	0x08004ead
 8004ee4:	08004ead 	.word	0x08004ead
 8004ee8:	08004ead 	.word	0x08004ead
 8004eec:	08004ead 	.word	0x08004ead
 8004ef0:	08005033 	.word	0x08005033
 8004ef4:	08004f5b 	.word	0x08004f5b
 8004ef8:	08004fed 	.word	0x08004fed
 8004efc:	08004ead 	.word	0x08004ead
 8004f00:	08004ead 	.word	0x08004ead
 8004f04:	08005055 	.word	0x08005055
 8004f08:	08004ead 	.word	0x08004ead
 8004f0c:	08004f5b 	.word	0x08004f5b
 8004f10:	08004ead 	.word	0x08004ead
 8004f14:	08004ead 	.word	0x08004ead
 8004f18:	08004ff5 	.word	0x08004ff5
 8004f1c:	6833      	ldr	r3, [r6, #0]
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6032      	str	r2, [r6, #0]
 8004f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e09e      	b.n	800506e <_printf_i+0x1ea>
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	6820      	ldr	r0, [r4, #0]
 8004f34:	1d19      	adds	r1, r3, #4
 8004f36:	6031      	str	r1, [r6, #0]
 8004f38:	0606      	lsls	r6, r0, #24
 8004f3a:	d501      	bpl.n	8004f40 <_printf_i+0xbc>
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	e003      	b.n	8004f48 <_printf_i+0xc4>
 8004f40:	0645      	lsls	r5, r0, #25
 8004f42:	d5fb      	bpl.n	8004f3c <_printf_i+0xb8>
 8004f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	da03      	bge.n	8004f54 <_printf_i+0xd0>
 8004f4c:	232d      	movs	r3, #45	@ 0x2d
 8004f4e:	426d      	negs	r5, r5
 8004f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f54:	230a      	movs	r3, #10
 8004f56:	4859      	ldr	r0, [pc, #356]	@ (80050bc <_printf_i+0x238>)
 8004f58:	e011      	b.n	8004f7e <_printf_i+0xfa>
 8004f5a:	6821      	ldr	r1, [r4, #0]
 8004f5c:	6833      	ldr	r3, [r6, #0]
 8004f5e:	0608      	lsls	r0, r1, #24
 8004f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f64:	d402      	bmi.n	8004f6c <_printf_i+0xe8>
 8004f66:	0649      	lsls	r1, r1, #25
 8004f68:	bf48      	it	mi
 8004f6a:	b2ad      	uxthmi	r5, r5
 8004f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f6e:	6033      	str	r3, [r6, #0]
 8004f70:	bf14      	ite	ne
 8004f72:	230a      	movne	r3, #10
 8004f74:	2308      	moveq	r3, #8
 8004f76:	4851      	ldr	r0, [pc, #324]	@ (80050bc <_printf_i+0x238>)
 8004f78:	2100      	movs	r1, #0
 8004f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f7e:	6866      	ldr	r6, [r4, #4]
 8004f80:	2e00      	cmp	r6, #0
 8004f82:	bfa8      	it	ge
 8004f84:	6821      	ldrge	r1, [r4, #0]
 8004f86:	60a6      	str	r6, [r4, #8]
 8004f88:	bfa4      	itt	ge
 8004f8a:	f021 0104 	bicge.w	r1, r1, #4
 8004f8e:	6021      	strge	r1, [r4, #0]
 8004f90:	b90d      	cbnz	r5, 8004f96 <_printf_i+0x112>
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	d04b      	beq.n	800502e <_printf_i+0x1aa>
 8004f96:	4616      	mov	r6, r2
 8004f98:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f9c:	fb03 5711 	mls	r7, r3, r1, r5
 8004fa0:	5dc7      	ldrb	r7, [r0, r7]
 8004fa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fa6:	462f      	mov	r7, r5
 8004fa8:	42bb      	cmp	r3, r7
 8004faa:	460d      	mov	r5, r1
 8004fac:	d9f4      	bls.n	8004f98 <_printf_i+0x114>
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d10b      	bne.n	8004fca <_printf_i+0x146>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	07df      	lsls	r7, r3, #31
 8004fb6:	d508      	bpl.n	8004fca <_printf_i+0x146>
 8004fb8:	6923      	ldr	r3, [r4, #16]
 8004fba:	6861      	ldr	r1, [r4, #4]
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	bfde      	ittt	le
 8004fc0:	2330      	movle	r3, #48	@ 0x30
 8004fc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fca:	1b92      	subs	r2, r2, r6
 8004fcc:	6122      	str	r2, [r4, #16]
 8004fce:	464b      	mov	r3, r9
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f8cd a000 	str.w	sl, [sp]
 8004fd8:	aa03      	add	r2, sp, #12
 8004fda:	f7ff fee1 	bl	8004da0 <_printf_common>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d14a      	bne.n	8005078 <_printf_i+0x1f4>
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe6:	b004      	add	sp, #16
 8004fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	f043 0320 	orr.w	r3, r3, #32
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	2778      	movs	r7, #120	@ 0x78
 8004ff6:	4832      	ldr	r0, [pc, #200]	@ (80050c0 <_printf_i+0x23c>)
 8004ff8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	6831      	ldr	r1, [r6, #0]
 8005000:	061f      	lsls	r7, r3, #24
 8005002:	f851 5b04 	ldr.w	r5, [r1], #4
 8005006:	d402      	bmi.n	800500e <_printf_i+0x18a>
 8005008:	065f      	lsls	r7, r3, #25
 800500a:	bf48      	it	mi
 800500c:	b2ad      	uxthmi	r5, r5
 800500e:	6031      	str	r1, [r6, #0]
 8005010:	07d9      	lsls	r1, r3, #31
 8005012:	bf44      	itt	mi
 8005014:	f043 0320 	orrmi.w	r3, r3, #32
 8005018:	6023      	strmi	r3, [r4, #0]
 800501a:	b11d      	cbz	r5, 8005024 <_printf_i+0x1a0>
 800501c:	2310      	movs	r3, #16
 800501e:	e7ab      	b.n	8004f78 <_printf_i+0xf4>
 8005020:	4826      	ldr	r0, [pc, #152]	@ (80050bc <_printf_i+0x238>)
 8005022:	e7e9      	b.n	8004ff8 <_printf_i+0x174>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	f023 0320 	bic.w	r3, r3, #32
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	e7f6      	b.n	800501c <_printf_i+0x198>
 800502e:	4616      	mov	r6, r2
 8005030:	e7bd      	b.n	8004fae <_printf_i+0x12a>
 8005032:	6833      	ldr	r3, [r6, #0]
 8005034:	6825      	ldr	r5, [r4, #0]
 8005036:	1d18      	adds	r0, r3, #4
 8005038:	6961      	ldr	r1, [r4, #20]
 800503a:	6030      	str	r0, [r6, #0]
 800503c:	062e      	lsls	r6, r5, #24
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	d501      	bpl.n	8005046 <_printf_i+0x1c2>
 8005042:	6019      	str	r1, [r3, #0]
 8005044:	e002      	b.n	800504c <_printf_i+0x1c8>
 8005046:	0668      	lsls	r0, r5, #25
 8005048:	d5fb      	bpl.n	8005042 <_printf_i+0x1be>
 800504a:	8019      	strh	r1, [r3, #0]
 800504c:	2300      	movs	r3, #0
 800504e:	4616      	mov	r6, r2
 8005050:	6123      	str	r3, [r4, #16]
 8005052:	e7bc      	b.n	8004fce <_printf_i+0x14a>
 8005054:	6833      	ldr	r3, [r6, #0]
 8005056:	2100      	movs	r1, #0
 8005058:	1d1a      	adds	r2, r3, #4
 800505a:	6032      	str	r2, [r6, #0]
 800505c:	681e      	ldr	r6, [r3, #0]
 800505e:	6862      	ldr	r2, [r4, #4]
 8005060:	4630      	mov	r0, r6
 8005062:	f000 f859 	bl	8005118 <memchr>
 8005066:	b108      	cbz	r0, 800506c <_printf_i+0x1e8>
 8005068:	1b80      	subs	r0, r0, r6
 800506a:	6060      	str	r0, [r4, #4]
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	6123      	str	r3, [r4, #16]
 8005070:	2300      	movs	r3, #0
 8005072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005076:	e7aa      	b.n	8004fce <_printf_i+0x14a>
 8005078:	4632      	mov	r2, r6
 800507a:	4649      	mov	r1, r9
 800507c:	4640      	mov	r0, r8
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	47d0      	blx	sl
 8005082:	3001      	adds	r0, #1
 8005084:	d0ad      	beq.n	8004fe2 <_printf_i+0x15e>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	079b      	lsls	r3, r3, #30
 800508a:	d413      	bmi.n	80050b4 <_printf_i+0x230>
 800508c:	68e0      	ldr	r0, [r4, #12]
 800508e:	9b03      	ldr	r3, [sp, #12]
 8005090:	4298      	cmp	r0, r3
 8005092:	bfb8      	it	lt
 8005094:	4618      	movlt	r0, r3
 8005096:	e7a6      	b.n	8004fe6 <_printf_i+0x162>
 8005098:	2301      	movs	r3, #1
 800509a:	4632      	mov	r2, r6
 800509c:	4649      	mov	r1, r9
 800509e:	4640      	mov	r0, r8
 80050a0:	47d0      	blx	sl
 80050a2:	3001      	adds	r0, #1
 80050a4:	d09d      	beq.n	8004fe2 <_printf_i+0x15e>
 80050a6:	3501      	adds	r5, #1
 80050a8:	68e3      	ldr	r3, [r4, #12]
 80050aa:	9903      	ldr	r1, [sp, #12]
 80050ac:	1a5b      	subs	r3, r3, r1
 80050ae:	42ab      	cmp	r3, r5
 80050b0:	dcf2      	bgt.n	8005098 <_printf_i+0x214>
 80050b2:	e7eb      	b.n	800508c <_printf_i+0x208>
 80050b4:	2500      	movs	r5, #0
 80050b6:	f104 0619 	add.w	r6, r4, #25
 80050ba:	e7f5      	b.n	80050a8 <_printf_i+0x224>
 80050bc:	0800568d 	.word	0x0800568d
 80050c0:	0800569e 	.word	0x0800569e

080050c4 <memmove>:
 80050c4:	4288      	cmp	r0, r1
 80050c6:	b510      	push	{r4, lr}
 80050c8:	eb01 0402 	add.w	r4, r1, r2
 80050cc:	d902      	bls.n	80050d4 <memmove+0x10>
 80050ce:	4284      	cmp	r4, r0
 80050d0:	4623      	mov	r3, r4
 80050d2:	d807      	bhi.n	80050e4 <memmove+0x20>
 80050d4:	1e43      	subs	r3, r0, #1
 80050d6:	42a1      	cmp	r1, r4
 80050d8:	d008      	beq.n	80050ec <memmove+0x28>
 80050da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050e2:	e7f8      	b.n	80050d6 <memmove+0x12>
 80050e4:	4601      	mov	r1, r0
 80050e6:	4402      	add	r2, r0
 80050e8:	428a      	cmp	r2, r1
 80050ea:	d100      	bne.n	80050ee <memmove+0x2a>
 80050ec:	bd10      	pop	{r4, pc}
 80050ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050f6:	e7f7      	b.n	80050e8 <memmove+0x24>

080050f8 <_sbrk_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	2300      	movs	r3, #0
 80050fc:	4d05      	ldr	r5, [pc, #20]	@ (8005114 <_sbrk_r+0x1c>)
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	f7fd f948 	bl	8002398 <_sbrk>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_sbrk_r+0x1a>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	b103      	cbz	r3, 8005112 <_sbrk_r+0x1a>
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	200006c8 	.word	0x200006c8

08005118 <memchr>:
 8005118:	4603      	mov	r3, r0
 800511a:	b510      	push	{r4, lr}
 800511c:	b2c9      	uxtb	r1, r1
 800511e:	4402      	add	r2, r0
 8005120:	4293      	cmp	r3, r2
 8005122:	4618      	mov	r0, r3
 8005124:	d101      	bne.n	800512a <memchr+0x12>
 8005126:	2000      	movs	r0, #0
 8005128:	e003      	b.n	8005132 <memchr+0x1a>
 800512a:	7804      	ldrb	r4, [r0, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	428c      	cmp	r4, r1
 8005130:	d1f6      	bne.n	8005120 <memchr+0x8>
 8005132:	bd10      	pop	{r4, pc}

08005134 <memcpy>:
 8005134:	440a      	add	r2, r1
 8005136:	4291      	cmp	r1, r2
 8005138:	f100 33ff 	add.w	r3, r0, #4294967295
 800513c:	d100      	bne.n	8005140 <memcpy+0xc>
 800513e:	4770      	bx	lr
 8005140:	b510      	push	{r4, lr}
 8005142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005146:	4291      	cmp	r1, r2
 8005148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800514c:	d1f9      	bne.n	8005142 <memcpy+0xe>
 800514e:	bd10      	pop	{r4, pc}

08005150 <_realloc_r>:
 8005150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005154:	4680      	mov	r8, r0
 8005156:	4615      	mov	r5, r2
 8005158:	460c      	mov	r4, r1
 800515a:	b921      	cbnz	r1, 8005166 <_realloc_r+0x16>
 800515c:	4611      	mov	r1, r2
 800515e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005162:	f7ff bc39 	b.w	80049d8 <_malloc_r>
 8005166:	b92a      	cbnz	r2, 8005174 <_realloc_r+0x24>
 8005168:	f7ff fbcc 	bl	8004904 <_free_r>
 800516c:	2400      	movs	r4, #0
 800516e:	4620      	mov	r0, r4
 8005170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005174:	f000 f81a 	bl	80051ac <_malloc_usable_size_r>
 8005178:	4285      	cmp	r5, r0
 800517a:	4606      	mov	r6, r0
 800517c:	d802      	bhi.n	8005184 <_realloc_r+0x34>
 800517e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005182:	d8f4      	bhi.n	800516e <_realloc_r+0x1e>
 8005184:	4629      	mov	r1, r5
 8005186:	4640      	mov	r0, r8
 8005188:	f7ff fc26 	bl	80049d8 <_malloc_r>
 800518c:	4607      	mov	r7, r0
 800518e:	2800      	cmp	r0, #0
 8005190:	d0ec      	beq.n	800516c <_realloc_r+0x1c>
 8005192:	42b5      	cmp	r5, r6
 8005194:	462a      	mov	r2, r5
 8005196:	4621      	mov	r1, r4
 8005198:	bf28      	it	cs
 800519a:	4632      	movcs	r2, r6
 800519c:	f7ff ffca 	bl	8005134 <memcpy>
 80051a0:	4621      	mov	r1, r4
 80051a2:	4640      	mov	r0, r8
 80051a4:	f7ff fbae 	bl	8004904 <_free_r>
 80051a8:	463c      	mov	r4, r7
 80051aa:	e7e0      	b.n	800516e <_realloc_r+0x1e>

080051ac <_malloc_usable_size_r>:
 80051ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b0:	1f18      	subs	r0, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bfbc      	itt	lt
 80051b6:	580b      	ldrlt	r3, [r1, r0]
 80051b8:	18c0      	addlt	r0, r0, r3
 80051ba:	4770      	bx	lr

080051bc <log>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	4604      	mov	r4, r0
 80051c0:	460d      	mov	r5, r1
 80051c2:	f000 f835 	bl	8005230 <__ieee754_log>
 80051c6:	4622      	mov	r2, r4
 80051c8:	4606      	mov	r6, r0
 80051ca:	460f      	mov	r7, r1
 80051cc:	462b      	mov	r3, r5
 80051ce:	4620      	mov	r0, r4
 80051d0:	4629      	mov	r1, r5
 80051d2:	f7fb fcd9 	bl	8000b88 <__aeabi_dcmpun>
 80051d6:	b998      	cbnz	r0, 8005200 <log+0x44>
 80051d8:	2200      	movs	r2, #0
 80051da:	2300      	movs	r3, #0
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fb fcc8 	bl	8000b74 <__aeabi_dcmpgt>
 80051e4:	b960      	cbnz	r0, 8005200 <log+0x44>
 80051e6:	2200      	movs	r2, #0
 80051e8:	2300      	movs	r3, #0
 80051ea:	4620      	mov	r0, r4
 80051ec:	4629      	mov	r1, r5
 80051ee:	f7fb fc99 	bl	8000b24 <__aeabi_dcmpeq>
 80051f2:	b140      	cbz	r0, 8005206 <log+0x4a>
 80051f4:	f7ff fb5a 	bl	80048ac <__errno>
 80051f8:	2322      	movs	r3, #34	@ 0x22
 80051fa:	2600      	movs	r6, #0
 80051fc:	4f06      	ldr	r7, [pc, #24]	@ (8005218 <log+0x5c>)
 80051fe:	6003      	str	r3, [r0, #0]
 8005200:	4630      	mov	r0, r6
 8005202:	4639      	mov	r1, r7
 8005204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005206:	f7ff fb51 	bl	80048ac <__errno>
 800520a:	2321      	movs	r3, #33	@ 0x21
 800520c:	6003      	str	r3, [r0, #0]
 800520e:	4803      	ldr	r0, [pc, #12]	@ (800521c <log+0x60>)
 8005210:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005214:	f000 b804 	b.w	8005220 <nan>
 8005218:	fff00000 	.word	0xfff00000
 800521c:	08005681 	.word	0x08005681

08005220 <nan>:
 8005220:	2000      	movs	r0, #0
 8005222:	4901      	ldr	r1, [pc, #4]	@ (8005228 <nan+0x8>)
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	7ff80000 	.word	0x7ff80000
 800522c:	00000000 	.word	0x00000000

08005230 <__ieee754_log>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	460d      	mov	r5, r1
 800523e:	b087      	sub	sp, #28
 8005240:	da24      	bge.n	800528c <__ieee754_log+0x5c>
 8005242:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8005246:	4304      	orrs	r4, r0
 8005248:	d108      	bne.n	800525c <__ieee754_log+0x2c>
 800524a:	2200      	movs	r2, #0
 800524c:	2300      	movs	r3, #0
 800524e:	2000      	movs	r0, #0
 8005250:	49cb      	ldr	r1, [pc, #812]	@ (8005580 <__ieee754_log+0x350>)
 8005252:	f7fb fb29 	bl	80008a8 <__aeabi_ddiv>
 8005256:	b007      	add	sp, #28
 8005258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	2900      	cmp	r1, #0
 800525e:	da04      	bge.n	800526a <__ieee754_log+0x3a>
 8005260:	f7fb f840 	bl	80002e4 <__aeabi_dsub>
 8005264:	2200      	movs	r2, #0
 8005266:	2300      	movs	r3, #0
 8005268:	e7f3      	b.n	8005252 <__ieee754_log+0x22>
 800526a:	2200      	movs	r2, #0
 800526c:	4bc5      	ldr	r3, [pc, #788]	@ (8005584 <__ieee754_log+0x354>)
 800526e:	f7fb f9f1 	bl	8000654 <__aeabi_dmul>
 8005272:	460b      	mov	r3, r1
 8005274:	460d      	mov	r5, r1
 8005276:	4602      	mov	r2, r0
 8005278:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800527c:	48c2      	ldr	r0, [pc, #776]	@ (8005588 <__ieee754_log+0x358>)
 800527e:	4285      	cmp	r5, r0
 8005280:	dd06      	ble.n	8005290 <__ieee754_log+0x60>
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	f7fb f82f 	bl	80002e8 <__adddf3>
 800528a:	e7e4      	b.n	8005256 <__ieee754_log+0x26>
 800528c:	2100      	movs	r1, #0
 800528e:	e7f5      	b.n	800527c <__ieee754_log+0x4c>
 8005290:	152c      	asrs	r4, r5, #20
 8005292:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8005296:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800529a:	440c      	add	r4, r1
 800529c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 80052a0:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 80052a4:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 80052a8:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 80052ac:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 80052b0:	ea41 0305 	orr.w	r3, r1, r5
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	2200      	movs	r2, #0
 80052ba:	4bb4      	ldr	r3, [pc, #720]	@ (800558c <__ieee754_log+0x35c>)
 80052bc:	f7fb f812 	bl	80002e4 <__aeabi_dsub>
 80052c0:	1cab      	adds	r3, r5, #2
 80052c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	4682      	mov	sl, r0
 80052ca:	468b      	mov	fp, r1
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 80052d4:	dc53      	bgt.n	800537e <__ieee754_log+0x14e>
 80052d6:	2300      	movs	r3, #0
 80052d8:	f7fb fc24 	bl	8000b24 <__aeabi_dcmpeq>
 80052dc:	b1d0      	cbz	r0, 8005314 <__ieee754_log+0xe4>
 80052de:	2c00      	cmp	r4, #0
 80052e0:	f000 8120 	beq.w	8005524 <__ieee754_log+0x2f4>
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7fb f94b 	bl	8000580 <__aeabi_i2d>
 80052ea:	a391      	add	r3, pc, #580	@ (adr r3, 8005530 <__ieee754_log+0x300>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	4606      	mov	r6, r0
 80052f2:	460f      	mov	r7, r1
 80052f4:	f7fb f9ae 	bl	8000654 <__aeabi_dmul>
 80052f8:	a38f      	add	r3, pc, #572	@ (adr r3, 8005538 <__ieee754_log+0x308>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	4604      	mov	r4, r0
 8005300:	460d      	mov	r5, r1
 8005302:	4630      	mov	r0, r6
 8005304:	4639      	mov	r1, r7
 8005306:	f7fb f9a5 	bl	8000654 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	e7b8      	b.n	8005286 <__ieee754_log+0x56>
 8005314:	a38a      	add	r3, pc, #552	@ (adr r3, 8005540 <__ieee754_log+0x310>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	4650      	mov	r0, sl
 800531c:	4659      	mov	r1, fp
 800531e:	f7fb f999 	bl	8000654 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	2000      	movs	r0, #0
 8005328:	4999      	ldr	r1, [pc, #612]	@ (8005590 <__ieee754_log+0x360>)
 800532a:	f7fa ffdb 	bl	80002e4 <__aeabi_dsub>
 800532e:	4652      	mov	r2, sl
 8005330:	4606      	mov	r6, r0
 8005332:	460f      	mov	r7, r1
 8005334:	465b      	mov	r3, fp
 8005336:	4650      	mov	r0, sl
 8005338:	4659      	mov	r1, fp
 800533a:	f7fb f98b 	bl	8000654 <__aeabi_dmul>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4630      	mov	r0, r6
 8005344:	4639      	mov	r1, r7
 8005346:	f7fb f985 	bl	8000654 <__aeabi_dmul>
 800534a:	4606      	mov	r6, r0
 800534c:	460f      	mov	r7, r1
 800534e:	b914      	cbnz	r4, 8005356 <__ieee754_log+0x126>
 8005350:	4632      	mov	r2, r6
 8005352:	463b      	mov	r3, r7
 8005354:	e0a0      	b.n	8005498 <__ieee754_log+0x268>
 8005356:	4620      	mov	r0, r4
 8005358:	f7fb f912 	bl	8000580 <__aeabi_i2d>
 800535c:	a374      	add	r3, pc, #464	@ (adr r3, 8005530 <__ieee754_log+0x300>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	4680      	mov	r8, r0
 8005364:	4689      	mov	r9, r1
 8005366:	f7fb f975 	bl	8000654 <__aeabi_dmul>
 800536a:	a373      	add	r3, pc, #460	@ (adr r3, 8005538 <__ieee754_log+0x308>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	4604      	mov	r4, r0
 8005372:	460d      	mov	r5, r1
 8005374:	4640      	mov	r0, r8
 8005376:	4649      	mov	r1, r9
 8005378:	f7fb f96c 	bl	8000654 <__aeabi_dmul>
 800537c:	e0a5      	b.n	80054ca <__ieee754_log+0x29a>
 800537e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005382:	f7fa ffb1 	bl	80002e8 <__adddf3>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4650      	mov	r0, sl
 800538c:	4659      	mov	r1, fp
 800538e:	f7fb fa8b 	bl	80008a8 <__aeabi_ddiv>
 8005392:	e9cd 0100 	strd	r0, r1, [sp]
 8005396:	4620      	mov	r0, r4
 8005398:	f7fb f8f2 	bl	8000580 <__aeabi_i2d>
 800539c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a4:	4610      	mov	r0, r2
 80053a6:	4619      	mov	r1, r3
 80053a8:	f7fb f954 	bl	8000654 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053b4:	f7fb f94e 	bl	8000654 <__aeabi_dmul>
 80053b8:	a363      	add	r3, pc, #396	@ (adr r3, 8005548 <__ieee754_log+0x318>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	4680      	mov	r8, r0
 80053c0:	4689      	mov	r9, r1
 80053c2:	f7fb f947 	bl	8000654 <__aeabi_dmul>
 80053c6:	a362      	add	r3, pc, #392	@ (adr r3, 8005550 <__ieee754_log+0x320>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fa ff8c 	bl	80002e8 <__adddf3>
 80053d0:	4642      	mov	r2, r8
 80053d2:	464b      	mov	r3, r9
 80053d4:	f7fb f93e 	bl	8000654 <__aeabi_dmul>
 80053d8:	a35f      	add	r3, pc, #380	@ (adr r3, 8005558 <__ieee754_log+0x328>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fa ff83 	bl	80002e8 <__adddf3>
 80053e2:	4642      	mov	r2, r8
 80053e4:	464b      	mov	r3, r9
 80053e6:	f7fb f935 	bl	8000654 <__aeabi_dmul>
 80053ea:	a35d      	add	r3, pc, #372	@ (adr r3, 8005560 <__ieee754_log+0x330>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fa ff7a 	bl	80002e8 <__adddf3>
 80053f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053f8:	f7fb f92c 	bl	8000654 <__aeabi_dmul>
 80053fc:	a35a      	add	r3, pc, #360	@ (adr r3, 8005568 <__ieee754_log+0x338>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fb f923 	bl	8000654 <__aeabi_dmul>
 800540e:	a358      	add	r3, pc, #352	@ (adr r3, 8005570 <__ieee754_log+0x340>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fa ff68 	bl	80002e8 <__adddf3>
 8005418:	4642      	mov	r2, r8
 800541a:	464b      	mov	r3, r9
 800541c:	f7fb f91a 	bl	8000654 <__aeabi_dmul>
 8005420:	a355      	add	r3, pc, #340	@ (adr r3, 8005578 <__ieee754_log+0x348>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fa ff5f 	bl	80002e8 <__adddf3>
 800542a:	4642      	mov	r2, r8
 800542c:	464b      	mov	r3, r9
 800542e:	f7fb f911 	bl	8000654 <__aeabi_dmul>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800543a:	f7fa ff55 	bl	80002e8 <__adddf3>
 800543e:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8005442:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8005446:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800544a:	3551      	adds	r5, #81	@ 0x51
 800544c:	4335      	orrs	r5, r6
 800544e:	2d00      	cmp	r5, #0
 8005450:	4680      	mov	r8, r0
 8005452:	4689      	mov	r9, r1
 8005454:	dd48      	ble.n	80054e8 <__ieee754_log+0x2b8>
 8005456:	2200      	movs	r2, #0
 8005458:	4b4d      	ldr	r3, [pc, #308]	@ (8005590 <__ieee754_log+0x360>)
 800545a:	4650      	mov	r0, sl
 800545c:	4659      	mov	r1, fp
 800545e:	f7fb f8f9 	bl	8000654 <__aeabi_dmul>
 8005462:	4652      	mov	r2, sl
 8005464:	465b      	mov	r3, fp
 8005466:	f7fb f8f5 	bl	8000654 <__aeabi_dmul>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4606      	mov	r6, r0
 8005470:	460f      	mov	r7, r1
 8005472:	4640      	mov	r0, r8
 8005474:	4649      	mov	r1, r9
 8005476:	f7fa ff37 	bl	80002e8 <__adddf3>
 800547a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800547e:	f7fb f8e9 	bl	8000654 <__aeabi_dmul>
 8005482:	4680      	mov	r8, r0
 8005484:	4689      	mov	r9, r1
 8005486:	b964      	cbnz	r4, 80054a2 <__ieee754_log+0x272>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	f7fa ff28 	bl	80002e4 <__aeabi_dsub>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4650      	mov	r0, sl
 800549a:	4659      	mov	r1, fp
 800549c:	f7fa ff22 	bl	80002e4 <__aeabi_dsub>
 80054a0:	e6d9      	b.n	8005256 <__ieee754_log+0x26>
 80054a2:	a323      	add	r3, pc, #140	@ (adr r3, 8005530 <__ieee754_log+0x300>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ac:	f7fb f8d2 	bl	8000654 <__aeabi_dmul>
 80054b0:	a321      	add	r3, pc, #132	@ (adr r3, 8005538 <__ieee754_log+0x308>)
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	4604      	mov	r4, r0
 80054b8:	460d      	mov	r5, r1
 80054ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054be:	f7fb f8c9 	bl	8000654 <__aeabi_dmul>
 80054c2:	4642      	mov	r2, r8
 80054c4:	464b      	mov	r3, r9
 80054c6:	f7fa ff0f 	bl	80002e8 <__adddf3>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4630      	mov	r0, r6
 80054d0:	4639      	mov	r1, r7
 80054d2:	f7fa ff07 	bl	80002e4 <__aeabi_dsub>
 80054d6:	4652      	mov	r2, sl
 80054d8:	465b      	mov	r3, fp
 80054da:	f7fa ff03 	bl	80002e4 <__aeabi_dsub>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4620      	mov	r0, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	e7d9      	b.n	800549c <__ieee754_log+0x26c>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4650      	mov	r0, sl
 80054ee:	4659      	mov	r1, fp
 80054f0:	f7fa fef8 	bl	80002e4 <__aeabi_dsub>
 80054f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054f8:	f7fb f8ac 	bl	8000654 <__aeabi_dmul>
 80054fc:	4606      	mov	r6, r0
 80054fe:	460f      	mov	r7, r1
 8005500:	2c00      	cmp	r4, #0
 8005502:	f43f af25 	beq.w	8005350 <__ieee754_log+0x120>
 8005506:	a30a      	add	r3, pc, #40	@ (adr r3, 8005530 <__ieee754_log+0x300>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005510:	f7fb f8a0 	bl	8000654 <__aeabi_dmul>
 8005514:	a308      	add	r3, pc, #32	@ (adr r3, 8005538 <__ieee754_log+0x308>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	4604      	mov	r4, r0
 800551c:	460d      	mov	r5, r1
 800551e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005522:	e729      	b.n	8005378 <__ieee754_log+0x148>
 8005524:	2000      	movs	r0, #0
 8005526:	2100      	movs	r1, #0
 8005528:	e695      	b.n	8005256 <__ieee754_log+0x26>
 800552a:	bf00      	nop
 800552c:	f3af 8000 	nop.w
 8005530:	fee00000 	.word	0xfee00000
 8005534:	3fe62e42 	.word	0x3fe62e42
 8005538:	35793c76 	.word	0x35793c76
 800553c:	3dea39ef 	.word	0x3dea39ef
 8005540:	55555555 	.word	0x55555555
 8005544:	3fd55555 	.word	0x3fd55555
 8005548:	df3e5244 	.word	0xdf3e5244
 800554c:	3fc2f112 	.word	0x3fc2f112
 8005550:	96cb03de 	.word	0x96cb03de
 8005554:	3fc74664 	.word	0x3fc74664
 8005558:	94229359 	.word	0x94229359
 800555c:	3fd24924 	.word	0x3fd24924
 8005560:	55555593 	.word	0x55555593
 8005564:	3fe55555 	.word	0x3fe55555
 8005568:	d078c69f 	.word	0xd078c69f
 800556c:	3fc39a09 	.word	0x3fc39a09
 8005570:	1d8e78af 	.word	0x1d8e78af
 8005574:	3fcc71c5 	.word	0x3fcc71c5
 8005578:	9997fa04 	.word	0x9997fa04
 800557c:	3fd99999 	.word	0x3fd99999
 8005580:	c3500000 	.word	0xc3500000
 8005584:	43500000 	.word	0x43500000
 8005588:	7fefffff 	.word	0x7fefffff
 800558c:	3ff00000 	.word	0x3ff00000
 8005590:	3fe00000 	.word	0x3fe00000

08005594 <_init>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	bf00      	nop
 8005598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559a:	bc08      	pop	{r3}
 800559c:	469e      	mov	lr, r3
 800559e:	4770      	bx	lr

080055a0 <_fini>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr
